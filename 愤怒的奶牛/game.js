var _STRINGS = {
    Ad: {
        Mobile: {
            Preroll: {
                ReadyIn: "The game is ready in ",
                Loading: "Your game is loading...",
                Close: "Close"
            },
            Header: {
                ReadyIn: "The game is ready in ",
                Loading: "Your game is loading...",
                Close: "Close"
            },
            End: {
                ReadyIn: "Advertisement ends in ",
                Loading: "Please wait ...",
                Close: "Close"
            }
        }
    },
    Splash: {
        Loading: "Loading ...",
        LogoLine1: "Some text here",
        LogoLine2: "powered by MarketJS",
        LogoLine3: "none"
    },
    Game: {
        SelectPlayer: "Select Player",
        Win: "You win!",
        Lose: "You lose!",
        Score: "Score",
        Time: "Time"
    },
    Results: {
        Title: "High score"
    },
    tutorial: {
        level1: [{
            string: "Let's learn how to launch a baby cow"
        }, {
            string: "Touch here and hold."
        }, {
            string: "Drag here to adjust power and direction."
        }, {
            string: "Release now to fire."
        }, {
            string: ""
        }, {
            string: ""
        }],
        level2: [{
            string: "Touch here and release."
        }, {
            string: ""
        }, {
            string: "Touch again to trigger powerup."
        }],
        level4: [{
            string: "Touch here to use new baby cow."
        }, {
            string: "Now tap here once."
        }, {
            string: ""
        }, {
            string: "Touch again to trigger new powerup."
        }],
        level7: [{
            string: "You must use black cow to break rock."
        }, {
            string: "Touch here now."
        }, {
            string: ""
        }, {
            string: "Touch the screen again to trigger powerup."
        }]
    }
};
var _SETTINGS = {
    API: {
        Enabled: !0,
        Log: {
            Events: {
                InitializeGame: !0,
                EndGame: !0,
                Level: {
                    Begin: !0,
                    End: !0,
                    Win: !0,
                    Lose: !0,
                    Draw: !0
                }
            }
        }
    },
    Ad: {
        Mobile: {
            Preroll: {
                Enabled: !0,
                Duration: 5,
                Width: 300,
                Height: 250,
                Rotation: {
                    Enabled: !1,
                    Weight: {
                        MobileAdInGamePreroll: 40,
                        MobileAdInGamePreroll2: 40,
                        MobileAdInGamePreroll3: 20
                    }
                }
            },
            Header: {
                Enabled: !1,
                Duration: 5,
                Width: 320,
                Height: 50,
                Rotation: {
                    Enabled: !1,
                    Weight: {
                        MobileAdInGameHeader: 40,
                        MobileAdInGameHeader2: 40,
                        MobileAdInGameHeader3: 20
                    }
                }
            },
            Footer: {
                Enabled: !1,
                Duration: 5,
                Width: 320,
                Height: 50,
                Rotation: {
                    Enabled: !1,
                    Weight: {
                        MobileAdInGameFooter: 40,
                        MobileAdInGameFooter2: 40,
                        MobileAdInGameFooter3: 20
                    }
                }
            },
            End: {
                Enabled: !1,
                Duration: 1,
                Width: 300,
                Height: 250,
                Rotation: {
                    Enabled: !1,
                    Weight: {
                        MobileAdInGameEnd: 40,
                        MobileAdInGameEnd2: 40,
                        MobileAdInGameEnd3: 20
                    }
                }
            }
        }
    },
    Language: {
        Default: "en"
    },
    DeveloperBranding: {
        Splash: {
            Enabled: !0
        },
        Logo: {
            Enabled: !0,
            Link: "http://marketjs.com",
            LinkEnabled: !1,
            NewWindow: !1,
            Width: 166,
            Height: 61
        }
    },
    Branding: {
        Splash: {
            Enabled: !1
        },
        Logo: {
            Enabled: !1,
            Link: "http://google.com",
            LinkEnabled: !0,
            NewWindow: !0,
            Width: 280,
            Height: 34
        }
    },
    MoreGames: {
        Enabled: !1,
        Link: "http://www.marketjs.com/game/links/mobile",
        NewWindow: !1
    },
    Gamecenter: {
        Enabled: !1
    }
};
var MobileAdInGamePreroll = {/*
    ad_duration: _SETTINGS.Ad.Mobile.Preroll.Duration,
    ad_width: _SETTINGS.Ad.Mobile.Preroll.Width,
    ad_height: _SETTINGS.Ad.Mobile.Preroll.Height,
    ready_in: _STRINGS.Ad.Mobile.Preroll.ReadyIn,
    loading: _STRINGS.Ad.Mobile.Preroll.Loading,
    close: _STRINGS.Ad.Mobile.Preroll.Close + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
    Initialize: function() {
        if (_SETTINGS.Ad.Mobile.Preroll.Rotation.Enabled) {
            plataformasSettings = _SETTINGS.Ad.Mobile.Preroll.Rotation.Weight;
            var b = rotationSettings.MobileAdInGamePreroll,
                c = b + rotationSettings.MobileAdInGamePreroll2,
                d = c + rotationSettings.MobileAdInGamePreroll3,
                e = Math.floor(100 * Math.random());
            console.log("seed: ", e);
            e <= b ? this.selectedOverlayName = "MobileAdInGamePreroll" : e <= c ? this.selectedOverlayName = "MobileAdInGamePreroll2" : e <= d && (this.selectedOverlayName = "MobileAdInGamePreroll3");
            console.log("Ad rotating preroll enabled")
        } else this.selectedOverlayName = "MobileAdInGamePreroll", console.log("Ad rotating preroll disabled");
        console.log("selected:", this.selectedOverlayName);
        this.overlay = $("#" + this.selectedOverlayName);
        this.box = $("#" + this.selectedOverlayName + "-Box");
        this.game = $("#game");
        this.boxContents = {
            footer: $("#" + this.selectedOverlayName + "-Box-Footer"),
            header: $("#" + this.selectedOverlayName + "-Box-Header"),
            close: $("#" + this.selectedOverlayName + "-Box-Close"),
            body: $("#" + this.selectedOverlayName + "-Box-Body")
        };
        this.box.width(this.ad_width);
        this.box.height(this.ad_height);
        this.box.css("left", (this.overlay.width() - this.box.width()) / 2);
        this.box.css("top", (this.overlay.height() -
            this.box.height() - this.boxContents.header.height() - this.boxContents.footer.height()) / 2);
        this.overlay.show(this.Timer(this.ad_duration))
    },
    Timer: function(b) {
        var c = b,
            d = setInterval(function() {
                MobileAdInGamePreroll.boxContents.header.text(MobileAdInGamePreroll.ready_in + c + "...");
                MobileAdInGamePreroll.boxContents.footer.text(MobileAdInGamePreroll.loading);
                c--;
                0 > c && (clearInterval(d), MobileAdInGamePreroll.boxContents.close.css("left", MobileAdInGamePreroll.boxContents.body.width() - 23), MobileAdInGamePreroll.boxContents.close.show(),
                    MobileAdInGamePreroll.boxContents.header.html(MobileAdInGamePreroll.close), MobileAdInGamePreroll.boxContents.footer.text(""))
            }, 1E3)
    },
    Close: function() {
        this.boxContents.close.hide();
        this.overlay.hide()
    }*/
};
var MobileAdInGameHeader = {/*
    ad_duration: _SETTINGS.Ad.Mobile.Header.Duration,
    ad_width: _SETTINGS.Ad.Mobile.Header.Width,
    ad_height: _SETTINGS.Ad.Mobile.Header.Height,
    Initialize: function() {
        if (_SETTINGS.Ad.Mobile.Header.Rotation.Enabled) {
            plataformasSettings = _SETTINGS.Ad.Mobile.Header.Rotation.Weight;
            var b = rotationSettings.MobileAdInGameHeader,
                c = b + rotationSettings.MobileAdInGameHeader2,
                d = c + rotationSettings.MobileAdInGameHeader3,
                e = Math.floor(100 * Math.random());
            console.log("seed: ", e);
            e <= b ? this.selectedOverlayName =
                "MobileAdInGameHeader" : e <= c ? this.selectedOverlayName = "MobileAdInGameHeader2" : e <= d && (this.selectedOverlayName = "MobileAdInGameHeader3");
            console.log("Ad rotating header enabled")
        } else this.selectedOverlayName = "MobileAdInGameHeader", console.log("Ad rotating header disabled");
        this.div = $("#" + this.selectedOverlayName);
        this.game = $("#game");
        this.div.width(this.ad_width);
        this.div.height(this.ad_height);
        this.div.css("left", this.game.position().left + (this.game.width() - this.div.width()) / 2);
        this.div.css("top",
            0);
        this.div.show(this.Timer(this.ad_duration))
    },
    Timer: function(b) {
        var c = setInterval(function() {
            b--;
            0 > b && (MobileAdInGameHeader.div.hide(), clearInterval(c))
        }, 1E3)
    }*/
};
var MobileAdInGameFooter = {/*
    ad_duration: _SETTINGS.Ad.Mobile.Footer.Duration,
    ad_width: _SETTINGS.Ad.Mobile.Footer.Width,
    ad_height: _SETTINGS.Ad.Mobile.Footer.Height,
    Initialize: function() {
        if (_SETTINGS.Ad.Mobile.Footer.Rotation.Enabled) {
            plataformasSettings = _SETTINGS.Ad.Mobile.Footer.Rotation.Weight;
            var b = rotationSettings.MobileAdInGameFooter,
                c = b + rotationSettings.MobileAdInGameFooter2,
                d = c + rotationSettings.MobileAdInGameFooter3,
                e = Math.floor(100 * Math.random());
            console.log("seed: ", e);
            e <= b ? this.selectedOverlayName =
                "MobileAdInGameFooter" : e <= c ? this.selectedOverlayName = "MobileAdInGameFooter2" : e <= d && (this.selectedOverlayName = "MobileAdInGameFooter3");
            console.log("Ad rotating footer enabled")
        } else this.selectedOverlayName = "MobileAdInGameFooter", console.log("Ad rotating footer disabled");
        this.div = $("#" + this.selectedOverlayName);
        this.game = $("#game");
        this.div.width(this.ad_width);
        this.div.height(this.ad_height);
        this.div.css("left", this.game.position().left + (this.game.width() - this.div.width()) / 2);
        this.div.css("top",
            this.game.height() - this.div.height() - 5);
        this.div.show(this.Timer(this.ad_duration))
    },
    Timer: function(b) {
        var c = setInterval(function() {
            b--;
            0 > b && (MobileAdInGameFooter.div.hide(), clearInterval(c))
        }, 1E3)
    }*/
};
var MobileAdInGameEnd = {/*
    ad_duration: _SETTINGS.Ad.Mobile.End.Duration,
    ad_width: _SETTINGS.Ad.Mobile.End.Width,
    ad_height: _SETTINGS.Ad.Mobile.End.Height,
    ready_in: _STRINGS.Ad.Mobile.End.ReadyIn,
    loading: _STRINGS.Ad.Mobile.End.Loading,
    close: _STRINGS.Ad.Mobile.End.Close + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
    Initialize: function() {
        if (_SETTINGS.Ad.Mobile.End.Rotation.Enabled) {
            plataformasSettings = _SETTINGS.Ad.Mobile.End.Rotation.Weight;
            var b = rotationSettings.MobileAdInGameEnd,
                c = b + rotationSettings.MobileAdInGameEnd2,
                d = c + rotationSettings.MobileAdInGameEnd3,
                e = Math.floor(100 * Math.random());
            console.log("seed: ", e);
            e <= b ? this.selectedOverlayName = "MobileAdInGameEnd" : e <= c ? this.selectedOverlayName = "MobileAdInGameEnd2" : e <= d && (this.selectedOverlayName = "MobileAdInGameEnd3");
            console.log("Ad rotating end enabled")
        } else this.selectedOverlayName = "MobileAdInGameEnd", console.log("Ad rotating end disabled");
        console.log("selected:", this.selectedOverlayName);
        this.overlay = $("#" + this.selectedOverlayName);
        this.box = $("#" + this.selectedOverlayName +
            "-Box");
        this.game = $("#game");
        this.boxContents = {
            footer: $("#" + this.selectedOverlayName + "-Box-Footer"),
            header: $("#" + this.selectedOverlayName + "-Box-Header"),
            close: $("#" + this.selectedOverlayName + "-Box-Close"),
            body: $("#" + this.selectedOverlayName + "-Box-Body")
        };
        this.box.width(this.ad_width);
        this.box.height(this.ad_height);
        this.box.css("left", (this.overlay.width() - this.box.width()) / 2);
        this.box.css("top", (this.overlay.height() - this.box.height() - this.boxContents.header.height() - this.boxContents.footer.height()) /
            2);
        this.overlay.show(this.Timer(this.ad_duration))
    },
    Timer: function(b) {
        var c = b,
            d = setInterval(function() {
                    MobileAdInGameEnd.boxContents.header.text(MobileAdInGameEnd.ready_in + c + "...");
                    MobileAdInGameEnd.boxContents.footer.text(MobileAdInGameEnd.loading);
                    c--;
                    0 > c && (clearInterval(d), MobileAdInGameEnd.boxContents.close.css("left", MobileAdInGameEnd.boxContents.body.width() - 23), MobileAdInGameEnd.boxContents.close.show(), MobileAdInGameEnd.boxContents.header.html(MobileAdInGameEnd.close), MobileAdInGameEnd.boxContents.footer.text(""))
                },
                1E3)
    },
    Close: function() {
        this.boxContents.close.hide();
        this.overlay.hide()
    }*/
};
(function(b, c) {
    function d(b, X, g) {
        if (g === c && 1 === b.nodeType)
            if (g = "data-" + X.replace(tb, "-$1").toLowerCase(), g = b.getAttribute(g), "string" == typeof g) {
                try {
                    g = "true" === g ? !0 : "false" === g ? !1 : "null" === g ? null : +g + "" === g ? +g : ub.test(g) ? l.parseJSON(g) : g
                } catch (d) {}
                l.data(b, X, g)
            } else g = c;
        return g
    }

    function e(b) {
        for (var c in b)
            if (!("data" === c && l.isEmptyObject(b[c])) && "toJSON" !== c) return !1;
        return !0
    }

    function f() {
        return !1
    }

    function j() {
        return !0
    }

    function p(b) {
        return !b || !b.parentNode || 11 === b.parentNode.nodeType
    }

    function m(b,
        c) {
        do b = b[c]; while (b && 1 !== b.nodeType);
        return b
    }

    function s(b, c, g) {
        c = c || 0;
        if (l.isFunction(c)) return l.grep(b, function(b, V) {
            return !!c.call(b, V, b) === g
        });
        if (c.nodeType) return l.grep(b, function(b) {
            return b === c === g
        });
        if ("string" == typeof c) {
            var d = l.grep(b, function(b) {
                return 1 === b.nodeType
            });
            if (Mc.test(c)) return l.filter(c, d, !g);
            c = l.filter(c, d)
        }
        return l.grep(b, function(b) {
            return 0 <= l.inArray(b, c) === g
        })
    }

    function v(b) {
        var c = ic.split("|");
        b = b.createDocumentFragment();
        if (b.createElement)
            for (; c.length;) b.createElement(c.pop());
        return b
    }

    function A(b, c) {
        if (1 === c.nodeType && l.hasData(b)) {
            var g, d, q;
            d = l._data(b);
            var e = l._data(c, d),
                n = d.events;
            if (n)
                for (g in delete e.handle, e.events = {}, n) {
                    d = 0;
                    for (q = n[g].length; d < q; d++) l.event.add(c, g, n[g][d])
                }
            e.data && (e.data = l.extend({}, e.data))
        }
    }

    function B(b, c) {
        var g;
        1 === c.nodeType && (c.clearAttributes && c.clearAttributes(), c.mergeAttributes && c.mergeAttributes(b), g = c.nodeName.toLowerCase(), "object" === g ? (c.parentNode && (c.outerHTML = b.outerHTML), l.support.html5Clone && b.innerHTML && !l.trim(c.innerHTML) &&
            (c.innerHTML = b.innerHTML)) : "input" === g && jc.test(b.type) ? (c.defaultChecked = c.checked = b.checked, c.value !== b.value && (c.value = b.value)) : "option" === g ? c.selected = b.defaultSelected : "input" === g || "textarea" === g ? c.defaultValue = b.defaultValue : "script" === g && c.text !== b.text && (c.text = b.text), c.removeAttribute(l.expando))
    }

    function z(b) {
        return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName("*") : "undefined" != typeof b.querySelectorAll ? b.querySelectorAll("*") : []
    }

    function x(b) {
        jc.test(b.type) && (b.defaultChecked =
            b.checked)
    }

    function I(b, c) {
        if (c in b) return c;
        for (var l = c.charAt(0).toUpperCase() + c.slice(1), g = c, d = kc.length; d--;)
            if (c = kc[d] + l, c in b) return c;
        return g
    }

    function E(b, c) {
        return b = c || b, "none" === l.css(b, "display") || !l.contains(b.ownerDocument, b)
    }

    function t(b, c) {
        for (var g, d, q = [], e = 0, n = b.length; e < n; e++) g = b[e], g.style && (q[e] = l._data(g, "olddisplay"), c ? (!q[e] && "none" === g.style.display && (g.style.display = ""), "" === g.style.display && E(g) && (q[e] = l._data(g, "olddisplay", M(g.nodeName)))) : (d = ha(g, "display"), !q[e] &&
            "none" !== d && l._data(g, "olddisplay", d)));
        for (e = 0; e < n; e++)
            if (g = b[e], g.style && (!c || "none" === g.style.display || "" === g.style.display)) g.style.display = c ? q[e] || "" : "none";
        return b
    }

    function H(b, c, l) {
        return (b = Nc.exec(c)) ? Math.max(0, b[1] - (l || 0)) + (b[2] || "px") : c
    }

    function L(b, c, g, d) {
        c = g === (d ? "border" : "content") ? 4 : "width" === c ? 1 : 0;
        for (var q = 0; 4 > c; c += 2) "margin" === g && (q += l.css(b, g + Aa[c], !0)), d ? ("content" === g && (q -= parseFloat(ha(b, "padding" + Aa[c])) || 0), "margin" !== g && (q -= parseFloat(ha(b, "border" + Aa[c] + "Width")) || 0)) : (q +=
            parseFloat(ha(b, "padding" + Aa[c])) || 0, "padding" !== g && (q += parseFloat(ha(b, "border" + Aa[c] + "Width")) || 0));
        return q
    }

    function Q(b, c, g) {
        var d = "width" === c ? b.offsetWidth : b.offsetHeight,
            q = !0,
            e = l.support.boxSizing && "border-box" === l.css(b, "boxSizing");
        if (0 >= d || null == d) {
            d = ha(b, c);
            if (0 > d || null == d) d = b.style[c];
            if (vb.test(d)) return d;
            q = e && (l.support.boxSizingReliable || d === b.style[c]);
            d = parseFloat(d) || 0
        }
        return d + L(b, c, g || (e ? "border" : "content"), q) + "px"
    }

    function M(b) {
        if (Ob[b]) return Ob[b];
        var c = l("<" + b + ">").appendTo(J.body),
            g = c.css("display");
        c.remove();
        if ("none" === g || "" === g) {
            Ia = J.body.appendChild(Ia || l.extend(J.createElement("iframe"), {
                frameBorder: 0,
                width: 0,
                height: 0
            }));
            if (!Ja || !Ia.createElement) Ja = (Ia.contentWindow || Ia.contentDocument).document, Ja.write("<!doctype html><html><body>"), Ja.close();
            c = Ja.body.appendChild(Ja.createElement(b));
            g = ha(c, "display");
            J.body.removeChild(Ia)
        }
        return Ob[b] = g, g
    }

    function P(b, c, g, d) {
        var q;
        if (l.isArray(c)) l.each(c, function(c, X) {
            g || Oc.test(b) ? d(b, X) : P(b + "[" + ("object" == typeof X ? c : "") + "]",
                X, g, d)
        });
        else if (!g && "object" === l.type(c))
            for (q in c) P(b + "[" + q + "]", c[q], g, d);
        else d(b, c)
    }

    function C(b) {
        return function(c, g) {
            "string" != typeof c && (g = c, c = "*");
            var d, q, e = c.toLowerCase().split(pa),
                n = 0,
                r = e.length;
            if (l.isFunction(g))
                for (; n < r; n++) d = e[n], (q = /^\+/.test(d)) && (d = d.substr(1) || "*"), d = b[d] = b[d] || [], d[q ? "unshift" : "push"](g)
        }
    }

    function S(b, X, l, g, d, q) {
        d = d || X.dataTypes[0];
        q = q || {};
        q[d] = !0;
        var e;
        d = b[d];
        for (var n = 0, r = d ? d.length : 0, f = b === Pb; n < r && (f || !e); n++) e = d[n](X, l, g), "string" == typeof e && (!f || q[e] ? e = c :
            (X.dataTypes.unshift(e), e = S(b, X, l, g, e, q)));
        return (f || !e) && !q["*"] && (e = S(b, X, l, g, "*", q)), e
    }

    function N(b, X) {
        var g, d, q = l.ajaxSettings.flatOptions || {};
        for (g in X) X[g] !== c && ((q[g] ? b : d || (d = {}))[g] = X[g]);
        d && l.extend(!0, b, d)
    }

    function O() {
        try {
            return new b.XMLHttpRequest
        } catch (V) {}
    }

    function Z() {
        return setTimeout(function() {
            wb = c
        }, 0), wb = l.now()
    }

    function T(b, c, g) {
        var d, q = 0,
            e = xb.length,
            n = l.Deferred().always(function() {
                delete r.elem
            }),
            r = function() {
                for (var c = wb || Z(), c = Math.max(0, f.startTime + f.duration - c), X = 1 - (c /
                    f.duration || 0), g = 0, l = f.tweens.length; g < l; g++) f.tweens[g].run(X);
                return n.notifyWith(b, [f, X, c]), 1 > X && l ? c : (n.resolveWith(b, [f]), !1)
            },
            f = n.promise({
                elem: b,
                props: l.extend({}, c),
                opts: l.extend(!0, {
                    specialEasing: {}
                }, g),
                originalProperties: c,
                originalOptions: g,
                startTime: wb || Z(),
                duration: g.duration,
                tweens: [],
                createTween: function(c, X) {
                    var g = l.Tween(b, f.opts, c, X, f.opts.specialEasing[c] || f.opts.easing);
                    return f.tweens.push(g), g
                },
                stop: function(c) {
                    for (var X = 0, g = c ? f.tweens.length : 0; X < g; X++) f.tweens[X].run(1);
                    return c ?
                        n.resolveWith(b, [f, c]) : n.rejectWith(b, [f, c]), this
                }
            });
        c = f.props;
        g = f.opts.specialEasing;
        var m, D, j, y;
        for (d in c)
            if (m = l.camelCase(d), D = g[m], j = c[d], l.isArray(j) && (D = j[1], j = c[d] = j[0]), d !== m && (c[m] = j, delete c[d]), (y = l.cssHooks[m]) && "expand" in y)
                for (d in j = y.expand(j), delete c[m], j) d in c || (c[d] = j[d], g[d] = D);
            else g[m] = D;
        for (; q < e; q++)
            if (d = xb[q].call(f, b, c, f.opts)) return d;
        var u = f;
        l.each(c, function(b, V) {
            for (var c = ($a[b] || []).concat($a["*"]), X = 0, g = c.length; X < g && !c[X].call(u, b, V); X++);
        });
        return l.isFunction(f.opts.start) &&
            f.opts.start.call(b, f), l.fx.timer(l.extend(r, {
                anim: f,
                queue: f.opts.queue,
                elem: b
            })), f.progress(f.opts.progress).done(f.opts.done, f.opts.complete).fail(f.opts.fail).always(f.opts.always)
    }

    function n(b, c, g, l, d) {
        return new n.prototype.init(b, c, g, l, d)
    }

    function y(b, c) {
        var g, l = {
                height: b
            },
            d = 0;
        for (c = c ? 1 : 0; 4 > d; d += 2 - c) g = Aa[d], l["margin" + g] = l["padding" + g] = b;
        return c && (l.opacity = l.width = b), l
    }

    function F(b) {
        return l.isWindow(b) ? b : 9 === b.nodeType ? b.defaultView || b.parentWindow : !1
    }
    var u, G, J = b.document,
        W = b.location,
        g =
        b.navigator,
        r = b.jQuery,
        K = b.$,
        q = Array.prototype.push,
        D = Array.prototype.slice,
        R = Array.prototype.indexOf,
        U = Object.prototype.toString,
        ga = Object.prototype.hasOwnProperty,
        ja = String.prototype.trim,
        l = function(b, c) {
            return new l.fn.init(b, c, u)
        },
        ba = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,
        Ka = /\S/,
        pa = /\s+/,
        yb = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        ab = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
        La = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
        zb = /^[\],:{}\s]*$/,
        Ab = /(?:^|:|,)(?:\s*\[)+/g,
        bb = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
        cb = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,
        db = /^-ms-/,
        Bb = /-([\da-z])/gi,
        eb = function(b, c) {
            return (c + "").toUpperCase()
        },
        Ba = function() {
            J.addEventListener ? (J.removeEventListener("DOMContentLoaded", Ba, !1), l.ready()) : "complete" === J.readyState && (J.detachEvent("onreadystatechange", Ba), l.ready())
        },
        Ma = {};
    l.fn = l.prototype = {
        constructor: l,
        init: function(b, g, d) {
            var q, e;
            if (!b) return this;
            if (b.nodeType) return this.context = this[0] = b, this.length = 1, this;
            if ("string" == typeof b) {
                "<" === b.charAt(0) &&
                    ">" === b.charAt(b.length - 1) && 3 <= b.length ? q = [null, b, null] : q = ab.exec(b);
                if (q && (q[1] || !g)) {
                    if (q[1]) return g = g instanceof l ? g[0] : g, e = g && g.nodeType ? g.ownerDocument || g : J, b = l.parseHTML(q[1], e, !0), La.test(q[1]) && l.isPlainObject(g) && this.attr.call(b, g, !0), l.merge(this, b);
                    if ((g = J.getElementById(q[2])) && g.parentNode) {
                        if (g.id !== q[2]) return d.find(b);
                        this.length = 1;
                        this[0] = g
                    }
                    return this.context = J, this.selector = b, this
                }
                return !g || g.jquery ? (g || d).find(b) : this.constructor(g).find(b)
            }
            return l.isFunction(b) ? d.ready(b) :
                (b.selector !== c && (this.selector = b.selector, this.context = b.context), l.makeArray(b, this))
        },
        selector: "",
        jquery: "1.8.2",
        length: 0,
        size: function() {
            return this.length
        },
        toArray: function() {
            return D.call(this)
        },
        get: function(b) {
            return null == b ? this.toArray() : 0 > b ? this[this.length + b] : this[b]
        },
        pushStack: function(b, c, g) {
            b = l.merge(this.constructor(), b);
            return b.prevObject = this, b.context = this.context, "find" === c ? b.selector = this.selector + (this.selector ? " " : "") + g : c && (b.selector = this.selector + "." + c + "(" + g + ")"), b
        },
        each: function(b,
            c) {
            return l.each(this, b, c)
        },
        ready: function(b) {
            return l.ready.promise().done(b), this
        },
        eq: function(b) {
            return b = +b, -1 === b ? this.slice(b) : this.slice(b, b + 1)
        },
        first: function() {
            return this.eq(0)
        },
        last: function() {
            return this.eq(-1)
        },
        slice: function() {
            return this.pushStack(D.apply(this, arguments), "slice", D.call(arguments).join(","))
        },
        map: function(b) {
            return this.pushStack(l.map(this, function(c, g) {
                return b.call(c, g, c)
            }))
        },
        end: function() {
            return this.prevObject || this.constructor(null)
        },
        push: q,
        sort: [].sort,
        splice: [].splice
    };
    l.fn.init.prototype = l.fn;
    l.extend = l.fn.extend = function() {
        var b, g, d, q, e, f, n = arguments[0] || {},
            r = 1,
            m = arguments.length,
            D = !1;
        "boolean" == typeof n && (D = n, n = arguments[1] || {}, r = 2);
        "object" != typeof n && !l.isFunction(n) && (n = {});
        for (m === r && (n = this, --r); r < m; r++)
            if (null != (b = arguments[r]))
                for (g in b) d = n[g], q = b[g], n !== q && (D && q && (l.isPlainObject(q) || (e = l.isArray(q))) ? (e ? (e = !1, f = d && l.isArray(d) ? d : []) : f = d && l.isPlainObject(d) ? d : {}, n[g] = l.extend(D, f, q)) : q !== c && (n[g] = q));
        return n
    };
    l.extend({
        noConflict: function(c) {
            return b.$ ===
                l && (b.$ = K), c && b.jQuery === l && (b.jQuery = r), l
        },
        isReady: !1,
        readyWait: 1,
        holdReady: function(b) {
            b ? l.readyWait++ : l.ready(!0)
        },
        ready: function(b) {
            if (!(!0 === b ? --l.readyWait : l.isReady)) {
                if (!J.body) return setTimeout(l.ready, 1);
                l.isReady = !0;
                !0 !== b && 0 < --l.readyWait || (G.resolveWith(J, [l]), l.fn.trigger && l(J).trigger("ready").off("ready"))
            }
        },
        isFunction: function(b) {
            return "function" === l.type(b)
        },
        isArray: Array.isArray || function(b) {
            return "array" === l.type(b)
        },
        isWindow: function(b) {
            return null != b && b == b.window
        },
        isNumeric: function(b) {
            return !isNaN(parseFloat(b)) &&
                isFinite(b)
        },
        type: function(b) {
            return null == b ? String(b) : Ma[U.call(b)] || "object"
        },
        isPlainObject: function(b) {
            if (!b || "object" !== l.type(b) || b.nodeType || l.isWindow(b)) return !1;
            try {
                if (b.constructor && !ga.call(b, "constructor") && !ga.call(b.constructor.prototype, "isPrototypeOf")) return !1
            } catch (g) {
                return !1
            }
            for (var d in b);
            return d === c || ga.call(b, d)
        },
        isEmptyObject: function(b) {
            for (var c in b) return !1;
            return !0
        },
        error: function(b) {
            throw Error(b);
        },
        parseHTML: function(b, c, g) {
            var d;
            return !b || "string" != typeof b ? null :
                ("boolean" == typeof c && (g = c, c = 0), c = c || J, (d = La.exec(b)) ? [c.createElement(d[1])] : (d = l.buildFragment([b], c, g ? null : []), l.merge([], (d.cacheable ? l.clone(d.fragment) : d.fragment).childNodes)))
        },
        parseJSON: function(c) {
            if (!c || "string" != typeof c) return null;
            c = l.trim(c);
            if (b.JSON && b.JSON.parse) return b.JSON.parse(c);
            if (zb.test(c.replace(bb, "@").replace(cb, "]").replace(Ab, ""))) return (new Function("return " + c))();
            l.error("Invalid JSON: " + c)
        },
        parseXML: function(V) {
            var g, d;
            if (!V || "string" != typeof V) return null;
            try {
                b.DOMParser ?
                    (d = new DOMParser, g = d.parseFromString(V, "text/xml")) : (g = new ActiveXObject("Microsoft.XMLDOM"), g.async = "false", g.loadXML(V))
            } catch (q) {
                g = c
            }
            return (!g || !g.documentElement || g.getElementsByTagName("parsererror").length) && l.error("Invalid XML: " + V), g
        },
        noop: function() {},
        globalEval: function(c) {
            c && Ka.test(c) && (b.execScript || function(c) {
                b.eval.call(b, c)
            })(c)
        },
        camelCase: function(b) {
            return b.replace(db, "ms-").replace(Bb, eb)
        },
        nodeName: function(b, c) {
            return b.nodeName && b.nodeName.toLowerCase() === c.toLowerCase()
        },
        each: function(b, g, d) {
            var q, e = 0,
                n = b.length,
                f = n === c || l.isFunction(b);
            if (d)
                if (f)
                    for (q in b) {
                        if (!1 === g.apply(b[q], d)) break
                    } else
                        for (; e < n && !1 !== g.apply(b[e++], d););
                else if (f)
                for (q in b) {
                    if (!1 === g.call(b[q], q, b[q])) break
                } else
                    for (; e < n && !1 !== g.call(b[e], e, b[e++]););
            return b
        },
        trim: ja && !ja.call("\ufeff\u00a0") ? function(b) {
            return null == b ? "" : ja.call(b)
        } : function(b) {
            return null == b ? "" : (b + "").replace(yb, "")
        },
        makeArray: function(b, c) {
            var g, d = c || [];
            return null != b && (g = l.type(b), null == b.length || "string" === g || "function" ===
                g || "regexp" === g || l.isWindow(b) ? q.call(d, b) : l.merge(d, b)), d
        },
        inArray: function(b, c, g) {
            var d;
            if (c) {
                if (R) return R.call(c, b, g);
                d = c.length;
                for (g = g ? 0 > g ? Math.max(0, d + g) : g : 0; g < d; g++)
                    if (g in c && c[g] === b) return g
            }
            return -1
        },
        merge: function(b, g) {
            var d = g.length,
                l = b.length,
                q = 0;
            if ("number" == typeof d)
                for (; q < d; q++) b[l++] = g[q];
            else
                for (; g[q] !== c;) b[l++] = g[q++];
            return b.length = l, b
        },
        grep: function(b, c, g) {
            var d, l = [],
                q = 0,
                e = b.length;
            for (g = !!g; q < e; q++) d = !!c(b[q], q), g !== d && l.push(b[q]);
            return l
        },
        map: function(b, g, d) {
            var q, e,
                n = [],
                f = 0,
                r = b.length;
            if (b instanceof l || r !== c && "number" == typeof r && (0 < r && b[0] && b[r - 1] || 0 === r || l.isArray(b)))
                for (; f < r; f++) q = g(b[f], f, d), null != q && (n[n.length] = q);
            else
                for (e in b) q = g(b[e], e, d), null != q && (n[n.length] = q);
            return n.concat.apply([], n)
        },
        guid: 1,
        proxy: function(b, g) {
            var d, q, e;
            return "string" == typeof g && (d = b[g], g = b, b = d), l.isFunction(b) ? (q = D.call(arguments, 2), e = function() {
                return b.apply(g, q.concat(D.call(arguments)))
            }, e.guid = b.guid = b.guid || l.guid++, e) : c
        },
        access: function(b, g, d, q, e, n, f) {
            var r, m = null ==
                d,
                D = 0,
                j = b.length;
            if (d && "object" == typeof d) {
                for (D in d) l.access(b, g, D, d[D], 1, n, q);
                e = 1
            } else if (q !== c) {
                r = f === c && l.isFunction(q);
                m && (r ? (r = g, g = function(b, c, V) {
                    return r.call(l(b), V)
                }) : (g.call(b, q), g = null));
                if (g)
                    for (; D < j; D++) g(b[D], d, r ? q.call(b[D], D, g(b[D], d)) : q, f);
                e = 1
            }
            return e ? b : m ? g.call(b) : j ? g(b[0], d) : n
        },
        now: function() {
            return (new Date).getTime()
        }
    });
    l.ready.promise = function(c) {
        if (!G)
            if (G = l.Deferred(), "complete" === J.readyState) setTimeout(l.ready, 1);
            else if (J.addEventListener) J.addEventListener("DOMContentLoaded",
            Ba, !1), b.addEventListener("load", l.ready, !1);
        else {
            J.attachEvent("onreadystatechange", Ba);
            b.attachEvent("onload", l.ready);
            var g = !1;
            try {
                g = null == b.frameElement && J.documentElement
            } catch (d) {}
            g && g.doScroll && function Lc() {
                if (!l.isReady) {
                    try {
                        g.doScroll("left")
                    } catch (b) {
                        return setTimeout(Lc, 50)
                    }
                    l.ready()
                }
            }()
        }
        return G.promise(c)
    };
    l.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(b, c) {
        Ma["[object " + c + "]"] = c.toLowerCase()
    });
    u = l(J);
    var Na = {};
    l.Callbacks = function(b) {
        var g;
        if ("string" ==
            typeof b) {
            if (!(g = Na[b])) {
                g = b;
                var d = Na[g] = {};
                g = (l.each(g.split(pa), function(b, c) {
                    d[c] = !0
                }), d)
            }
        } else g = l.extend({}, b);
        b = g;
        var q, e, n, f, r, m, D = [],
            j = !b.once && [],
            y = function(c) {
                q = b.memory && c;
                e = !0;
                m = f || 0;
                f = 0;
                r = D.length;
                for (n = !0; D && m < r; m++)
                    if (!1 === D[m].apply(c[0], c[1]) && b.stopOnFalse) {
                        q = !1;
                        break
                    }
                n = !1;
                D && (j ? j.length && y(j.shift()) : q ? D = [] : u.disable())
            },
            u = {
                add: function() {
                    if (D) {
                        var c = D.length;
                        (function Pc(c) {
                            l.each(c, function(c, g) {
                                var d = l.type(g);
                                "function" === d && (!b.unique || !u.has(g)) ? D.push(g) : g && g.length && "string" !==
                                    d && Pc(g)
                            })
                        })(arguments);
                        n ? r = D.length : q && (f = c, y(q))
                    }
                    return this
                },
                remove: function() {
                    return D && l.each(arguments, function(b, c) {
                        for (var V; - 1 < (V = l.inArray(c, D, V));) D.splice(V, 1), n && (V <= r && r--, V <= m && m--)
                    }), this
                },
                has: function(b) {
                    return -1 < l.inArray(b, D)
                },
                empty: function() {
                    return D = [], this
                },
                disable: function() {
                    return D = j = q = c, this
                },
                disabled: function() {
                    return !D
                },
                lock: function() {
                    return j = c, q || u.disable(), this
                },
                locked: function() {
                    return !j
                },
                fireWith: function(b, c) {
                    return c = c || [], c = [b, c.slice ? c.slice() : c], D && (!e || j) &&
                        (n ? j.push(c) : y(c)), this
                },
                fire: function() {
                    return u.fireWith(this, arguments), this
                },
                fired: function() {
                    return !!e
                }
            };
        return u
    };
    l.extend({
        Deferred: function(b) {
            var c = [
                    ["resolve", "done", l.Callbacks("once memory"), "resolved"],
                    ["reject", "fail", l.Callbacks("once memory"), "rejected"],
                    ["notify", "progress", l.Callbacks("memory")]
                ],
                g = "pending",
                d = {
                    state: function() {
                        return g
                    },
                    always: function() {
                        return q.done(arguments).fail(arguments), this
                    },
                    then: function() {
                        var b = arguments;
                        return l.Deferred(function(V) {
                            l.each(c, function(c,
                                g) {
                                var d = g[0],
                                    X = b[c];
                                q[g[1]](l.isFunction(X) ? function() {
                                    var b = X.apply(this, arguments);
                                    b && l.isFunction(b.promise) ? b.promise().done(V.resolve).fail(V.reject).progress(V.notify) : V[d + "With"](this === q ? V : this, [b])
                                } : V[d])
                            });
                            b = null
                        }).promise()
                    },
                    promise: function(b) {
                        return null != b ? l.extend(b, d) : d
                    }
                },
                q = {};
            return d.pipe = d.then, l.each(c, function(b, V) {
                var l = V[2],
                    e = V[3];
                d[V[1]] = l.add;
                e && l.add(function() {
                    g = e
                }, c[b ^ 1][2].disable, c[2][2].lock);
                q[V[0]] = l.fire;
                q[V[0] + "With"] = l.fireWith
            }), d.promise(q), b && b.call(q, q), q
        },
        when: function(b) {
            var c = 0,
                g = D.call(arguments),
                d = g.length,
                q = 1 !== d || b && l.isFunction(b.promise) ? d : 0,
                e = 1 === q ? b : l.Deferred(),
                n = function(b, c, V) {
                    return function(g) {
                        c[b] = this;
                        V[b] = 1 < arguments.length ? D.call(arguments) : g;
                        V === f ? e.notifyWith(c, V) : --q || e.resolveWith(c, V)
                    }
                },
                f, r, m;
            if (1 < d) {
                f = Array(d);
                r = Array(d);
                for (m = Array(d); c < d; c++) g[c] && l.isFunction(g[c].promise) ? g[c].promise().done(n(c, m, g)).fail(e.reject).progress(n(c, r, f)) : --q
            }
            return q || e.resolveWith(m, g), e.promise()
        }
    });
    var Cb = l,
        Oa, da, Ca, qa, va, Da, fa, ra, Ea, Pa,
        ta, fb, aa = J.createElement("div");
    aa.setAttribute("className", "t");
    aa.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
    Ca = aa.getElementsByTagName("*");
    qa = aa.getElementsByTagName("a")[0];
    qa.style.cssText = "top:1px;float:left;opacity:.5";
    if (!Ca || !Ca.length) Oa = {};
    else {
        va = J.createElement("select");
        Da = va.appendChild(J.createElement("option"));
        fa = aa.getElementsByTagName("input")[0];
        da = {
            leadingWhitespace: 3 === aa.firstChild.nodeType,
            tbody: !aa.getElementsByTagName("tbody").length,
            htmlSerialize: !!aa.getElementsByTagName("link").length,
            style: /top/.test(qa.getAttribute("style")),
            hrefNormalized: "/a" === qa.getAttribute("href"),
            opacity: /^0.5/.test(qa.style.opacity),
            cssFloat: !!qa.style.cssFloat,
            checkOn: "on" === fa.value,
            optSelected: Da.selected,
            getSetAttribute: "t" !== aa.className,
            enctype: !!J.createElement("form").enctype,
            html5Clone: "<:nav></:nav>" !== J.createElement("nav").cloneNode(!0).outerHTML,
            boxModel: "CSS1Compat" === J.compatMode,
            submitBubbles: !0,
            changeBubbles: !0,
            focusinBubbles: !1,
            deleteExpando: !0,
            noCloneEvent: !0,
            inlineBlockNeedsLayout: !1,
            shrinkWrapBlocks: !1,
            reliableMarginRight: !0,
            boxSizingReliable: !0,
            pixelPosition: !1
        };
        fa.checked = !0;
        da.noCloneChecked = fa.cloneNode(!0).checked;
        va.disabled = !0;
        da.optDisabled = !Da.disabled;
        try {
            delete aa.test
        } catch (Qb) {
            da.deleteExpando = !1
        }!aa.addEventListener && aa.attachEvent && aa.fireEvent && (aa.attachEvent("onclick", fb = function() {
            da.noCloneEvent = !1
        }), aa.cloneNode(!0).fireEvent("onclick"), aa.detachEvent("onclick", fb));
        fa = J.createElement("input");
        fa.value =
            "t";
        fa.setAttribute("type", "radio");
        da.radioValue = "t" === fa.value;
        fa.setAttribute("checked", "checked");
        fa.setAttribute("name", "t");
        aa.appendChild(fa);
        ra = J.createDocumentFragment();
        ra.appendChild(aa.lastChild);
        da.checkClone = ra.cloneNode(!0).cloneNode(!0).lastChild.checked;
        da.appendChecked = fa.checked;
        ra.removeChild(fa);
        ra.appendChild(aa);
        if (aa.attachEvent)
            for (Pa in {
                submit: !0,
                change: !0,
                focusin: !0
            }) Ea = "on" + Pa, (ta = Ea in aa) || (aa.setAttribute(Ea, "return;"), ta = "function" == typeof aa[Ea]), da[Pa + "Bubbles"] =
                ta;
        Oa = (l(function() {
            var c, g, d, l, q = J.getElementsByTagName("body")[0];
            q && (c = J.createElement("div"), c.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px", q.insertBefore(c, q.firstChild), g = J.createElement("div"), c.appendChild(g), g.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", d = g.getElementsByTagName("td"), d[0].style.cssText = "padding:0;margin:0;border:0;display:none", ta = 0 === d[0].offsetHeight, d[0].style.display = "", d[1].style.display = "none", da.reliableHiddenOffsets =
                ta && 0 === d[0].offsetHeight, g.innerHTML = "", g.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;", da.boxSizing = 4 === g.offsetWidth, da.doesNotIncludeMarginInBodyOffset = 1 !== q.offsetTop, b.getComputedStyle && (da.pixelPosition = "1%" !== (b.getComputedStyle(g, null) || {}).top, da.boxSizingReliable = "4px" === (b.getComputedStyle(g, null) || {
                        width: "4px"
                    }).width, l = J.createElement("div"), l.style.cssText =
                    g.style.cssText = "padding:0;margin:0;border:0;display:block;overflow:hidden;", l.style.marginRight = l.style.width = "0", g.style.width = "1px", g.appendChild(l), da.reliableMarginRight = !parseFloat((b.getComputedStyle(l, null) || {}).marginRight)), "undefined" != typeof g.style.zoom && (g.innerHTML = "", g.style.cssText = "padding:0;margin:0;border:0;display:block;overflow:hidden;width:1px;padding:1px;display:inline;zoom:1", da.inlineBlockNeedsLayout = 3 === g.offsetWidth, g.style.display = "block", g.style.overflow = "visible", g.innerHTML =
                    "<div></div>", g.firstChild.style.width = "5px", da.shrinkWrapBlocks = 3 !== g.offsetWidth, c.style.zoom = 1), q.removeChild(c))
        }), ra.removeChild(aa), Ca = qa = va = Da = fa = ra = aa = null, da)
    }
    Cb.support = Oa;
    var ub = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
        tb = /([A-Z])/g;
    l.extend({
        cache: {},
        deletedIds: [],
        uuid: 0,
        expando: "jQuery" + (l.fn.jquery + Math.random()).replace(/\D/g, ""),
        noData: {
            embed: !0,
            object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            applet: !0
        },
        hasData: function(b) {
            return b = b.nodeType ? l.cache[b[l.expando]] : b[l.expando], !!b && !e(b)
        },
        data: function(b, g, d, q) {
            if (l.acceptData(b)) {
                var e, n, f = l.expando,
                    r = "string" == typeof g,
                    m = b.nodeType,
                    D = m ? l.cache : b,
                    j = m ? b[f] : b[f] && f;
                if (j && D[j] && (q || D[j].data) || !(r && d === c)) {
                    j || (m ? b[f] = j = l.deletedIds.pop() || l.guid++ : j = f);
                    D[j] || (D[j] = {}, m || (D[j].toJSON = l.noop));
                    if ("object" == typeof g || "function" == typeof g) q ? D[j] = l.extend(D[j], g) : D[j].data = l.extend(D[j].data, g);
                    return e = D[j], q || (e.data || (e.data = {}), e = e.data), d !== c && (e[l.camelCase(g)] = d), r ? (n = e[g], null == n && (n = e[l.camelCase(g)])) : n = e, n
                }
            }
        },
        removeData: function(b,
            c, g) {
            if (l.acceptData(b)) {
                var d, q, n, f = b.nodeType,
                    r = f ? l.cache : b,
                    m = f ? b[l.expando] : l.expando;
                if (r[m]) {
                    if (c && (d = g ? r[m] : r[m].data)) {
                        l.isArray(c) || (c in d ? c = [c] : (c = l.camelCase(c), c in d ? c = [c] : c = c.split(" ")));
                        q = 0;
                        for (n = c.length; q < n; q++) delete d[c[q]];
                        if (!(g ? e : l.isEmptyObject)(d)) return
                    }
                    if (g || !(delete r[m].data, !e(r[m]))) f ? l.cleanData([b], !0) : l.support.deleteExpando || r != r.window ? delete r[m] : r[m] = null
                }
            }
        },
        _data: function(b, c, g) {
            return l.data(b, c, g, !0)
        },
        acceptData: function(b) {
            var c = b.nodeName && l.noData[b.nodeName.toLowerCase()];
            return !c || !0 !== c && b.getAttribute("classid") === c
        }
    });
    l.fn.extend({
        data: function(b, g) {
            var q, e, n, f, r, m = this[0],
                D = 0,
                j = null;
            if (b === c) {
                if (this.length && (j = l.data(m), 1 === m.nodeType && !l._data(m, "parsedAttrs"))) {
                    n = m.attributes;
                    for (r = n.length; D < r; D++) f = n[D].name, f.indexOf("data-") || (f = l.camelCase(f.substring(5)), d(m, f, j[f]));
                    l._data(m, "parsedAttrs", !0)
                }
                return j
            }
            return "object" == typeof b ? this.each(function() {
                l.data(this, b)
            }) : (q = b.split(".", 2), q[1] = q[1] ? "." + q[1] : "", e = q[1] + "!", l.access(this, function(g) {
                if (g === c) return j =
                    this.triggerHandler("getData" + e, [q[0]]), j === c && m && (j = l.data(m, b), j = d(m, b, j)), j === c && q[1] ? this.data(q[0]) : j;
                q[1] = g;
                this.each(function() {
                    var c = l(this);
                    c.triggerHandler("setData" + e, q);
                    l.data(this, b, g);
                    c.triggerHandler("changeData" + e, q)
                })
            }, null, g, 1 < arguments.length, null, !1))
        },
        removeData: function(b) {
            return this.each(function() {
                l.removeData(this, b)
            })
        }
    });
    l.extend({
        queue: function(b, c, g) {
            var d;
            if (b) return c = (c || "fx") + "queue", d = l._data(b, c), g && (!d || l.isArray(g) ? d = l._data(b, c, l.makeArray(g)) : d.push(g)), d || []
        },
        dequeue: function(b, c) {
            c = c || "fx";
            var g = l.queue(b, c),
                d = g.length,
                q = g.shift(),
                e = l._queueHooks(b, c),
                n = function() {
                    l.dequeue(b, c)
                };
            "inprogress" === q && (q = g.shift(), d--);
            q && ("fx" === c && g.unshift("inprogress"), delete e.stop, q.call(b, n, e));
            !d && e && e.empty.fire()
        },
        _queueHooks: function(b, c) {
            var g = c + "queueHooks";
            return l._data(b, g) || l._data(b, g, {
                empty: l.Callbacks("once memory").add(function() {
                    l.removeData(b, c + "queue", !0);
                    l.removeData(b, g, !0)
                })
            })
        }
    });
    l.fn.extend({
        queue: function(b, g) {
            var d = 2;
            return "string" != typeof b &&
                (g = b, b = "fx", d--), arguments.length < d ? l.queue(this[0], b) : g === c ? this : this.each(function() {
                    var c = l.queue(this, b, g);
                    l._queueHooks(this, b);
                    "fx" === b && "inprogress" !== c[0] && l.dequeue(this, b)
                })
        },
        dequeue: function(b) {
            return this.each(function() {
                l.dequeue(this, b)
            })
        },
        delay: function(b, c) {
            return b = l.fx ? l.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function(c, g) {
                var d = setTimeout(c, b);
                g.stop = function() {
                    clearTimeout(d)
                }
            })
        },
        clearQueue: function(b) {
            return this.queue(b || "fx", [])
        },
        promise: function(b, g) {
            var d, q = 1,
                e = l.Deferred(),
                n = this,
                f = this.length,
                r = function() {
                    --q || e.resolveWith(n, [n])
                };
            "string" != typeof b && (g = b, b = c);
            for (b = b || "fx"; f--;)(d = l._data(n[f], b + "queueHooks")) && d.empty && (q++, d.empty.add(r));
            return r(), e.promise(g)
        }
    });
    var la, gb, Qa, Ra = /[\t\r\n]/g,
        hb = /\r/g,
        ib = /^(?:button|input)$/i,
        jb = /^(?:button|input|object|select|textarea)$/i,
        kb = /^a(?:rea|)$/i,
        lb = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
        Sa = l.support.getSetAttribute;
    l.fn.extend({
        attr: function(b,
            c) {
            return l.access(this, l.attr, b, c, 1 < arguments.length)
        },
        removeAttr: function(b) {
            return this.each(function() {
                l.removeAttr(this, b)
            })
        },
        prop: function(b, c) {
            return l.access(this, l.prop, b, c, 1 < arguments.length)
        },
        removeProp: function(b) {
            return b = l.propFix[b] || b, this.each(function() {
                try {
                    this[b] = c, delete this[b]
                } catch (g) {}
            })
        },
        addClass: function(b) {
            var c, g, d, q, e, n, f;
            if (l.isFunction(b)) return this.each(function(c) {
                l(this).addClass(b.call(this, c, this.className))
            });
            if (b && "string" == typeof b) {
                c = b.split(pa);
                g = 0;
                for (d =
                    this.length; g < d; g++)
                    if (q = this[g], 1 === q.nodeType)
                        if (!q.className && 1 === c.length) q.className = b;
                        else {
                            e = " " + q.className + " ";
                            n = 0;
                            for (f = c.length; n < f; n++) 0 > e.indexOf(" " + c[n] + " ") && (e += c[n] + " ");
                            q.className = l.trim(e)
                        }
            }
            return this
        },
        removeClass: function(b) {
            var g, d, q, e, n, f, r;
            if (l.isFunction(b)) return this.each(function(c) {
                l(this).removeClass(b.call(this, c, this.className))
            });
            if (b && "string" == typeof b || b === c) {
                g = (b || "").split(pa);
                f = 0;
                for (r = this.length; f < r; f++)
                    if (q = this[f], 1 === q.nodeType && q.className) {
                        d = (" " + q.className +
                            " ").replace(Ra, " ");
                        e = 0;
                        for (n = g.length; e < n; e++)
                            for (; 0 <= d.indexOf(" " + g[e] + " ");) d = d.replace(" " + g[e] + " ", " ");
                        q.className = b ? l.trim(d) : ""
                    }
            }
            return this
        },
        toggleClass: function(b, c) {
            var g = typeof b,
                d = "boolean" == typeof c;
            return l.isFunction(b) ? this.each(function(g) {
                l(this).toggleClass(b.call(this, g, this.className, c), c)
            }) : this.each(function() {
                if ("string" === g)
                    for (var q, e = 0, n = l(this), f = c, r = b.split(pa); q = r[e++];) f = d ? f : !n.hasClass(q), n[f ? "addClass" : "removeClass"](q);
                else if ("undefined" === g || "boolean" === g) this.className &&
                    l._data(this, "__className__", this.className), this.className = this.className || !1 === b ? "" : l._data(this, "__className__") || ""
            })
        },
        hasClass: function(b) {
            b = " " + b + " ";
            for (var c = 0, g = this.length; c < g; c++)
                if (1 === this[c].nodeType && 0 <= (" " + this[c].className + " ").replace(Ra, " ").indexOf(b)) return !0;
            return !1
        },
        val: function(b) {
            var g, d, q, e = this[0];
            if (arguments.length) return q = l.isFunction(b), this.each(function(d) {
                var e, n = l(this);
                if (1 === this.nodeType && (q ? e = b.call(this, d, n.val()) : e = b, null == e ? e = "" : "number" == typeof e ? e += "" :
                    l.isArray(e) && (e = l.map(e, function(b) {
                        return null == b ? "" : b + ""
                    })), g = l.valHooks[this.type] || l.valHooks[this.nodeName.toLowerCase()], !g || !("set" in g) || g.set(this, e, "value") === c)) this.value = e
            });
            if (e) return g = l.valHooks[e.type] || l.valHooks[e.nodeName.toLowerCase()], g && "get" in g && (d = g.get(e, "value")) !== c ? d : (d = e.value, "string" == typeof d ? d.replace(hb, "") : null == d ? "" : d)
        }
    });
    l.extend({
        valHooks: {
            option: {
                get: function(b) {
                    var c = b.attributes.value;
                    return !c || c.specified ? b.value : b.text
                }
            },
            select: {
                get: function(b) {
                    var c,
                        g, d = b.selectedIndex,
                        q = [],
                        e = b.options,
                        n = "select-one" === b.type;
                    if (0 > d) return null;
                    b = n ? d : 0;
                    for (g = n ? d + 1 : e.length; b < g; b++)
                        if (c = e[b], c.selected && (l.support.optDisabled ? !c.disabled : null === c.getAttribute("disabled")) && (!c.parentNode.disabled || !l.nodeName(c.parentNode, "optgroup"))) {
                            c = l(c).val();
                            if (n) return c;
                            q.push(c)
                        }
                    return n && !q.length && e.length ? l(e[d]).val() : q
                },
                set: function(b, c) {
                    var g = l.makeArray(c);
                    return l(b).find("option").each(function() {
                        this.selected = 0 <= l.inArray(l(this).val(), g)
                    }), g.length || (b.selectedIndex = -1), g
                }
            }
        },
        attrFn: {},
        attr: function(b, g, d, q) {
            var e, n, f = b.nodeType;
            if (b && !(3 === f || 8 === f || 2 === f)) {
                if (q && l.isFunction(l.fn[g])) return l(b)[g](d);
                if ("undefined" == typeof b.getAttribute) return l.prop(b, g, d);
                (q = 1 !== f || !l.isXMLDoc(b)) && (g = g.toLowerCase(), n = l.attrHooks[g] || (lb.test(g) ? gb : la));
                if (d !== c) {
                    if (null === d) {
                        l.removeAttr(b, g);
                        return
                    }
                    return n && "set" in n && q && (e = n.set(b, d, g)) !== c ? e : (b.setAttribute(g, d + ""), d)
                }
                return n && "get" in n && q && null !== (e = n.get(b, g)) ? e : (e = b.getAttribute(g), null === e ? c : e)
            }
        },
        removeAttr: function(b,
            c) {
            var g, d, q, e, n = 0;
            if (c && 1 === b.nodeType)
                for (d = c.split(pa); n < d.length; n++)(q = d[n]) && (g = l.propFix[q] || q, e = lb.test(q), e || l.attr(b, q, ""), b.removeAttribute(Sa ? q : g), e && g in b && (b[g] = !1))
        },
        attrHooks: {
            type: {
                set: function(b, c) {
                    if (ib.test(b.nodeName) && b.parentNode) l.error("type property can't be changed");
                    else if (!l.support.radioValue && "radio" === c && l.nodeName(b, "input")) {
                        var g = b.value;
                        return b.setAttribute("type", c), g && (b.value = g), c
                    }
                }
            },
            value: {
                get: function(b, c) {
                    return la && l.nodeName(b, "button") ? la.get(b, c) : c in
                        b ? b.value : null
                },
                set: function(b, c, g) {
                    if (la && l.nodeName(b, "button")) return la.set(b, c, g);
                    b.value = c
                }
            }
        },
        propFix: {
            tabindex: "tabIndex",
            readonly: "readOnly",
            "for": "htmlFor",
            "class": "className",
            maxlength: "maxLength",
            cellspacing: "cellSpacing",
            cellpadding: "cellPadding",
            rowspan: "rowSpan",
            colspan: "colSpan",
            usemap: "useMap",
            frameborder: "frameBorder",
            contenteditable: "contentEditable"
        },
        prop: function(b, g, d) {
            var q, e, n, f = b.nodeType;
            if (b && !(3 === f || 8 === f || 2 === f)) return n = 1 !== f || !l.isXMLDoc(b), n && (g = l.propFix[g] || g, e = l.propHooks[g]),
                d !== c ? e && "set" in e && (q = e.set(b, d, g)) !== c ? q : b[g] = d : e && "get" in e && null !== (q = e.get(b, g)) ? q : b[g]
        },
        propHooks: {
            tabIndex: {
                get: function(b) {
                    var g = b.getAttributeNode("tabindex");
                    return g && g.specified ? parseInt(g.value, 10) : jb.test(b.nodeName) || kb.test(b.nodeName) && b.href ? 0 : c
                }
            }
        }
    });
    gb = {
        get: function(b, g) {
            var d, q = l.prop(b, g);
            return !0 === q || "boolean" != typeof q && (d = b.getAttributeNode(g)) && !1 !== d.nodeValue ? g.toLowerCase() : c
        },
        set: function(b, c, g) {
            var d;
            return !1 === c ? l.removeAttr(b, g) : (d = l.propFix[g] || g, d in b && (b[d] = !0),
                b.setAttribute(g, g.toLowerCase())), g
        }
    };
    Sa || (Qa = {
        name: !0,
        id: !0,
        coords: !0
    }, la = l.valHooks.button = {
        get: function(b, g) {
            var d;
            return d = b.getAttributeNode(g), d && (Qa[g] ? "" !== d.value : d.specified) ? d.value : c
        },
        set: function(b, c, g) {
            var d = b.getAttributeNode(g);
            return d || (d = J.createAttribute(g), b.setAttributeNode(d)), d.value = c + ""
        }
    }, l.each(["width", "height"], function(b, c) {
        l.attrHooks[c] = l.extend(l.attrHooks[c], {
            set: function(b, g) {
                if ("" === g) return b.setAttribute(c, "auto"), g
            }
        })
    }), l.attrHooks.contenteditable = {
        get: la.get,
        set: function(b, c, g) {
            "" === c && (c = "false");
            la.set(b, c, g)
        }
    });
    l.support.hrefNormalized || l.each(["href", "src", "width", "height"], function(b, g) {
        l.attrHooks[g] = l.extend(l.attrHooks[g], {
            get: function(b) {
                b = b.getAttribute(g, 2);
                return null === b ? c : b
            }
        })
    });
    l.support.style || (l.attrHooks.style = {
        get: function(b) {
            return b.style.cssText.toLowerCase() || c
        },
        set: function(b, c) {
            return b.style.cssText = c + ""
        }
    });
    l.support.optSelected || (l.propHooks.selected = l.extend(l.propHooks.selected, {
        get: function(b) {
            b = b.parentNode;
            return b && (b.selectedIndex,
                b.parentNode && b.parentNode.selectedIndex), null
        }
    }));
    l.support.enctype || (l.propFix.enctype = "encoding");
    l.support.checkOn || l.each(["radio", "checkbox"], function() {
        l.valHooks[this] = {
            get: function(b) {
                return null === b.getAttribute("value") ? "on" : b.value
            }
        }
    });
    l.each(["radio", "checkbox"], function() {
        l.valHooks[this] = l.extend(l.valHooks[this], {
            set: function(b, c) {
                if (l.isArray(c)) return b.checked = 0 <= l.inArray(l(b).val(), c)
            }
        })
    });
    var Fa = /^(?:textarea|input|select)$/i,
        mb = /^([^\.]*|)(?:\.(.+)|)$/,
        nb = /(?:^|\s)hover(\.\S+|)\b/,
        ob = /^key/,
        pb = /^(?:mouse|contextmenu)|click/,
        Ta = /^(?:focusinfocus|focusoutblur)$/,
        Ua = function(b) {
            return l.event.special.hover ? b : b.replace(nb, "mouseenter$1 mouseleave$1")
        };
    l.event = {
        add: function(b, g, d, q, e) {
            var n, f, r, m, D, j, y, u, R;
            if (!(3 === b.nodeType || 8 === b.nodeType || !g || !d || !(n = l._data(b)))) {
                d.handler && (y = d, d = y.handler, e = y.selector);
                d.guid || (d.guid = l.guid++);
                (r = n.events) || (n.events = r = {});
                (f = n.handle) || (n.handle = f = function(b) {
                    return "undefined" != typeof l && (!b || l.event.triggered !== b.type) ? l.event.dispatch.apply(f.elem,
                        arguments) : c
                }, f.elem = b);
                g = l.trim(Ua(g)).split(" ");
                for (n = 0; n < g.length; n++) {
                    m = mb.exec(g[n]) || [];
                    D = m[1];
                    j = (m[2] || "").split(".").sort();
                    R = l.event.special[D] || {};
                    D = (e ? R.delegateType : R.bindType) || D;
                    R = l.event.special[D] || {};
                    m = l.extend({
                        type: D,
                        origType: m[1],
                        data: q,
                        handler: d,
                        guid: d.guid,
                        selector: e,
                        needsContext: e && l.expr.match.needsContext.test(e),
                        namespace: j.join(".")
                    }, y);
                    u = r[D];
                    if (!u && (u = r[D] = [], u.delegateCount = 0, !R.setup || !1 === R.setup.call(b, q, j, f))) b.addEventListener ? b.addEventListener(D, f, !1) : b.attachEvent &&
                        b.attachEvent("on" + D, f);
                    R.add && (R.add.call(b, m), m.handler.guid || (m.handler.guid = d.guid));
                    e ? u.splice(u.delegateCount++, 0, m) : u.push(m);
                    l.event.global[D] = !0
                }
                b = null
            }
        },
        global: {},
        remove: function(b, c, g, d, q) {
            var e, n, f, r, m, D, j, y, u, R, K = l.hasData(b) && l._data(b);
            if (K && (j = K.events)) {
                c = l.trim(Ua(c || "")).split(" ");
                for (e = 0; e < c.length; e++)
                    if (n = mb.exec(c[e]) || [], f = r = n[1], n = n[2], f) {
                        y = l.event.special[f] || {};
                        f = (d ? y.delegateType : y.bindType) || f;
                        u = j[f] || [];
                        m = u.length;
                        n = n ? RegExp("(^|\\.)" + n.split(".").sort().join("\\.(?:.*\\.|)") +
                            "(\\.|$)") : null;
                        for (D = 0; D < u.length; D++) R = u[D], (q || r === R.origType) && (!g || g.guid === R.guid) && (!n || n.test(R.namespace)) && (!d || d === R.selector || "**" === d && R.selector) && (u.splice(D--, 1), R.selector && u.delegateCount--, y.remove && y.remove.call(b, R));
                        0 === u.length && m !== u.length && ((!y.teardown || !1 === y.teardown.call(b, n, K.handle)) && l.removeEvent(b, f, K.handle), delete j[f])
                    } else
                        for (f in j) l.event.remove(b, f + c[e], g, d, !0);
                l.isEmptyObject(j) && (delete K.handle, l.removeData(b, "events", !0))
            }
        },
        customEvent: {
            getData: !0,
            setData: !0,
            changeData: !0
        },
        trigger: function(g, d, q, e) {
            if (!q || 3 !== q.nodeType && 8 !== q.nodeType) {
                var n, f, r, m, D, j, y, u = g.type || g;
                m = [];
                if (!Ta.test(u + l.event.triggered) && (0 <= u.indexOf("!") && (u = u.slice(0, -1), n = !0), 0 <= u.indexOf(".") && (m = u.split("."), u = m.shift(), m.sort()), q && !l.event.customEvent[u] || l.event.global[u]))
                    if (g = "object" == typeof g ? g[l.expando] ? g : new l.Event(u, g) : new l.Event(u), g.type = u, g.isTrigger = !0, g.exclusive = n, g.namespace = m.join("."), g.namespace_re = g.namespace ? RegExp("(^|\\.)" + m.join("\\.(?:.*\\.|)") + "(\\.|$)") :
                        null, m = 0 > u.indexOf(":") ? "on" + u : "", q) {
                        if (g.result = c, g.target || (g.target = q), d = null != d ? l.makeArray(d) : [], d.unshift(g), D = l.event.special[u] || {}, !(D.trigger && !1 === D.trigger.apply(q, d))) {
                            y = [
                                [q, D.bindType || u]
                            ];
                            if (!e && !D.noBubble && !l.isWindow(q)) {
                                f = D.delegateType || u;
                                n = Ta.test(f + u) ? q : q.parentNode;
                                for (r = q; n; n = n.parentNode) y.push([n, f]), r = n;
                                r === (q.ownerDocument || J) && y.push([r.defaultView || r.parentWindow || b, f])
                            }
                            for (f = 0; f < y.length && !g.isPropagationStopped(); f++) n = y[f][0], g.type = y[f][1], (j = (l._data(n, "events") || {})[g.type] && l._data(n, "handle")) && j.apply(n, d), (j = m && n[m]) && l.acceptData(n) && j.apply && !1 === j.apply(n, d) && g.preventDefault();
                            return g.type = u, !e && !g.isDefaultPrevented() && (!D._default || !1 === D._default.apply(q.ownerDocument, d)) && ("click" !== u || !l.nodeName(q, "a")) && l.acceptData(q) && m && q[u] && ("focus" !== u && "blur" !== u || 0 !== g.target.offsetWidth) && !l.isWindow(q) && (r = q[m], r && (q[m] = null), l.event.triggered = u, q[u](), l.event.triggered = c, r && (q[m] = r)), g.result
                        }
                    } else
                        for (f in q = l.cache, q) q[f].events && q[f].events[u] &&
                            l.event.trigger(g, d, q[f].handle.elem, !0)
            }
        },
        dispatch: function(g) {
            g = l.event.fix(g || b.event);
            var d, q, e, n, f, r, m = (l._data(this, "events") || {})[g.type] || [],
                j = m.delegateCount,
                u = D.call(arguments),
                y = !g.exclusive && !g.namespace,
                R = l.event.special[g.type] || {},
                K = [];
            u[0] = g;
            g.delegateTarget = this;
            if (!(R.preDispatch && !1 === R.preDispatch.call(this, g))) {
                if (j && (!g.button || "click" !== g.type))
                    for (q = g.target; q != this; q = q.parentNode || this)
                        if (!0 !== q.disabled || "click" !== g.type) {
                            n = {};
                            f = [];
                            for (d = 0; d < j; d++) e = m[d], r = e.selector, n[r] ===
                                c && (n[r] = e.needsContext ? 0 <= l(r, this).index(q) : l.find(r, this, null, [q]).length), n[r] && f.push(e);
                            f.length && K.push({
                                elem: q,
                                matches: f
                            })
                        }
                m.length > j && K.push({
                    elem: this,
                    matches: m.slice(j)
                });
                for (d = 0; d < K.length && !g.isPropagationStopped(); d++) {
                    n = K[d];
                    g.currentTarget = n.elem;
                    for (q = 0; q < n.matches.length && !g.isImmediatePropagationStopped(); q++)
                        if (e = n.matches[q], y || !g.namespace && !e.namespace || g.namespace_re && g.namespace_re.test(e.namespace)) g.data = e.data, g.handleObj = e, e = ((l.event.special[e.origType] || {}).handle ||
                            e.handler).apply(n.elem, u), e !== c && (g.result = e, !1 === e && (g.preventDefault(), g.stopPropagation()))
                }
                return R.postDispatch && R.postDispatch.call(this, g), g.result
            }
        },
        props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: ["char", "charCode", "key", "keyCode"],
            filter: function(b, c) {
                return null == b.which && (b.which = null != c.charCode ? c.charCode : c.keyCode), b
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(b, g) {
                var d, q, l, e = g.button,
                    n = g.fromElement;
                return null == b.pageX && null != g.clientX && (d = b.target.ownerDocument || J, q = d.documentElement, l = d.body, b.pageX = g.clientX + (q && q.scrollLeft || l && l.scrollLeft || 0) - (q && q.clientLeft || l && l.clientLeft || 0), b.pageY = g.clientY + (q && q.scrollTop || l && l.scrollTop || 0) - (q && q.clientTop || l && l.clientTop || 0)), !b.relatedTarget && n && (b.relatedTarget = n === b.target ? g.toElement : n), !b.which && e !== c && (b.which = e & 1 ? 1 : e & 2 ? 3 : e & 4 ? 2 : 0), b
            }
        },
        fix: function(b) {
            if (b[l.expando]) return b;
            var c,
                g, d = b,
                q = l.event.fixHooks[b.type] || {},
                e = q.props ? this.props.concat(q.props) : this.props;
            b = l.Event(d);
            for (c = e.length; c;) g = e[--c], b[g] = d[g];
            return b.target || (b.target = d.srcElement || J), 3 === b.target.nodeType && (b.target = b.target.parentNode), b.metaKey = !!b.metaKey, q.filter ? q.filter(b, d) : b
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                delegateType: "focusin"
            },
            blur: {
                delegateType: "focusout"
            },
            beforeunload: {
                setup: function(b, c, g) {
                    l.isWindow(this) && (this.onbeforeunload = g)
                },
                teardown: function(b, c) {
                    this.onbeforeunload === c && (this.onbeforeunload =
                        null)
                }
            }
        },
        simulate: function(b, c, g, d) {
            b = l.extend(new l.Event, g, {
                type: b,
                isSimulated: !0,
                originalEvent: {}
            });
            d ? l.event.trigger(b, null, c) : l.event.dispatch.call(c, b);
            b.isDefaultPrevented() && g.preventDefault()
        }
    };
    l.event.handle = l.event.dispatch;
    l.removeEvent = J.removeEventListener ? function(b, c, g) {
        b.removeEventListener && b.removeEventListener(c, g, !1)
    } : function(b, c, g) {
        c = "on" + c;
        b.detachEvent && ("undefined" == typeof b[c] && (b[c] = null), b.detachEvent(c, g))
    };
    l.Event = function(b, c) {
        if (this instanceof l.Event) b && b.type ? (this.originalEvent =
            b, this.type = b.type, this.isDefaultPrevented = b.defaultPrevented || !1 === b.returnValue || b.getPreventDefault && b.getPreventDefault() ? j : f) : this.type = b, c && l.extend(this, c), this.timeStamp = b && b.timeStamp || l.now(), this[l.expando] = !0;
        else return new l.Event(b, c)
    };
    l.Event.prototype = {
        preventDefault: function() {
            this.isDefaultPrevented = j;
            var b = this.originalEvent;
            b && (b.preventDefault ? b.preventDefault() : b.returnValue = !1)
        },
        stopPropagation: function() {
            this.isPropagationStopped = j;
            var b = this.originalEvent;
            b && (b.stopPropagation &&
                b.stopPropagation(), b.cancelBubble = !0)
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = j;
            this.stopPropagation()
        },
        isDefaultPrevented: f,
        isPropagationStopped: f,
        isImmediatePropagationStopped: f
    };
    l.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(b, c) {
        l.event.special[b] = {
            delegateType: c,
            bindType: c,
            handle: function(b) {
                var g, d = b.relatedTarget,
                    q = b.handleObj;
                if (!d || d !== this && !l.contains(this, d)) b.type = q.origType, g = q.handler.apply(this, arguments), b.type = c;
                return g
            }
        }
    });
    l.support.submitBubbles ||
        (l.event.special.submit = {
            setup: function() {
                if (l.nodeName(this, "form")) return !1;
                l.event.add(this, "click._submit keypress._submit", function(b) {
                    b = b.target;
                    (b = l.nodeName(b, "input") || l.nodeName(b, "button") ? b.form : c) && !l._data(b, "_submit_attached") && (l.event.add(b, "submit._submit", function(b) {
                        b._submit_bubble = !0
                    }), l._data(b, "_submit_attached", !0))
                })
            },
            postDispatch: function(b) {
                b._submit_bubble && (delete b._submit_bubble, this.parentNode && !b.isTrigger && l.event.simulate("submit", this.parentNode, b, !0))
            },
            teardown: function() {
                if (l.nodeName(this,
                    "form")) return !1;
                l.event.remove(this, "._submit")
            }
        });
    l.support.changeBubbles || (l.event.special.change = {
        setup: function() {
            if (Fa.test(this.nodeName)) {
                if ("checkbox" === this.type || "radio" === this.type) l.event.add(this, "propertychange._change", function(b) {
                    "checked" === b.originalEvent.propertyName && (this._just_changed = !0)
                }), l.event.add(this, "click._change", function(b) {
                    this._just_changed && !b.isTrigger && (this._just_changed = !1);
                    l.event.simulate("change", this, b, !0)
                });
                return !1
            }
            l.event.add(this, "beforeactivate._change",
                function(b) {
                    b = b.target;
                    Fa.test(b.nodeName) && !l._data(b, "_change_attached") && (l.event.add(b, "change._change", function(b) {
                        this.parentNode && !b.isSimulated && !b.isTrigger && l.event.simulate("change", this.parentNode, b, !0)
                    }), l._data(b, "_change_attached", !0))
                })
        },
        handle: function(b) {
            var c = b.target;
            if (this !== c || b.isSimulated || b.isTrigger || "radio" !== c.type && "checkbox" !== c.type) return b.handleObj.handler.apply(this, arguments)
        },
        teardown: function() {
            return l.event.remove(this, "._change"), !Fa.test(this.nodeName)
        }
    });
    l.support.focusinBubbles || l.each({
        focus: "focusin",
        blur: "focusout"
    }, function(b, c) {
        var g = 0,
            d = function(b) {
                l.event.simulate(c, b.target, l.event.fix(b), !0)
            };
        l.event.special[c] = {
            setup: function() {
                0 === g++ && J.addEventListener(b, d, !0)
            },
            teardown: function() {
                0 === --g && J.removeEventListener(b, d, !0)
            }
        }
    });
    l.fn.extend({
        on: function(b, g, d, q, e) {
            var n, r;
            if ("object" == typeof b) {
                "string" != typeof g && (d = d || g, g = c);
                for (r in b) this.on(r, g, d, b[r], e);
                return this
            }
            null == d && null == q ? (q = g, d = g = c) : null == q && ("string" == typeof g ? (q = d, d = c) :
                (q = d, d = g, g = c));
            if (!1 === q) q = f;
            else if (!q) return this;
            return 1 === e && (n = q, q = function(b) {
                return l().off(b), n.apply(this, arguments)
            }, q.guid = n.guid || (n.guid = l.guid++)), this.each(function() {
                l.event.add(this, b, q, d, g)
            })
        },
        one: function(b, c, g, d) {
            return this.on(b, c, g, d, 1)
        },
        off: function(b, g, d) {
            var q, e;
            if (b && b.preventDefault && b.handleObj) return q = b.handleObj, l(b.delegateTarget).off(q.namespace ? q.origType + "." + q.namespace : q.origType, q.selector, q.handler), this;
            if ("object" == typeof b) {
                for (e in b) this.off(e, g, b[e]);
                return this
            }
            if (!1 ===
                g || "function" == typeof g) d = g, g = c;
            return !1 === d && (d = f), this.each(function() {
                l.event.remove(this, b, d, g)
            })
        },
        bind: function(b, c, g) {
            return this.on(b, null, c, g)
        },
        unbind: function(b, c) {
            return this.off(b, null, c)
        },
        live: function(b, c, g) {
            return l(this.context).on(b, this.selector, c, g), this
        },
        die: function(b, c) {
            return l(this.context).off(b, this.selector || "**", c), this
        },
        delegate: function(b, c, g, d) {
            return this.on(c, b, g, d)
        },
        undelegate: function(b, c, g) {
            return 1 === arguments.length ? this.off(b, "**") : this.off(c, b || "**", g)
        },
        trigger: function(b,
            c) {
            return this.each(function() {
                l.event.trigger(b, c, this)
            })
        },
        triggerHandler: function(b, c) {
            if (this[0]) return l.event.trigger(b, c, this[0], !0)
        },
        toggle: function(b) {
            var c = arguments,
                g = b.guid || l.guid++,
                d = 0,
                q = function(g) {
                    var q = (l._data(this, "lastToggle" + b.guid) || 0) % d;
                    return l._data(this, "lastToggle" + b.guid, q + 1), g.preventDefault(), c[q].apply(this, arguments) || !1
                };
            for (q.guid = g; d < c.length;) c[d++].guid = g;
            return this.click(q)
        },
        hover: function(b, c) {
            return this.mouseenter(b).mouseleave(c || b)
        }
    });
    l.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),
        function(b, c) {
            l.fn[c] = function(b, g) {
                return null == g && (g = b, b = null), 0 < arguments.length ? this.on(c, null, b, g) : this.trigger(c)
            };
            ob.test(c) && (l.event.fixHooks[c] = l.event.keyHooks);
            pb.test(c) && (l.event.fixHooks[c] = l.event.mouseHooks)
        });
    var qb = b,
        Y = function(b, c, g, d) {
            g = g || [];
            c = c || ma;
            var q, l, e, n, f = c.nodeType;
            if (!b || "string" != typeof b) return g;
            if (1 !== f && 9 !== f) return [];
            e = Db(c);
            if (!e && !d && (q = Qc.exec(b)))
                if (n = q[1])
                    if (9 === f) {
                        l = c.getElementById(n);
                        if (!l || !l.parentNode) return g;
                        if (l.id === n) return g.push(l), g
                    } else {
                        if (c.ownerDocument &&
                            (l = c.ownerDocument.getElementById(n)) && lc(c, l) && l.id === n) return g.push(l), g
                    } else {
                if (q[2]) return Va.apply(g, Wa.call(c.getElementsByTagName(b), 0)), g;
                if ((n = q[3]) && mc && c.getElementsByClassName) return Va.apply(g, Wa.call(c.getElementsByClassName(n), 0)), g
            }
            return Rb(b.replace(Eb, "$1"), c, g, d, e)
        },
        ua = function(b) {
            return function(c) {
                return "input" === c.nodeName.toLowerCase() && c.type === b
            }
        },
        Xa = function(b) {
            return function(c) {
                var g = c.nodeName.toLowerCase();
                return ("input" === g || "button" === g) && c.type === b
            }
        },
        oa = function(b) {
            return na(function(c) {
                return c = +c, na(function(g, d) {
                    for (var q, l = b([], g.length, c), e = l.length; e--;) g[q = l[e]] && (g[q] = !(d[q] = g[q]))
                })
            })
        },
        wa = function(b, c, g) {
            if (b === c) return g;
            for (b = b.nextSibling; b;) {
                if (b === c) return -1;
                b = b.nextSibling
            }
            return 1
        },
        xa = function(b, c) {
            var g, d, q, l, e, n, f;
            if (e = nc[ea][b]) return c ? 0 : e.slice(0);
            e = b;
            n = [];
            for (f = ca.preFilter; e;) {
                if (!g || (d = Rc.exec(e))) d && (e = e.slice(d[0].length)), n.push(q = []);
                g = !1;
                if (d = Sc.exec(e)) q.push(g = new oc(d.shift())), e = e.slice(g.length), g.type = d[0].replace(Eb, " ");
                for (l in ca.filter)(d = Fb[l].exec(e)) &&
                    (!f[l] || (d = f[l](d, ma, !0))) && (q.push(g = new oc(d.shift())), e = e.slice(g.length), g.type = l, g.matches = d);
                if (!g) break
            }
            return c ? e.length : e ? Y.error(b) : nc(b, n).slice(0)
        },
        Tb = function(b, c, g) {
            var d = c.dir,
                q = g && "parentNode" === c.dir,
                l = Tc++;
            return c.first ? function(c, g, l) {
                for (; c = c[d];)
                    if (q || 1 === c.nodeType) return b(c, g, l)
            } : function(c, g, e) {
                if (e)
                    for (; c = c[d];) {
                        if ((q || 1 === c.nodeType) && b(c, g, e)) return c
                    } else
                        for (var n, f = rb + " " + l + " ", r = f + Sb; c = c[d];)
                            if (q || 1 === c.nodeType) {
                                if ((n = c[ea]) === r) return c.sizset;
                                if ("string" == typeof n &&
                                    0 === n.indexOf(f)) {
                                    if (c.sizset) return c
                                } else {
                                    c[ea] = r;
                                    if (b(c, g, e)) return c.sizset = !0, c;
                                    c.sizset = !1
                                }
                            }
            }
        },
        Ub = function(b) {
            return 1 < b.length ? function(c, g, d) {
                for (var q = b.length; q--;)
                    if (!b[q](c, g, d)) return !1;
                return !0
            } : b[0]
        },
        Gb = function(b, c, g, d, q) {
            for (var l, e = [], n = 0, f = b.length, r = null != c; n < f; n++)
                if (l = b[n])
                    if (!g || g(l, d, q)) e.push(l), r && c.push(n);
            return e
        },
        Vb = function(b, c, g, d, q, l) {
            return d && !d[ea] && (d = Vb(d)), q && !q[ea] && (q = Vb(q, l)), na(function(l, e, n, f) {
                if (!l || !q) {
                    var r, m, D = [],
                        j = [],
                        u = e.length;
                    if (!(m = l)) {
                        m = c || "*";
                        var y = n.nodeType ? [n] : n,
                            R = [];
                        r = 0;
                        for (var K = y.length; r < K; r++) Y(m, y[r], R, l);
                        m = R
                    }
                    y = b && (l || !c) ? Gb(m, D, b, n, f) : m;
                    R = g ? q || (l ? b : u || d) ? [] : e : y;
                    g && g(y, R, n, f);
                    if (d) {
                        m = Gb(R, j);
                        d(m, [], n, f);
                        for (n = m.length; n--;)
                            if (r = m[n]) R[j[n]] = !(y[j[n]] = r)
                    }
                    if (l)
                        for (n = b && R.length; n--;) {
                            if (r = R[n]) l[D[n]] = !(e[D[n]] = r)
                        } else R = Gb(R === e ? R.splice(u, R.length) : R), q ? q(null, e, R, f) : Va.apply(e, R)
                }
            })
        },
        Wb = function(b) {
            var c, g, d, q = b.length,
                l = ca.relative[b[0].type];
            g = l || ca.relative[" "];
            for (var e = l ? 1 : 0, n = Tb(function(b) {
                return b === c
            }, g, !0), f = Tb(function(b) {
                return -1 <
                    pc.call(c, b)
            }, g, !0), r = [
                function(b, g, d) {
                    return !l && (d || g !== Hb) || ((c = g).nodeType ? n(b, g, d) : f(b, g, d))
                }
            ]; e < q; e++)
                if (g = ca.relative[b[e].type]) r = [Tb(Ub(r), g)];
                else {
                    g = ca.filter[b[e].type].apply(null, b[e].matches);
                    if (g[ea]) {
                        for (d = ++e; d < q && !ca.relative[b[d].type]; d++);
                        return Vb(1 < e && Ub(r), 1 < e && b.slice(0, e - 1).join("").replace(Eb, "$1"), g, e < d && Wb(b.slice(e, d)), d < q && Wb(b = b.slice(d)), d < q && b.join(""))
                    }
                    r.push(g)
                }
            return Ub(r)
        },
        Rb = function(b, c, g, d, q) {
            var l, e, n, f, r = xa(b);
            if (!d && 1 === r.length) {
                e = r[0] = r[0].slice(0);
                if (2 <
                    e.length && "ID" === (n = e[0]).type && 9 === c.nodeType && !q && ca.relative[e[1].type]) {
                    c = ca.find.ID(n.matches[0].replace(Ga, ""), c, q)[0];
                    if (!c) return g;
                    b = b.slice(e.shift().length)
                }
                for (l = Fb.POS.test(b) ? -1 : e.length - 1; 0 <= l; l--) {
                    n = e[l];
                    if (ca.relative[f = n.type]) break;
                    if (f = ca.find[f])
                        if (d = f(n.matches[0].replace(Ga, ""), Xb.test(e[0].type) && c.parentNode || c, q)) {
                            e.splice(l, 1);
                            b = d.length && e.join("");
                            if (!b) return Va.apply(g, Wa.call(d, 0)), g;
                            break
                        }
                }
            }
            return Yb(b, r)(d, c, q, g, Xb.test(b)), g
        },
        qc = function() {},
        Sb, Zb, ca, Ib, Db, lc, Yb,
        $b, sb, Hb, rc = !0,
        ea = ("sizcache" + Math.random()).replace(".", ""),
        oc = String,
        ma = qb.document,
        ka = ma.documentElement,
        rb = 0,
        Tc = 0,
        Uc = [].pop,
        Va = [].push,
        Wa = [].slice,
        pc = [].indexOf || function(b) {
            for (var c = 0, g = this.length; c < g; c++)
                if (this[c] === b) return c;
            return -1
        },
        na = function(b, c) {
            return b[ea] = null == c || c, b
        },
        ac = function() {
            var b = {},
                c = [];
            return na(function(g, d) {
                return c.push(g) > ca.cacheLength && delete b[c.shift()], b[g] = d
            }, b)
        },
        sc = ac(),
        nc = ac(),
        tc = ac(),
        uc = "\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[-\\w]|[^\\x00-\\xa0])+)[\\x20\\t\\r\\n\\f]*(?:([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" +
        "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+".replace("w", "w#") + ")|)|)[\\x20\\t\\r\\n\\f]*\\]",
        bc = ":((?:\\\\.|[-\\w]|[^\\x00-\\xa0])+)(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + uc + ")|[^:]|\\\\.)*|.*))\\)|)",
        Eb = /^[\x20\t\r\n\f]+|((?:^|[^\\])(?:\\.)*)[\x20\t\r\n\f]+$/g,
        Rc = /^[\x20\t\r\n\f]*,[\x20\t\r\n\f]*/,
        Sc = /^[\x20\t\r\n\f]*([\x20\t\r\n\f>+~])[\x20\t\r\n\f]*/,
        Vc = RegExp(bc),
        Qc = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,
        Xb = /[\x20\t\r\n\f]*[+~]/,
        Wc = /h\d/i,
        Xc = /input|select|textarea|button/i,
        Ga = /\\(?!\\)/g,
        Fb = {
            ID: /^#((?:\\.|[-\w]|[^\x00-\xa0])+)/,
            CLASS: /^\.((?:\\.|[-\w]|[^\x00-\xa0])+)/,
            NAME: /^\[name=['"]?((?:\\.|[-\w]|[^\x00-\xa0])+)['"]?\]/,
            TAG: RegExp("^(" + "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+".replace("w", "w*") + ")"),
            ATTR: RegExp("^" + uc),
            PSEUDO: RegExp("^" + bc),
            POS: /:(even|odd|eq|gt|lt|nth|first|last)(?:\([\x20\t\r\n\f]*((?:-\d)?\d*)[\x20\t\r\n\f]*\)|)(?=[^-]|$)/i,
            CHILD: RegExp("^:(only|nth|first|last)-child(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)",
                "i"),
            needsContext: RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)", "i")
        },
        ya = function(b) {
            var c = ma.createElement("div");
            try {
                return b(c)
            } catch (g) {
                return !1
            } finally {}
        },
        Yc = ya(function(b) {
            return b.appendChild(ma.createComment("")), !b.getElementsByTagName("*").length
        }),
        Zc = ya(function(b) {
            return b.innerHTML = "<a href='#'></a>", b.firstChild && "undefined" !== typeof b.firstChild.getAttribute && "#" === b.firstChild.getAttribute("href")
        }),
        $c = ya(function(b) {
            b.innerHTML = "<select></select>";
            b = typeof b.lastChild.getAttribute("multiple");
            return "boolean" !== b && "string" !== b
        }),
        mc = ya(function(b) {
            return b.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>", !b.getElementsByClassName || !b.getElementsByClassName("e").length ? !1 : (b.lastChild.className = "e", 2 === b.getElementsByClassName("e").length)
        }),
        ad = ya(function(b) {
            b.id = ea + 0;
            b.innerHTML = "<a name='" + ea + "'></a><div name='" + ea + "'></div>";
            ka.insertBefore(b, ka.firstChild);
            var c = ma.getElementsByName &&
                ma.getElementsByName(ea).length === 2 + ma.getElementsByName(ea + 0).length;
            return Zb = !ma.getElementById(ea), ka.removeChild(b), c
        });
    try {
        Wa.call(ka.childNodes, 0)[0].nodeType
    } catch (Jd) {
        Wa = function(b) {
            for (var c, g = []; c = this[b]; b++) g.push(c);
            return g
        }
    }
    Y.matches = function(b, c) {
        return Y(b, null, null, c)
    };
    Y.matchesSelector = function(b, c) {
        return 0 < Y(c, null, null, [b]).length
    };
    Ib = Y.getText = function(b) {
        var c, g = "",
            d = 0;
        if (c = b.nodeType)
            if (1 === c || 9 === c || 11 === c) {
                if ("string" == typeof b.textContent) return b.textContent;
                for (b = b.firstChild; b; b =
                    b.nextSibling) g += Ib(b)
            } else {
                if (3 === c || 4 === c) return b.nodeValue
            } else
            for (; c = b[d]; d++) g += Ib(c);
        return g
    };
    Db = Y.isXML = function(b) {
        return (b = b && (b.ownerDocument || b).documentElement) ? "HTML" !== b.nodeName : !1
    };
    lc = Y.contains = ka.contains ? function(b, c) {
        var g = 9 === b.nodeType ? b.documentElement : b,
            d = c && c.parentNode;
        return b === d || !(!d || !(1 === d.nodeType && g.contains && g.contains(d)))
    } : ka.compareDocumentPosition ? function(b, c) {
        return c && !!(b.compareDocumentPosition(c) & 16)
    } : function(b, c) {
        for (; c = c.parentNode;)
            if (c === b) return !0;
        return !1
    };
    Y.attr = function(b, c) {
        var g, d = Db(b);
        return d || (c = c.toLowerCase()), (g = ca.attrHandle[c]) ? g(b) : d || $c ? b.getAttribute(c) : (g = b.getAttributeNode(c), g ? "boolean" == typeof b[c] ? b[c] ? c : null : g.specified ? g.value : null : null)
    };
    ca = Y.selectors = {
        cacheLength: 50,
        createPseudo: na,
        match: Fb,
        attrHandle: Zc ? {} : {
            href: function(b) {
                return b.getAttribute("href", 2)
            },
            type: function(b) {
                return b.getAttribute("type")
            }
        },
        find: {
            ID: Zb ? function(b, c, g) {
                if ("undefined" !== typeof c.getElementById && !g) return (b = c.getElementById(b)) && b.parentNode ? [b] : []
            } : function(b, c, g) {
                if ("undefined" !== typeof c.getElementById && !g) return (c = c.getElementById(b)) ? c.id === b || "undefined" !== typeof c.getAttributeNode && c.getAttributeNode("id").value === b ? [c] : void 0 : []
            },
            TAG: Yc ? function(b, c) {
                if ("undefined" !== typeof c.getElementsByTagName) return c.getElementsByTagName(b)
            } : function(b, c) {
                var g = c.getElementsByTagName(b);
                if ("*" === b) {
                    for (var d, q = [], l = 0; d = g[l]; l++) 1 === d.nodeType && q.push(d);
                    return q
                }
                return g
            },
            NAME: ad && function(b, c) {
                if ("undefined" !== typeof c.getElementsByName) return c.getElementsByName(name)
            },
            CLASS: mc && function(b, c, g) {
                if ("undefined" !== typeof c.getElementsByClassName && !g) return c.getElementsByClassName(b)
            }
        },
        relative: {
            ">": {
                dir: "parentNode",
                first: !0
            },
            " ": {
                dir: "parentNode"
            },
            "+": {
                dir: "previousSibling",
                first: !0
            },
            "~": {
                dir: "previousSibling"
            }
        },
        preFilter: {
            ATTR: function(b) {
                return b[1] = b[1].replace(Ga, ""), b[3] = (b[4] || b[5] || "").replace(Ga, ""), "~=" === b[2] && (b[3] = " " + b[3] + " "), b.slice(0, 4)
            },
            CHILD: function(b) {
                return b[1] = b[1].toLowerCase(), "nth" === b[1] ? (b[2] || Y.error(b[0]), b[3] = +(b[3] ? b[4] + (b[5] || 1) :
                    2 * ("even" === b[2] || "odd" === b[2])), b[4] = +(b[6] + b[7] || "odd" === b[2])) : b[2] && Y.error(b[0]), b
            },
            PSEUDO: function(b) {
                var c, g;
                if (Fb.CHILD.test(b[0])) return null;
                if (b[3]) b[2] = b[3];
                else if (c = b[4]) Vc.test(c) && (g = xa(c, !0)) && (g = c.indexOf(")", c.length - g) - c.length) && (c = c.slice(0, g), b[0] = b[0].slice(0, g)), b[2] = c;
                return b.slice(0, 3)
            }
        },
        filter: {
            ID: Zb ? function(b) {
                return b = b.replace(Ga, ""),
                    function(c) {
                        return c.getAttribute("id") === b
                    }
            } : function(b) {
                return b = b.replace(Ga, ""),
                    function(c) {
                        return (c = "undefined" !== typeof c.getAttributeNode &&
                            c.getAttributeNode("id")) && c.value === b
                    }
            },
            TAG: function(b) {
                return "*" === b ? function() {
                    return !0
                } : (b = b.replace(Ga, "").toLowerCase(), function(c) {
                    return c.nodeName && c.nodeName.toLowerCase() === b
                })
            },
            CLASS: function(b) {
                var c = sc[ea][b];
                return c || (c = sc(b, RegExp("(^|[\\x20\\t\\r\\n\\f])" + b + "([\\x20\\t\\r\\n\\f]|$)"))),
                    function(b) {
                        return c.test(b.className || "undefined" !== typeof b.getAttribute && b.getAttribute("class") || "")
                    }
            },
            ATTR: function(b, c, g) {
                return function(d) {
                    d = Y.attr(d, b);
                    return null == d ? "!=" === c : c ? (d += "", "=" ===
                        c ? d === g : "!=" === c ? d !== g : "^=" === c ? g && 0 === d.indexOf(g) : "*=" === c ? g && -1 < d.indexOf(g) : "$=" === c ? g && d.substr(d.length - g.length) === g : "~=" === c ? -1 < (" " + d + " ").indexOf(g) : "|=" === c ? d === g || d.substr(0, g.length + 1) === g + "-" : !1) : !0
                }
            },
            CHILD: function(b, c, g, d) {
                return "nth" === b ? function(b) {
                    var c, q;
                    c = b.parentNode;
                    if (1 === g && 0 === d) return !0;
                    if (c) {
                        q = 0;
                        for (c = c.firstChild; c && !(1 === c.nodeType && (q++, b === c)); c = c.nextSibling);
                    }
                    return q -= d, q === g || 0 === q % g && 0 <= q / g
                } : function(c) {
                    var g = c;
                    switch (b) {
                        case "only":
                        case "first":
                            for (; g = g.previousSibling;)
                                if (1 ===
                                    g.nodeType) return !1;
                            if ("first" === b) return !0;
                            g = c;
                        case "last":
                            for (; g = g.nextSibling;)
                                if (1 === g.nodeType) return !1;
                            return !0
                    }
                }
            },
            PSEUDO: function(b, c) {
                var g, d = ca.pseudos[b] || ca.setFilters[b.toLowerCase()] || Y.error("unsupported pseudo: " + b);
                return d[ea] ? d(c) : 1 < d.length ? (g = [b, b, "", c], ca.setFilters.hasOwnProperty(b.toLowerCase()) ? na(function(b, g) {
                    for (var q, l = d(b, c), e = l.length; e--;) q = pc.call(b, l[e]), b[q] = !(g[q] = l[e])
                }) : function(b) {
                    return d(b, 0, g)
                }) : d
            }
        },
        pseudos: {
            not: na(function(b) {
                var c = [],
                    g = [],
                    d = Yb(b.replace(Eb,
                        "$1"));
                return d[ea] ? na(function(b, c, g, q) {
                    q = d(b, null, q, []);
                    for (var l = b.length; l--;)
                        if (g = q[l]) b[l] = !(c[l] = g)
                }) : function(b, q, l) {
                    return c[0] = b, d(c, null, l, g), !g.pop()
                }
            }),
            has: na(function(b) {
                return function(c) {
                    return 0 < Y(b, c).length
                }
            }),
            contains: na(function(b) {
                return function(c) {
                    return -1 < (c.textContent || c.innerText || Ib(c)).indexOf(b)
                }
            }),
            enabled: function(b) {
                return !1 === b.disabled
            },
            disabled: function(b) {
                return !0 === b.disabled
            },
            checked: function(b) {
                var c = b.nodeName.toLowerCase();
                return "input" === c && !!b.checked ||
                    "option" === c && !!b.selected
            },
            selected: function(b) {
                return b.parentNode && b.parentNode.selectedIndex, !0 === b.selected
            },
            parent: function(b) {
                return !ca.pseudos.empty(b)
            },
            empty: function(b) {
                var c;
                for (b = b.firstChild; b;) {
                    if ("@" < b.nodeName || 3 === (c = b.nodeType) || 4 === c) return !1;
                    b = b.nextSibling
                }
                return !0
            },
            header: function(b) {
                return Wc.test(b.nodeName)
            },
            text: function(b) {
                var c, g;
                return "input" === b.nodeName.toLowerCase() && "text" === (c = b.type) && (null == (g = b.getAttribute("type")) || g.toLowerCase() === c)
            },
            radio: ua("radio"),
            checkbox: ua("checkbox"),
            file: ua("file"),
            password: ua("password"),
            image: ua("image"),
            submit: Xa("submit"),
            reset: Xa("reset"),
            button: function(b) {
                var c = b.nodeName.toLowerCase();
                return "input" === c && "button" === b.type || "button" === c
            },
            input: function(b) {
                return Xc.test(b.nodeName)
            },
            focus: function(b) {
                var c = b.ownerDocument;
                return b === c.activeElement && (!c.hasFocus || c.hasFocus()) && (!!b.type || !!b.href)
            },
            active: function(b) {
                return b === b.ownerDocument.activeElement
            },
            first: oa(function() {
                return [0]
            }),
            last: oa(function(b, c) {
                return [c - 1]
            }),
            eq: oa(function(b,
                c, g) {
                return [0 > g ? g + c : g]
            }),
            even: oa(function(b, c) {
                for (var g = 0; g < c; g += 2) b.push(g);
                return b
            }),
            odd: oa(function(b, c) {
                for (var g = 1; g < c; g += 2) b.push(g);
                return b
            }),
            lt: oa(function(b, c, g) {
                for (c = 0 > g ? g + c : g; 0 <= --c;) b.push(c);
                return b
            }),
            gt: oa(function(b, c, g) {
                for (g = 0 > g ? g + c : g; ++g < c;) b.push(g);
                return b
            })
        }
    };
    $b = ka.compareDocumentPosition ? function(b, c) {
        return b === c ? (sb = !0, 0) : (!b.compareDocumentPosition || !c.compareDocumentPosition ? b.compareDocumentPosition : b.compareDocumentPosition(c) & 4) ? -1 : 1
    } : function(b, c) {
        if (b === c) return sb = !0, 0;
        if (b.sourceIndex && c.sourceIndex) return b.sourceIndex - c.sourceIndex;
        var g, d, q = [],
            l = [];
        g = b.parentNode;
        d = c.parentNode;
        var e = g;
        if (g === d) return wa(b, c);
        if (!g) return -1;
        if (!d) return 1;
        for (; e;) q.unshift(e), e = e.parentNode;
        for (e = d; e;) l.unshift(e), e = e.parentNode;
        g = q.length;
        d = l.length;
        for (e = 0; e < g && e < d; e++)
            if (q[e] !== l[e]) return wa(q[e], l[e]);
        return e === g ? wa(b, l[e], -1) : wa(q[e], c, 1)
    };
    [0, 0].sort($b);
    rc = !sb;
    Y.uniqueSort = function(b) {
        var c, g = 1;
        sb = rc;
        b.sort($b);
        if (sb)
            for (; c = b[g]; g++) c === b[g - 1] && b.splice(g--, 1);
        return b
    };
    Y.error = function(b) {
        throw Error("Syntax error, unrecognized expression: " + b);
    };
    Yb = Y.compile = function(b, c) {
        var g, d = [],
            q = [],
            l = tc[ea][b];
        if (!l) {
            c || (c = xa(b));
            for (g = c.length; g--;) l = Wb(c[g]), l[ea] ? d.push(l) : q.push(l);
            var e = 0 < d.length,
                n = 0 < q.length,
                f = function(b, c, g, l, r) {
                    var m, D, j = [],
                        u = 0,
                        y = "0",
                        V = b && [],
                        R = null != r,
                        K = Hb,
                        B = b || n && ca.find.TAG("*", r && c.parentNode || c),
                        t = rb += null == K ? 1 : Math.E;
                    for (R && (Hb = c !== ma && c, Sb = f.el); null != (r = B[y]); y++) {
                        if (n && r) {
                            for (m = 0; D = q[m]; m++)
                                if (D(r, c, g)) {
                                    l.push(r);
                                    break
                                }
                            R && (rb = t,
                                Sb = ++f.el)
                        }
                        e && ((r = !D && r) && u--, b && V.push(r))
                    }
                    u += y;
                    if (e && y !== u) {
                        for (m = 0; D = d[m]; m++) D(V, j, c, g);
                        if (b) {
                            if (0 < u)
                                for (; y--;)!V[y] && !j[y] && (j[y] = Uc.call(l));
                            j = Gb(j)
                        }
                        Va.apply(l, j);
                        R && !b && 0 < j.length && 1 < u + d.length && Y.uniqueSort(l)
                    }
                    return R && (rb = t, Hb = K), V
                };
            g = (f.el = 0, e ? na(f) : f);
            l = tc(b, g)
        }
        return l
    };
    if (ma.querySelectorAll) {
        var vc, bd = Rb,
            cd = /'|\\/g,
            dd = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,
            sa = [":focus"],
            Jb = [":active", ":focus"],
            Kb = ka.matchesSelector || ka.mozMatchesSelector || ka.webkitMatchesSelector || ka.oMatchesSelector ||
            ka.msMatchesSelector;
        ya(function(b) {
            b.innerHTML = "<select><option selected=''></option></select>";
            b.querySelectorAll("[selected]").length || sa.push("\\[[\\x20\\t\\r\\n\\f]*(?:checked|disabled|ismap|multiple|readonly|selected|value)");
            b.querySelectorAll(":checked").length || sa.push(":checked")
        });
        ya(function(b) {
            b.innerHTML = "<p test=''></p>";
            b.querySelectorAll("[test^='']").length && sa.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:\"\"|'')");
            b.innerHTML = "<input type='hidden'/>";
            b.querySelectorAll(":enabled").length ||
                sa.push(":enabled", ":disabled")
        });
        sa = RegExp(sa.join("|"));
        Rb = function(b, c, g, d, q) {
            if (!d && !q && (!sa || !sa.test(b))) {
                var l, e, n = !0,
                    f = ea;
                e = c;
                l = 9 === c.nodeType && b;
                if (1 === c.nodeType && "object" !== c.nodeName.toLowerCase()) {
                    l = xa(b);
                    (n = c.getAttribute("id")) ? f = n.replace(cd, "\\$&"): c.setAttribute("id", f);
                    f = "[id='" + f + "'] ";
                    for (e = l.length; e--;) l[e] = f + l[e].join("");
                    e = Xb.test(b) && c.parentNode || c;
                    l = l.join(",")
                }
                if (l) try {
                    return Va.apply(g, Wa.call(e.querySelectorAll(l), 0)), g
                } catch (r) {} finally {
                    n || c.removeAttribute("id")
                }
            }
            return bd(b,
                c, g, d, q)
        };
        Kb && (ya(function(b) {
            vc = Kb.call(b, "div");
            try {
                Kb.call(b, "[test!='']:sizzle"), Jb.push("!=", bc)
            } catch (c) {}
        }), Jb = RegExp(Jb.join("|")), Y.matchesSelector = function(b, c) {
            c = c.replace(dd, "='$1']");
            if (!Db(b) && !Jb.test(c) && (!sa || !sa.test(c))) try {
                var g = Kb.call(b, c);
                if (g || vc || b.document && 11 !== b.document.nodeType) return g
            } catch (d) {}
            return 0 < Y(c, null, null, [b]).length
        })
    }
    ca.pseudos.nth = ca.pseudos.eq;
    ca.filters = qc.prototype = ca.pseudos;
    ca.setFilters = new qc;
    Y.attr = l.attr;
    l.find = Y;
    l.expr = Y.selectors;
    l.expr[":"] =
        l.expr.pseudos;
    l.unique = Y.uniqueSort;
    l.text = Y.getText;
    l.isXMLDoc = Y.isXML;
    l.contains = Y.contains;
    var ed = /Until$/,
        fd = /^(?:parents|prev(?:Until|All))/,
        Mc = /^.[^:#\[\.,]*$/,
        wc = l.expr.match.needsContext,
        gd = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };
    l.fn.extend({
        find: function(b) {
            var c, g, d, q, e, n, f = this;
            if ("string" != typeof b) return l(b).filter(function() {
                c = 0;
                for (g = f.length; c < g; c++)
                    if (l.contains(f[c], this)) return !0
            });
            n = this.pushStack("", "find", b);
            c = 0;
            for (g = this.length; c < g; c++)
                if (d = n.length, l.find(b, this[c], n),
                    0 < c)
                    for (q = d; q < n.length; q++)
                        for (e = 0; e < d; e++)
                            if (n[e] === n[q]) {
                                n.splice(q--, 1);
                                break
                            }
            return n
        },
        has: function(b) {
            var c, g = l(b, this),
                d = g.length;
            return this.filter(function() {
                for (c = 0; c < d; c++)
                    if (l.contains(this, g[c])) return !0
            })
        },
        not: function(b) {
            return this.pushStack(s(this, b, !1), "not", b)
        },
        filter: function(b) {
            return this.pushStack(s(this, b, !0), "filter", b)
        },
        is: function(b) {
            return !!b && ("string" == typeof b ? wc.test(b) ? 0 <= l(b, this.context).index(this[0]) : 0 < l.filter(b, this).length : 0 < this.filter(b).length)
        },
        closest: function(b,
            c) {
            for (var g, d = 0, q = this.length, e = [], n = wc.test(b) || "string" != typeof b ? l(b, c || this.context) : 0; d < q; d++)
                for (g = this[d]; g && g.ownerDocument && g !== c && 11 !== g.nodeType;) {
                    if (n ? -1 < n.index(g) : l.find.matchesSelector(g, b)) {
                        e.push(g);
                        break
                    }
                    g = g.parentNode
                }
            return e = 1 < e.length ? l.unique(e) : e, this.pushStack(e, "closest", b)
        },
        index: function(b) {
            return b ? "string" == typeof b ? l.inArray(this[0], l(b)) : l.inArray(b.jquery ? b[0] : b, this) : this[0] && this[0].parentNode ? this.prevAll().length : -1
        },
        add: function(b, c) {
            var g = "string" == typeof b ?
                l(b, c) : l.makeArray(b && b.nodeType ? [b] : b),
                d = l.merge(this.get(), g);
            return this.pushStack(p(g[0]) || p(d[0]) ? d : l.unique(d))
        },
        addBack: function(b) {
            return this.add(null == b ? this.prevObject : this.prevObject.filter(b))
        }
    });
    l.fn.andSelf = l.fn.addBack;
    l.each({
        parent: function(b) {
            return (b = b.parentNode) && 11 !== b.nodeType ? b : null
        },
        parents: function(b) {
            return l.dir(b, "parentNode")
        },
        parentsUntil: function(b, c, g) {
            return l.dir(b, "parentNode", g)
        },
        next: function(b) {
            return m(b, "nextSibling")
        },
        prev: function(b) {
            return m(b, "previousSibling")
        },
        nextAll: function(b) {
            return l.dir(b, "nextSibling")
        },
        prevAll: function(b) {
            return l.dir(b, "previousSibling")
        },
        nextUntil: function(b, c, g) {
            return l.dir(b, "nextSibling", g)
        },
        prevUntil: function(b, c, g) {
            return l.dir(b, "previousSibling", g)
        },
        siblings: function(b) {
            return l.sibling((b.parentNode || {}).firstChild, b)
        },
        children: function(b) {
            return l.sibling(b.firstChild)
        },
        contents: function(b) {
            return l.nodeName(b, "iframe") ? b.contentDocument || b.contentWindow.document : l.merge([], b.childNodes)
        }
    }, function(b, c) {
        l.fn[b] = function(g,
            d) {
            var q = l.map(this, c, g);
            return ed.test(b) || (d = g), d && "string" == typeof d && (q = l.filter(d, q)), q = 1 < this.length && !gd[b] ? l.unique(q) : q, 1 < this.length && fd.test(b) && (q = q.reverse()), this.pushStack(q, b, D.call(arguments).join(","))
        }
    });
    l.extend({
        filter: function(b, c, g) {
            return g && (b = ":not(" + b + ")"), 1 === c.length ? l.find.matchesSelector(c[0], b) ? [c[0]] : [] : l.find.matches(b, c)
        },
        dir: function(b, g, d) {
            var q = [];
            for (b = b[g]; b && 9 !== b.nodeType && (d === c || 1 !== b.nodeType || !l(b).is(d));) 1 === b.nodeType && q.push(b), b = b[g];
            return q
        },
        sibling: function(b,
            c) {
            for (var g = []; b; b = b.nextSibling) 1 === b.nodeType && b !== c && g.push(b);
            return g
        }
    });
    var ic = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        hd = / jQuery\d+="(?:null|\d+)"/g,
        cc = /^\s+/,
        xc = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        yc = /<([\w:]+)/,
        id = /<tbody/i,
        jd = /<|&#?\w+;/,
        kd = /<(?:script|style|link)/i,
        ld = /<(?:script|object|embed|option|style)/i,
        dc = RegExp("<(?:" + ic + ")[\\s/>]",
            "i"),
        jc = /^(?:checkbox|radio)$/,
        zc = /checked\s*(?:[^=]|=\s*.checked.)/i,
        md = /\/(java|ecma)script/i,
        nd = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
        ia = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            area: [1, "<map>", "</map>"],
            _default: [0, "", ""]
        },
        Ac = v(J),
        ec = Ac.appendChild(J.createElement("div"));
    ia.optgroup = ia.option;
    ia.tbody = ia.tfoot = ia.colgroup = ia.caption = ia.thead;
    ia.th = ia.td;
    l.support.htmlSerialize || (ia._default = [1, "X<div>", "</div>"]);
    l.fn.extend({
        text: function(b) {
            return l.access(this, function(b) {
                return b === c ? l.text(this) : this.empty().append((this[0] && this[0].ownerDocument || J).createTextNode(b))
            }, null, b, arguments.length)
        },
        wrapAll: function(b) {
            if (l.isFunction(b)) return this.each(function(c) {
                l(this).wrapAll(b.call(this, c))
            });
            if (this[0]) {
                var c = l(b, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode &&
                    c.insertBefore(this[0]);
                c.map(function() {
                    for (var b = this; b.firstChild && 1 === b.firstChild.nodeType;) b = b.firstChild;
                    return b
                }).append(this)
            }
            return this
        },
        wrapInner: function(b) {
            return l.isFunction(b) ? this.each(function(c) {
                l(this).wrapInner(b.call(this, c))
            }) : this.each(function() {
                var c = l(this),
                    g = c.contents();
                g.length ? g.wrapAll(b) : c.append(b)
            })
        },
        wrap: function(b) {
            var c = l.isFunction(b);
            return this.each(function(g) {
                l(this).wrapAll(c ? b.call(this, g) : b)
            })
        },
        unwrap: function() {
            return this.parent().each(function() {
                l.nodeName(this,
                    "body") || l(this).replaceWith(this.childNodes)
            }).end()
        },
        append: function() {
            return this.domManip(arguments, !0, function(b) {
                (1 === this.nodeType || 11 === this.nodeType) && this.appendChild(b)
            })
        },
        prepend: function() {
            return this.domManip(arguments, !0, function(b) {
                (1 === this.nodeType || 11 === this.nodeType) && this.insertBefore(b, this.firstChild)
            })
        },
        before: function() {
            if (!p(this[0])) return this.domManip(arguments, !1, function(b) {
                this.parentNode.insertBefore(b, this)
            });
            if (arguments.length) {
                var b = l.clean(arguments);
                return this.pushStack(l.merge(b,
                    this), "before", this.selector)
            }
        },
        after: function() {
            if (!p(this[0])) return this.domManip(arguments, !1, function(b) {
                this.parentNode.insertBefore(b, this.nextSibling)
            });
            if (arguments.length) {
                var b = l.clean(arguments);
                return this.pushStack(l.merge(this, b), "after", this.selector)
            }
        },
        remove: function(b, c) {
            for (var g, d = 0; null != (g = this[d]); d++)
                if (!b || l.filter(b, [g]).length)!c && 1 === g.nodeType && (l.cleanData(g.getElementsByTagName("*")), l.cleanData([g])), g.parentNode && g.parentNode.removeChild(g);
            return this
        },
        empty: function() {
            for (var b,
                c = 0; null != (b = this[c]); c++)
                for (1 === b.nodeType && l.cleanData(b.getElementsByTagName("*")); b.firstChild;) b.removeChild(b.firstChild);
            return this
        },
        clone: function(b, c) {
            return b = null == b ? !1 : b, c = null == c ? b : c, this.map(function() {
                return l.clone(this, b, c)
            })
        },
        html: function(b) {
            return l.access(this, function(b) {
                var g = this[0] || {},
                    d = 0,
                    q = this.length;
                if (b === c) return 1 === g.nodeType ? g.innerHTML.replace(hd, "") : c;
                if ("string" == typeof b && !kd.test(b) && (l.support.htmlSerialize || !dc.test(b)) && (l.support.leadingWhitespace || !cc.test(b)) &&
                    !ia[(yc.exec(b) || ["", ""])[1].toLowerCase()]) {
                    b = b.replace(xc, "<$1></$2>");
                    try {
                        for (; d < q; d++) g = this[d] || {}, 1 === g.nodeType && (l.cleanData(g.getElementsByTagName("*")), g.innerHTML = b);
                        g = 0
                    } catch (e) {}
                }
                g && this.empty().append(b)
            }, null, b, arguments.length)
        },
        replaceWith: function(b) {
            return p(this[0]) ? this.length ? this.pushStack(l(l.isFunction(b) ? b() : b), "replaceWith", b) : this : l.isFunction(b) ? this.each(function(c) {
                var g = l(this),
                    d = g.html();
                g.replaceWith(b.call(this, c, d))
            }) : ("string" != typeof b && (b = l(b).detach()), this.each(function() {
                var c =
                    this.nextSibling,
                    g = this.parentNode;
                l(this).remove();
                c ? l(c).before(b) : l(g).append(b)
            }))
        },
        detach: function(b) {
            return this.remove(b, !0)
        },
        domManip: function(b, g, d) {
            b = [].concat.apply([], b);
            var q, e, n, f = 0,
                r = b[0],
                m = [],
                D = this.length;
            if (!l.support.checkClone && 1 < D && "string" == typeof r && zc.test(r)) return this.each(function() {
                l(this).domManip(b, g, d)
            });
            if (l.isFunction(r)) return this.each(function(q) {
                var e = l(this);
                b[0] = r.call(this, q, g ? e.html() : c);
                e.domManip(b, g, d)
            });
            if (this[0]) {
                q = l.buildFragment(b, this, m);
                n = q.fragment;
                e = n.firstChild;
                1 === n.childNodes.length && (n = e);
                if (e) {
                    g = g && l.nodeName(e, "tr");
                    for (q = q.cacheable || D - 1; f < D; f++) d.call(g && l.nodeName(this[f], "table") ? this[f].getElementsByTagName("tbody")[0] || this[f].appendChild(this[f].ownerDocument.createElement("tbody")) : this[f], f === q ? n : l.clone(n, !0, !0))
                }
                n = e = null;
                m.length && l.each(m, function(b, c) {
                    c.src ? l.ajax ? l.ajax({
                        url: c.src,
                        type: "GET",
                        dataType: "script",
                        async: !1,
                        global: !1,
                        "throws": !0
                    }) : l.error("no ajax") : l.globalEval((c.text || c.textContent || c.innerHTML || "").replace(nd,
                        ""));
                    c.parentNode && c.parentNode.removeChild(c)
                })
            }
            return this
        }
    });
    l.buildFragment = function(b, g, d) {
        var q, e, n, f = b[0];
        return g = g || J, g = !g.nodeType && g[0] || g, g = g.ownerDocument || g, 1 === b.length && "string" == typeof f && 512 > f.length && g === J && "<" === f.charAt(0) && !ld.test(f) && (l.support.checkClone || !zc.test(f)) && (l.support.html5Clone || !dc.test(f)) && (e = !0, q = l.fragments[f], n = q !== c), q || (q = g.createDocumentFragment(), l.clean(b, g, q, d), e && (l.fragments[f] = n && q)), {
            fragment: q,
            cacheable: e
        }
    };
    l.fragments = {};
    l.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(b, c) {
        l.fn[b] = function(g) {
            var d, q = 0,
                e = [];
            g = l(g);
            var n = g.length;
            d = 1 === this.length && this[0].parentNode;
            if ((null == d || d && 11 === d.nodeType && 1 === d.childNodes.length) && 1 === n) return g[c](this[0]), this;
            for (; q < n; q++) d = (0 < q ? this.clone(!0) : this).get(), l(g[q])[c](d), e = e.concat(d);
            return this.pushStack(e, b, g.selector)
        }
    });
    l.extend({
        clone: function(b, c, g) {
            var d, q, e, n;
            l.support.html5Clone || l.isXMLDoc(b) || !dc.test("<" + b.nodeName +
                ">") ? n = b.cloneNode(!0) : (ec.innerHTML = b.outerHTML, ec.removeChild(n = ec.firstChild));
            if ((!l.support.noCloneEvent || !l.support.noCloneChecked) && (1 === b.nodeType || 11 === b.nodeType) && !l.isXMLDoc(b)) {
                B(b, n);
                d = z(b);
                q = z(n);
                for (e = 0; d[e]; ++e) q[e] && B(d[e], q[e])
            }
            if (c && (A(b, n), g)) {
                d = z(b);
                q = z(n);
                for (e = 0; d[e]; ++e) A(d[e], q[e])
            }
            return n
        },
        clean: function(b, c, g, d) {
            var q, e, n, f, r, m, D, j = c === J && Ac,
                u = [];
            if (!c || "undefined" == typeof c.createDocumentFragment) c = J;
            for (q = 0; null != (n = b[q]); q++)
                if ("number" == typeof n && (n += ""), n) {
                    if ("string" ==
                        typeof n)
                        if (jd.test(n)) {
                            j = j || v(c);
                            m = c.createElement("div");
                            j.appendChild(m);
                            n = n.replace(xc, "<$1></$2>");
                            e = (yc.exec(n) || ["", ""])[1].toLowerCase();
                            f = ia[e] || ia._default;
                            r = f[0];
                            for (m.innerHTML = f[1] + n + f[2]; r--;) m = m.lastChild;
                            if (!l.support.tbody) {
                                r = id.test(n);
                                f = "table" === e && !r ? m.firstChild && m.firstChild.childNodes : "<table>" === f[1] && !r ? m.childNodes : [];
                                for (e = f.length - 1; 0 <= e; --e) l.nodeName(f[e], "tbody") && !f[e].childNodes.length && f[e].parentNode.removeChild(f[e])
                            }!l.support.leadingWhitespace && cc.test(n) && m.insertBefore(c.createTextNode(cc.exec(n)[0]),
                                m.firstChild);
                            n = m.childNodes;
                            m.parentNode.removeChild(m)
                        } else n = c.createTextNode(n);
                    n.nodeType ? u.push(n) : l.merge(u, n)
                }
            m && (n = m = j = null);
            if (!l.support.appendChecked)
                for (q = 0; null != (n = u[q]); q++) l.nodeName(n, "input") ? x(n) : "undefined" != typeof n.getElementsByTagName && l.grep(n.getElementsByTagName("input"), x);
            if (g) {
                b = function(b) {
                    if (!b.type || md.test(b.type)) return d ? d.push(b.parentNode ? b.parentNode.removeChild(b) : b) : g.appendChild(b)
                };
                for (q = 0; null != (n = u[q]); q++)
                    if (!l.nodeName(n, "script") || !b(n)) g.appendChild(n),
                        "undefined" != typeof n.getElementsByTagName && (D = l.grep(l.merge([], n.getElementsByTagName("script")), b), u.splice.apply(u, [q + 1, 0].concat(D)), q += D.length)
            }
            return u
        },
        cleanData: function(b, c) {
            for (var g, d, q, e, n = 0, f = l.expando, r = l.cache, m = l.support.deleteExpando, D = l.event.special; null != (q = b[n]); n++)
                if (c || l.acceptData(q))
                    if (g = (d = q[f]) && r[d]) {
                        if (g.events)
                            for (e in g.events) D[e] ? l.event.remove(q, e) : l.removeEvent(q, e, g.handle);
                        r[d] && (delete r[d], m ? delete q[f] : q.removeAttribute ? q.removeAttribute(f) : q[f] = null, l.deletedIds.push(d))
                    }
        }
    });
    var Lb, za;
    l.uaMatch = function(b) {
        b = b.toLowerCase();
        b = /(chrome)[ \/]([\w.]+)/.exec(b) || /(webkit)[ \/]([\w.]+)/.exec(b) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(b) || /(msie) ([\w.]+)/.exec(b) || 0 > b.indexOf("compatible") && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(b) || [];
        return {
            browser: b[1] || "",
            version: b[2] || "0"
        }
    };
    Lb = l.uaMatch(g.userAgent);
    za = {};
    Lb.browser && (za[Lb.browser] = !0, za.version = Lb.version);
    za.chrome ? za.webkit = !0 : za.webkit && (za.safari = !0);
    l.browser = za;
    l.sub = function() {
        function b(c, g) {
            return new b.fn.init(c,
                g)
        }
        l.extend(!0, b, this);
        b.superclass = this;
        b.fn = b.prototype = this();
        b.fn.constructor = b;
        b.sub = this.sub;
        b.fn.init = function(g, d) {
            return d && d instanceof l && !(d instanceof b) && (d = b(d)), l.fn.init.call(this, g, d, c)
        };
        b.fn.init.prototype = b.fn;
        var c = b(J);
        return b
    };
    var ha, Ia, Ja, fc = /alpha\([^)]*\)/i,
        od = /opacity=([^)]*)/,
        pd = /^(top|right|bottom|left)$/,
        qd = /^(none|table(?!-c[ea]).+)/,
        Bc = /^margin/,
        Nc = RegExp("^(" + ba + ")(.*)$", "i"),
        vb = RegExp("^(" + ba + ")(?!px)[a-z%]+$", "i"),
        rd = RegExp("^([-+])=(" + ba + ")", "i"),
        Ob = {},
        sd = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        Cc = {
            letterSpacing: 0,
            fontWeight: 400
        },
        Aa = ["Top", "Right", "Bottom", "Left"],
        kc = ["Webkit", "O", "Moz", "ms"],
        td = l.fn.toggle;
    l.fn.extend({
        css: function(b, g) {
            return l.access(this, function(b, g, d) {
                return d !== c ? l.style(b, g, d) : l.css(b, g)
            }, b, g, 1 < arguments.length)
        },
        show: function() {
            return t(this, !0)
        },
        hide: function() {
            return t(this)
        },
        toggle: function(b, c) {
            var g = "boolean" == typeof b;
            return l.isFunction(b) && l.isFunction(c) ? td.apply(this, arguments) : this.each(function() {
                (g ? b : E(this)) ? l(this).show():
                    l(this).hide()
            })
        }
    });
    l.extend({
        cssHooks: {
            opacity: {
                get: function(b, c) {
                    if (c) {
                        var g = ha(b, "opacity");
                        return "" === g ? "1" : g
                    }
                }
            }
        },
        cssNumber: {
            fillOpacity: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": l.support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(b, g, d, q) {
            if (b && !(3 === b.nodeType || 8 === b.nodeType || !b.style)) {
                var e, n, f, r = l.camelCase(g),
                    m = b.style;
                g = l.cssProps[r] || (l.cssProps[r] = I(m, r));
                f = l.cssHooks[g] || l.cssHooks[r];
                if (d === c) return f && "get" in f && (e =
                    f.get(b, !1, q)) !== c ? e : m[g];
                n = typeof d;
                "string" === n && (e = rd.exec(d)) && (d = (e[1] + 1) * e[2] + parseFloat(l.css(b, g)), n = "number");
                if (!(null == d || "number" === n && isNaN(d)))
                    if ("number" === n && !l.cssNumber[r] && (d += "px"), !f || !("set" in f) || (d = f.set(b, d, q)) !== c) try {
                        m[g] = d
                    } catch (D) {}
            }
        },
        css: function(b, g, d, q) {
            var e, n, f, r = l.camelCase(g);
            return g = l.cssProps[r] || (l.cssProps[r] = I(b.style, r)), f = l.cssHooks[g] || l.cssHooks[r], f && "get" in f && (e = f.get(b, !0, q)), e === c && (e = ha(b, g)), "normal" === e && g in Cc && (e = Cc[g]), d || q !== c ? (n = parseFloat(e),
                d || l.isNumeric(n) ? n || 0 : e) : e
        },
        swap: function(b, c, g) {
            var d, q = {};
            for (d in c) q[d] = b.style[d], b.style[d] = c[d];
            g = g.call(b);
            for (d in c) b.style[d] = q[d];
            return g
        }
    });
    b.getComputedStyle ? ha = function(c, g) {
        var d, q, e, n, f = b.getComputedStyle(c, null),
            r = c.style;
        return f && (d = f[g], "" === d && !l.contains(c.ownerDocument, c) && (d = l.style(c, g)), vb.test(d) && Bc.test(g) && (q = r.width, e = r.minWidth, n = r.maxWidth, r.minWidth = r.maxWidth = r.width = d, d = f.width, r.width = q, r.minWidth = e, r.maxWidth = n)), d
    } : J.documentElement.currentStyle && (ha = function(b,
        c) {
        var g, d, q = b.currentStyle && b.currentStyle[c],
            l = b.style;
        return null == q && l && l[c] && (q = l[c]), vb.test(q) && !pd.test(c) && (g = l.left, d = b.runtimeStyle && b.runtimeStyle.left, d && (b.runtimeStyle.left = b.currentStyle.left), l.left = "fontSize" === c ? "1em" : q, q = l.pixelLeft + "px", l.left = g, d && (b.runtimeStyle.left = d)), "" === q ? "auto" : q
    });
    l.each(["height", "width"], function(b, c) {
        l.cssHooks[c] = {
            get: function(b, g, d) {
                if (g) return 0 === b.offsetWidth && qd.test(ha(b, "display")) ? l.swap(b, sd, function() {
                    return Q(b, c, d)
                }) : Q(b, c, d)
            },
            set: function(b,
                g, d) {
                return H(b, g, d ? L(b, c, d, l.support.boxSizing && "border-box" === l.css(b, "boxSizing")) : 0)
            }
        }
    });
    l.support.opacity || (l.cssHooks.opacity = {
        get: function(b, c) {
            return od.test((c && b.currentStyle ? b.currentStyle.filter : b.style.filter) || "") ? 0.01 * parseFloat(RegExp.$1) + "" : c ? "1" : ""
        },
        set: function(b, c) {
            var g = b.style,
                d = b.currentStyle,
                q = l.isNumeric(c) ? "alpha(opacity=" + 100 * c + ")" : "",
                e = d && d.filter || g.filter || "";
            g.zoom = 1;
            if (!(1 <= c && "" === l.trim(e.replace(fc, "")) && g.removeAttribute && (g.removeAttribute("filter"), d && !d.filter))) g.filter =
                fc.test(e) ? e.replace(fc, q) : e + " " + q
        }
    });
    l(function() {
        l.support.reliableMarginRight || (l.cssHooks.marginRight = {
            get: function(b, c) {
                return l.swap(b, {
                    display: "inline-block"
                }, function() {
                    if (c) return ha(b, "marginRight")
                })
            }
        });
        !l.support.pixelPosition && l.fn.position && l.each(["top", "left"], function(b, c) {
            l.cssHooks[c] = {
                get: function(b, g) {
                    if (g) {
                        var d = ha(b, c);
                        return vb.test(d) ? l(b).position()[c] + "px" : d
                    }
                }
            }
        })
    });
    l.expr && l.expr.filters && (l.expr.filters.hidden = function(b) {
        return 0 === b.offsetWidth && 0 === b.offsetHeight || !l.support.reliableHiddenOffsets &&
            "none" === (b.style && b.style.display || ha(b, "display"))
    }, l.expr.filters.visible = function(b) {
        return !l.expr.filters.hidden(b)
    });
    l.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(b, c) {
        l.cssHooks[b + c] = {
            expand: function(g) {
                var d = "string" == typeof g ? g.split(" ") : [g],
                    q = {};
                for (g = 0; 4 > g; g++) q[b + Aa[g] + c] = d[g] || d[g - 2] || d[0];
                return q
            }
        };
        Bc.test(b) || (l.cssHooks[b + c].set = H)
    });
    var ud = /%20/g,
        Oc = /\[\]$/,
        Dc = /\r?\n/g,
        vd = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
        wd = /^(?:select|textarea)/i;
    l.fn.extend({
        serialize: function() {
            return l.param(this.serializeArray())
        },
        serializeArray: function() {
            return this.map(function() {
                return this.elements ? l.makeArray(this.elements) : this
            }).filter(function() {
                return this.name && !this.disabled && (this.checked || wd.test(this.nodeName) || vd.test(this.type))
            }).map(function(b, c) {
                var g = l(this).val();
                return null == g ? null : l.isArray(g) ? l.map(g, function(b) {
                    return {
                        name: c.name,
                        value: b.replace(Dc, "\r\n")
                    }
                }) : {
                    name: c.name,
                    value: g.replace(Dc, "\r\n")
                }
            }).get()
        }
    });
    l.param = function(b, g) {
        var d, q = [],
            e = function(b, c) {
                c = l.isFunction(c) ? c() : null == c ? "" : c;
                q[q.length] = encodeURIComponent(b) + "=" + encodeURIComponent(c)
            };
        g === c && (g = l.ajaxSettings && l.ajaxSettings.traditional);
        if (l.isArray(b) || b.jquery && !l.isPlainObject(b)) l.each(b, function() {
            e(this.name, this.value)
        });
        else
            for (d in b) P(d, b[d], g, e);
        return q.join("&").replace(ud, "+")
    };
    var Ya, Ha, xd = /#.*$/,
        yd = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
        zd = /^(?:GET|HEAD)$/,
        Ad = /^\/\//,
        Ec = /\?/,
        Bd = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
        Cd = /([?&])_=[^&]*/,
        Fc = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
        Gc = l.fn.load,
        Pb = {},
        Hc = {},
        Ic = ["*/"] + ["*"];
    try {
        Ha = W.href
    } catch (Kd) {
        Ha = J.createElement("a"), Ha.href = "", Ha = Ha.href
    }
    Ya = Fc.exec(Ha.toLowerCase()) || [];
    l.fn.load = function(b, g, d) {
        if ("string" != typeof b && Gc) return Gc.apply(this, arguments);
        if (!this.length) return this;
        var q, e, n, f = this,
            r = b.indexOf(" ");
        return 0 <= r && (q = b.slice(r, b.length), b = b.slice(0, r)), l.isFunction(g) ? (d = g, g = c) : g && "object" == typeof g && (e = "POST"), l.ajax({
            url: b,
            type: e,
            dataType: "html",
            data: g,
            complete: function(b, c) {
                d && f.each(d, n || [b.responseText, c, b])
            }
        }).done(function(b) {
            n = arguments;
            f.html(q ? l("<div>").append(b.replace(Bd, "")).find(q) : b)
        }), this
    };
    l.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(b, c) {
        l.fn[c] = function(b) {
            return this.on(c, b)
        }
    });
    l.each(["get", "post"], function(b, g) {
        l[g] = function(b, d, q, e) {
            return l.isFunction(d) && (e = e || q, q = d, d = c), l.ajax({
                type: g,
                url: b,
                data: d,
                success: q,
                dataType: e
            })
        }
    });
    l.extend({
        getScript: function(b, g) {
            return l.get(b,
                c, g, "script")
        },
        getJSON: function(b, c, g) {
            return l.get(b, c, g, "json")
        },
        ajaxSetup: function(b, c) {
            return c ? N(b, l.ajaxSettings) : (c = b, b = l.ajaxSettings), N(b, c), b
        },
        ajaxSettings: {
            url: Ha,
            isLocal: /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/.test(Ya[1]),
            global: !0,
            type: "GET",
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            processData: !0,
            async: !0,
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                text: "text/plain",
                json: "application/json, text/javascript",
                "*": Ic
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },
            converters: {
                "* text": b.String,
                "text html": !0,
                "text json": l.parseJSON,
                "text xml": l.parseXML
            },
            flatOptions: {
                context: !0,
                url: !0
            }
        },
        ajaxPrefilter: C(Pb),
        ajaxTransport: C(Hc),
        ajax: function(b, g) {
            function d(b, g, n, m) {
                var j, s, F, W, x, J = g;
                if (2 !== G) {
                    G = 2;
                    r && clearTimeout(r);
                    f = c;
                    e = m || "";
                    U.readyState = 0 < b ? 4 : 0;
                    if (n) {
                        W = u;
                        m = U;
                        var z, p, ga, v, H = W.contents,
                            L = W.dataTypes,
                            A = W.responseFields;
                        for (p in A) p in n && (m[A[p]] = n[p]);
                        for (;
                            "*" === L[0];) L.shift(),
                            z === c && (z = W.mimeType || m.getResponseHeader("content-type"));
                        if (z)
                            for (p in H)
                                if (H[p] && H[p].test(z)) {
                                    L.unshift(p);
                                    break
                                }
                        if (L[0] in n) ga = L[0];
                        else {
                            for (p in n) {
                                if (!L[0] || W.converters[p + " " + L[0]]) {
                                    ga = p;
                                    break
                                }
                                v || (v = p)
                            }
                            ga = ga || v
                        }
                        W = n = ga ? (ga !== L[0] && L.unshift(ga), n[ga]) : void 0
                    }
                    if (200 <= b && 300 > b || 304 === b)
                        if (u.ifModified && (x = U.getResponseHeader("Last-Modified"), x && (l.lastModified[q] = x), x = U.getResponseHeader("Etag"), x && (l.etag[q] = x)), 304 === b) J = "notmodified", j = !0;
                        else {
                            var ba;
                            a: {
                                j = u;
                                s = W;
                                var ja, J = j.dataTypes.slice();
                                n = J[0];
                                z = {};
                                p = 0;
                                j.dataFilter && (s = j.dataFilter(s, j.dataType));
                                if (J[1])
                                    for (ba in j.converters) z[ba.toLowerCase()] = j.converters[ba];
                                for (; F = J[++p];)
                                    if ("*" !== F) {
                                        if ("*" !== n && n !== F) {
                                            ba = z[n + " " + F] || z["* " + F];
                                            if (!ba)
                                                for (ja in z)
                                                    if (x = ja.split(" "), x[1] === F && (ba = z[n + " " + x[0]] || z["* " + x[0]])) {
                                                        !0 === ba ? ba = z[ja] : !0 !== z[ja] && (F = x[0], J.splice(p--, 0, F));
                                                        break
                                                    }
                                            if (!0 !== ba)
                                                if (ba && j["throws"]) s = ba(s);
                                                else try {
                                                    s = ba(s)
                                                } catch (Ka) {
                                                    ba = {
                                                        state: "parsererror",
                                                        error: ba ? Ka : "No conversion from " + n + " to " + F
                                                    };
                                                    break a
                                                }
                                        }
                                        n = F
                                    }
                                ba = {
                                    state: "success",
                                    data: s
                                }
                            }
                            j = ba;
                            J = j.state;
                            s = j.data;
                            F = j.error;
                            j = !F
                        } else if (F = J, !J || b) J = "error", 0 > b && (b = 0);
                    U.status = b;
                    U.statusText = (g || J) + "";
                    j ? K.resolveWith(y, [s, J, U]) : K.rejectWith(y, [U, J, F]);
                    U.statusCode(t);
                    t = c;
                    D && R.trigger("ajax" + (j ? "Success" : "Error"), [U, u, j ? s : F]);
                    B.fireWith(y, [U, J]);
                    D && (R.trigger("ajaxComplete", [U, u]), --l.active || l.event.trigger("ajaxStop"))
                }
            }
            "object" == typeof b && (g = b, b = c);
            g = g || {};
            var q, e, n, f, r, m, D, j, u = l.ajaxSetup({}, g),
                y = u.context || u,
                R = y !== u && (y.nodeType || y instanceof l) ? l(y) : l.event,
                K = l.Deferred(),
                B = l.Callbacks("once memory"),
                t = u.statusCode || {},
                s = {},
                F = {},
                G = 0,
                W = "canceled",
                U = {
                    readyState: 0,
                    setRequestHeader: function(b, c) {
                        if (!G) {
                            var g = b.toLowerCase();
                            b = F[g] = F[g] || b;
                            s[b] = c
                        }
                        return this
                    },
                    getAllResponseHeaders: function() {
                        return 2 === G ? e : null
                    },
                    getResponseHeader: function(b) {
                        var g;
                        if (2 === G) {
                            if (!n)
                                for (n = {}; g = yd.exec(e);) n[g[1].toLowerCase()] = g[2];
                            g = n[b.toLowerCase()]
                        }
                        return g === c ? null : g
                    },
                    overrideMimeType: function(b) {
                        return G || (u.mimeType = b), this
                    },
                    abort: function(b) {
                        return b = b || W, f && f.abort(b), d(0, b), this
                    }
                };
            K.promise(U);
            U.success = U.done;
            U.error = U.fail;
            U.complete = B.add;
            U.statusCode = function(b) {
                if (b) {
                    var c;
                    if (2 > G)
                        for (c in b) t[c] = [t[c], b[c]];
                    else c = b[U.status], U.always(c)
                }
                return this
            };
            u.url = ((b || u.url) + "").replace(xd, "").replace(Ad, Ya[1] + "//");
            u.dataTypes = l.trim(u.dataType || "*").toLowerCase().split(pa);
            null == u.crossDomain && (m = Fc.exec(u.url.toLowerCase()) || !1, u.crossDomain = m && m.join(":") + (m[3] ? "" : "http:" === m[1] ? 80 : 443) !== Ya.join(":") + (Ya[3] ? "" : "http:" === Ya[1] ? 80 : 443));
            u.data && u.processData && "string" != typeof u.data &&
                (u.data = l.param(u.data, u.traditional));
            S(Pb, u, g, U);
            if (2 === G) return U;
            D = u.global;
            u.type = u.type.toUpperCase();
            u.hasContent = !zd.test(u.type);
            D && 0 === l.active++ && l.event.trigger("ajaxStart");
            if (!u.hasContent && (u.data && (u.url += (Ec.test(u.url) ? "&" : "?") + u.data, delete u.data), q = u.url, !1 === u.cache)) {
                m = l.now();
                var x = u.url.replace(Cd, "$1_=" + m);
                u.url = x + (x === u.url ? (Ec.test(u.url) ? "&" : "?") + "_=" + m : "")
            }(u.data && u.hasContent && !1 !== u.contentType || g.contentType) && U.setRequestHeader("Content-Type", u.contentType);
            u.ifModified &&
                (q = q || u.url, l.lastModified[q] && U.setRequestHeader("If-Modified-Since", l.lastModified[q]), l.etag[q] && U.setRequestHeader("If-None-Match", l.etag[q]));
            U.setRequestHeader("Accept", u.dataTypes[0] && u.accepts[u.dataTypes[0]] ? u.accepts[u.dataTypes[0]] + ("*" !== u.dataTypes[0] ? ", " + Ic + "; q=0.01" : "") : u.accepts["*"]);
            for (j in u.headers) U.setRequestHeader(j, u.headers[j]);
            if (!u.beforeSend || !1 !== u.beforeSend.call(y, U, u) && 2 !== G) {
                W = "abort";
                for (j in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) U[j](u[j]);
                if (f = S(Hc, u, g, U)) {
                    U.readyState =
                        1;
                    D && R.trigger("ajaxSend", [U, u]);
                    u.async && 0 < u.timeout && (r = setTimeout(function() {
                        U.abort("timeout")
                    }, u.timeout));
                    try {
                        G = 1, f.send(s, d)
                    } catch (J) {
                        if (2 > G) d(-1, J);
                        else throw J;
                    }
                } else d(-1, "No Transport");
                return U
            }
            return U.abort()
        },
        active: 0,
        lastModified: {},
        etag: {}
    });
    var Jc = [],
        Dd = /\?/,
        Mb = /(=)\?(?=&|$)|\?\?/,
        Ed = l.now();
    l.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var b = Jc.pop() || l.expando + "_" + Ed++;
            return this[b] = !0, b
        }
    });
    l.ajaxPrefilter("json jsonp", function(g, d, q) {
        var e, n, f, r = g.data,
            m = g.url,
            D = !1 !==
            g.jsonp,
            j = D && Mb.test(m),
            u = D && !j && "string" == typeof r && !(g.contentType || "").indexOf("application/x-www-form-urlencoded") && Mb.test(r);
        if ("jsonp" === g.dataTypes[0] || j || u) return e = g.jsonpCallback = l.isFunction(g.jsonpCallback) ? g.jsonpCallback() : g.jsonpCallback, n = b[e], j ? g.url = m.replace(Mb, "$1" + e) : u ? g.data = r.replace(Mb, "$1" + e) : D && (g.url += (Dd.test(m) ? "&" : "?") + g.jsonp + "=" + e), g.converters["script json"] = function() {
                return f || l.error(e + " was not called"), f[0]
            }, g.dataTypes[0] = "json", b[e] = function() {
                f = arguments
            },
            q.always(function() {
                b[e] = n;
                g[e] && (g.jsonpCallback = d.jsonpCallback, Jc.push(e));
                f && l.isFunction(n) && n(f[0]);
                f = n = c
            }), "script"
    });
    l.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /javascript|ecmascript/
        },
        converters: {
            "text script": function(b) {
                return l.globalEval(b), b
            }
        }
    });
    l.ajaxPrefilter("script", function(b) {
        b.cache === c && (b.cache = !1);
        b.crossDomain && (b.type = "GET", b.global = !1)
    });
    l.ajaxTransport("script", function(b) {
        if (b.crossDomain) {
            var g,
                d = J.head || J.getElementsByTagName("head")[0] || J.documentElement;
            return {
                send: function(q, l) {
                    g = J.createElement("script");
                    g.async = "async";
                    b.scriptCharset && (g.charset = b.scriptCharset);
                    g.src = b.url;
                    g.onload = g.onreadystatechange = function(b, q) {
                        if (q || !g.readyState || /loaded|complete/.test(g.readyState)) g.onload = g.onreadystatechange = null, d && g.parentNode && d.removeChild(g), g = c, q || l(200, "success")
                    };
                    d.insertBefore(g, d.firstChild)
                },
                abort: function() {
                    g && g.onload(0, 1)
                }
            }
        }
    });
    var Za, gc = b.ActiveXObject ? function() {
            for (var b in Za) Za[b](0,
                1)
        } : !1,
        Fd = 0;
    l.ajaxSettings.xhr = b.ActiveXObject ? function() {
        var c;
        if (!(c = !this.isLocal && O())) a: {
            try {
                c = new b.ActiveXObject("Microsoft.XMLHTTP");
                break a
            } catch (g) {}
            c = void 0
        }
        return c
    } : O;
    var hc = l.ajaxSettings.xhr();
    l.extend(l.support, {
        ajax: !!hc,
        cors: !!hc && "withCredentials" in hc
    });
    l.support.ajax && l.ajaxTransport(function(g) {
        if (!g.crossDomain || l.support.cors) {
            var d;
            return {
                send: function(q, e) {
                    var n, f, r = g.xhr();
                    g.username ? r.open(g.type, g.url, g.async, g.username, g.password) : r.open(g.type, g.url, g.async);
                    if (g.xhrFields)
                        for (f in g.xhrFields) r[f] =
                            g.xhrFields[f];
                    g.mimeType && r.overrideMimeType && r.overrideMimeType(g.mimeType);
                    !g.crossDomain && !q["X-Requested-With"] && (q["X-Requested-With"] = "XMLHttpRequest");
                    try {
                        for (f in q) r.setRequestHeader(f, q[f])
                    } catch (m) {}
                    r.send(g.hasContent && g.data || null);
                    d = function(b, q) {
                        var f, m, D, j, u;
                        try {
                            if (d && (q || 4 === r.readyState))
                                if (d = c, n && (r.onreadystatechange = l.noop, gc && delete Za[n]), q) 4 !== r.readyState && r.abort();
                                else {
                                    f = r.status;
                                    D = r.getAllResponseHeaders();
                                    j = {};
                                    (u = r.responseXML) && u.documentElement && (j.xml = u);
                                    try {
                                        j.text =
                                            r.responseText
                                    } catch (y) {}
                                    try {
                                        m = r.statusText
                                    } catch (R) {
                                        m = ""
                                    }!f && g.isLocal && !g.crossDomain ? f = j.text ? 200 : 404 : 1223 === f && (f = 204)
                                }
                        } catch (K) {
                            q || e(-1, K)
                        }
                        j && e(f, m, j, D)
                    };
                    g.async ? 4 === r.readyState ? setTimeout(d, 0) : (n = ++Fd, gc && (Za || (Za = {}, l(b).unload(gc)), Za[n] = d), r.onreadystatechange = d) : d()
                },
                abort: function() {
                    d && d(0, 1)
                }
            }
        }
    });
    var wb, Nb, Gd = /^(?:toggle|show|hide)$/,
        Hd = RegExp("^(?:([-+])=|)(" + ba + ")([a-z%]*)$", "i"),
        Id = /queueHooks$/,
        xb = [
            function(b, c, g) {
                var d, q, e, n, f, r, m = this,
                    D = b.style,
                    j = {},
                    u = [],
                    y = b.nodeType && E(b);
                g.queue ||
                    (f = l._queueHooks(b, "fx"), null == f.unqueued && (f.unqueued = 0, r = f.empty.fire, f.empty.fire = function() {
                        f.unqueued || r()
                    }), f.unqueued++, m.always(function() {
                        m.always(function() {
                            f.unqueued--;
                            l.queue(b, "fx").length || f.empty.fire()
                        })
                    }));
                1 === b.nodeType && ("height" in c || "width" in c) && (g.overflow = [D.overflow, D.overflowX, D.overflowY], "inline" === l.css(b, "display") && "none" === l.css(b, "float") && (!l.support.inlineBlockNeedsLayout || "inline" === M(b.nodeName) ? D.display = "inline-block" : D.zoom = 1));
                g.overflow && (D.overflow = "hidden",
                    l.support.shrinkWrapBlocks || m.done(function() {
                        D.overflow = g.overflow[0];
                        D.overflowX = g.overflow[1];
                        D.overflowY = g.overflow[2]
                    }));
                for (d in c) q = c[d], Gd.exec(q) && (delete c[d], q !== (y ? "hide" : "show") && u.push(d));
                if (q = u.length) {
                    e = l._data(b, "fxshow") || l._data(b, "fxshow", {});
                    y ? l(b).show() : m.done(function() {
                        l(b).hide()
                    });
                    m.done(function() {
                        var c;
                        l.removeData(b, "fxshow", !0);
                        for (c in j) l.style(b, c, j[c])
                    });
                    for (d = 0; d < q; d++) c = u[d], n = m.createTween(c, y ? e[c] : 0), j[c] = e[c] || l.style(b, c), c in e || (e[c] = n.start, y && (n.end = n.start,
                        n.start = "width" === c || "height" === c ? 1 : 0))
                }
            }
        ],
        $a = {
            "*": [
                function(b, c) {
                    var g, d, q = this.createTween(b, c),
                        e = Hd.exec(c),
                        n = q.cur(),
                        f = +n || 0,
                        r = 1,
                        m = 20;
                    if (e) {
                        g = +e[2];
                        d = e[3] || (l.cssNumber[b] ? "" : "px");
                        if ("px" !== d && f) {
                            f = l.css(q.elem, b, !0) || g || 1;
                            do r = r || ".5", f /= r, l.style(q.elem, b, f + d); while (r !== (r = q.cur() / n) && 1 !== r && --m)
                        }
                        q.unit = d;
                        q.start = f;
                        q.end = e[1] ? f + (e[1] + 1) * g : g
                    }
                    return q
                }
            ]
        };
    l.Animation = l.extend(T, {
        tweener: function(b, c) {
            l.isFunction(b) ? (c = b, b = ["*"]) : b = b.split(" ");
            for (var g, d = 0, q = b.length; d < q; d++) g = b[d], $a[g] = $a[g] || [], $a[g].unshift(c)
        },
        prefilter: function(b, c) {
            c ? xb.unshift(b) : xb.push(b)
        }
    });
    l.Tween = n;
    n.prototype = {
        constructor: n,
        init: function(b, c, g, d, q, e) {
            this.elem = b;
            this.prop = g;
            this.easing = q || "swing";
            this.options = c;
            this.start = this.now = this.cur();
            this.end = d;
            this.unit = e || (l.cssNumber[g] ? "" : "px")
        },
        cur: function() {
            var b = n.propHooks[this.prop];
            return b && b.get ? b.get(this) : n.propHooks._default.get(this)
        },
        run: function(b) {
            var c, g = n.propHooks[this.prop];
            return this.options.duration ? this.pos = c = l.easing[this.easing](b, this.options.duration *
                b, 0, 1, this.options.duration) : this.pos = c = b, this.now = (this.end - this.start) * c + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), g && g.set ? g.set(this) : n.propHooks._default.set(this), this
        }
    };
    n.prototype.init.prototype = n.prototype;
    n.propHooks = {
        _default: {
            get: function(b) {
                var c;
                return null == b.elem[b.prop] || b.elem.style && null != b.elem.style[b.prop] ? (c = l.css(b.elem, b.prop, !1, ""), !c || "auto" === c ? 0 : c) : b.elem[b.prop]
            },
            set: function(b) {
                l.fx.step[b.prop] ? l.fx.step[b.prop](b) : b.elem.style &&
                    (null != b.elem.style[l.cssProps[b.prop]] || l.cssHooks[b.prop]) ? l.style(b.elem, b.prop, b.now + b.unit) : b.elem[b.prop] = b.now
            }
        }
    };
    n.propHooks.scrollTop = n.propHooks.scrollLeft = {
        set: function(b) {
            b.elem.nodeType && b.elem.parentNode && (b.elem[b.prop] = b.now)
        }
    };
    l.each(["toggle", "show", "hide"], function(b, c) {
        var g = l.fn[c];
        l.fn[c] = function(d, q, e) {
            return null == d || "boolean" == typeof d || !b && l.isFunction(d) && l.isFunction(q) ? g.apply(this, arguments) : this.animate(y(c, !0), d, q, e)
        }
    });
    l.fn.extend({
        fadeTo: function(b, c, g, d) {
            return this.filter(E).css("opacity",
                0).show().end().animate({
                opacity: c
            }, b, g, d)
        },
        animate: function(b, c, g, d) {
            var q = l.isEmptyObject(b),
                e = l.speed(c, g, d);
            c = function() {
                var c = T(this, l.extend({}, b), e);
                q && c.stop(!0)
            };
            return q || !1 === e.queue ? this.each(c) : this.queue(e.queue, c)
        },
        stop: function(b, g, d) {
            var q = function(b) {
                var c = b.stop;
                delete b.stop;
                c(d)
            };
            return "string" != typeof b && (d = g, g = b, b = c), g && !1 !== b && this.queue(b || "fx", []), this.each(function() {
                var c = !0,
                    g = null != b && b + "queueHooks",
                    e = l.timers,
                    n = l._data(this);
                if (g) n[g] && n[g].stop && q(n[g]);
                else
                    for (g in n) n[g] &&
                        n[g].stop && Id.test(g) && q(n[g]);
                for (g = e.length; g--;) e[g].elem === this && (null == b || e[g].queue === b) && (e[g].anim.stop(d), c = !1, e.splice(g, 1));
                (c || !d) && l.dequeue(this, b)
            })
        }
    });
    l.each({
        slideDown: y("show"),
        slideUp: y("hide"),
        slideToggle: y("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(b, c) {
        l.fn[b] = function(b, g, d) {
            return this.animate(c, b, g, d)
        }
    });
    l.speed = function(b, c, g) {
        var d = b && "object" == typeof b ? l.extend({}, b) : {
            complete: g || !g && c || l.isFunction(b) && b,
            duration: b,
            easing: g && c || c && !l.isFunction(c) && c
        };
        d.duration = l.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in l.fx.speeds ? l.fx.speeds[d.duration] : l.fx.speeds._default;
        if (null == d.queue || !0 === d.queue) d.queue = "fx";
        return d.old = d.complete, d.complete = function() {
            l.isFunction(d.old) && d.old.call(this);
            d.queue && l.dequeue(this, d.queue)
        }, d
    };
    l.easing = {
        linear: function(b) {
            return b
        },
        swing: function(b) {
            return 0.5 - Math.cos(b * Math.PI) / 2
        }
    };
    l.timers = [];
    l.fx = n.prototype.init;
    l.fx.tick = function() {
        for (var b, c = l.timers,
            g = 0; g < c.length; g++) b = c[g], !b() && c[g] === b && c.splice(g--, 1);
        c.length || l.fx.stop()
    };
    l.fx.timer = function(b) {
        b() && l.timers.push(b) && !Nb && (Nb = setInterval(l.fx.tick, l.fx.interval))
    };
    l.fx.interval = 13;
    l.fx.stop = function() {
        clearInterval(Nb);
        Nb = null
    };
    l.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    l.fx.step = {};
    l.expr && l.expr.filters && (l.expr.filters.animated = function(b) {
        return l.grep(l.timers, function(c) {
            return b === c.elem
        }).length
    });
    var Kc = /^(?:body|html)$/i;
    l.fn.offset = function(b) {
        if (arguments.length) return b ===
            c ? this : this.each(function(c) {
                l.offset.setOffset(this, b, c)
            });
        var g, d, q, e, n, f, r, m = {
                top: 0,
                left: 0
            },
            D = this[0],
            j = D && D.ownerDocument;
        if (j) return (d = j.body) === D ? l.offset.bodyOffset(D) : (g = j.documentElement, l.contains(g, D) ? ("undefined" != typeof D.getBoundingClientRect && (m = D.getBoundingClientRect()), q = F(j), e = g.clientTop || d.clientTop || 0, n = g.clientLeft || d.clientLeft || 0, f = q.pageYOffset || g.scrollTop, r = q.pageXOffset || g.scrollLeft, {
            top: m.top + f - e,
            left: m.left + r - n
        }) : m)
    };
    l.offset = {
        bodyOffset: function(b) {
            var c = b.offsetTop,
                g = b.offsetLeft;
            return l.support.doesNotIncludeMarginInBodyOffset && (c += parseFloat(l.css(b, "marginTop")) || 0, g += parseFloat(l.css(b, "marginLeft")) || 0), {
                top: c,
                left: g
            }
        },
        setOffset: function(b, c, g) {
            var d = l.css(b, "position");
            "static" === d && (b.style.position = "relative");
            var q = l(b),
                e = q.offset(),
                n = l.css(b, "top"),
                f = l.css(b, "left"),
                r = {},
                m = {},
                D, j;
            ("absolute" === d || "fixed" === d) && -1 < l.inArray("auto", [n, f]) ? (m = q.position(), D = m.top, j = m.left) : (D = parseFloat(n) || 0, j = parseFloat(f) || 0);
            l.isFunction(c) && (c = c.call(b, g, e));
            null !=
                c.top && (r.top = c.top - e.top + D);
            null != c.left && (r.left = c.left - e.left + j);
            "using" in c ? c.using.call(b, r) : q.css(r)
        }
    };
    l.fn.extend({
        position: function() {
            if (this[0]) {
                var b = this[0],
                    c = this.offsetParent(),
                    g = this.offset(),
                    d = Kc.test(c[0].nodeName) ? {
                        top: 0,
                        left: 0
                    } : c.offset();
                return g.top -= parseFloat(l.css(b, "marginTop")) || 0, g.left -= parseFloat(l.css(b, "marginLeft")) || 0, d.top += parseFloat(l.css(c[0], "borderTopWidth")) || 0, d.left += parseFloat(l.css(c[0], "borderLeftWidth")) || 0, {
                    top: g.top - d.top,
                    left: g.left - d.left
                }
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var b =
                    this.offsetParent || J.body; b && !Kc.test(b.nodeName) && "static" === l.css(b, "position");) b = b.offsetParent;
                return b || J.body
            })
        }
    });
    l.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(b, g) {
        var d = /Y/.test(g);
        l.fn[b] = function(q) {
            return l.access(this, function(b, q, e) {
                var n = F(b);
                if (e === c) return n ? g in n ? n[g] : n.document.documentElement[q] : b[q];
                n ? n.scrollTo(d ? l(n).scrollLeft() : e, d ? e : l(n).scrollTop()) : b[q] = e
            }, b, q, arguments.length, null)
        }
    });
    l.each({
        Height: "height",
        Width: "width"
    }, function(b, g) {
        l.each({
            padding: "inner" +
                b,
            content: g,
            "": "outer" + b
        }, function(d, q) {
            l.fn[q] = function(q, e) {
                var n = arguments.length && (d || "boolean" != typeof q),
                    f = d || (!0 === q || !0 === e ? "margin" : "border");
                return l.access(this, function(g, d, q) {
                    var e;
                    return l.isWindow(g) ? g.document.documentElement["client" + b] : 9 === g.nodeType ? (e = g.documentElement, Math.max(g.body["scroll" + b], e["scroll" + b], g.body["offset" + b], e["offset" + b], e["client" + b])) : q === c ? l.css(g, d, q, f) : l.style(g, d, q, f)
                }, g, n ? q : c, n, null)
            }
        })
    });
    b.jQuery = b.$ = l;
    "function" == typeof define && define.amd && define.amd.jQuery &&
        define("jquery", [], function() {
            return l
        })
})(window);
var portraitMode = !1,
    mobilePortraitWidth = 480,
    mobilePortraitHeight = 640,
    mobileLandscapeWidth = 640,
    mobileLandscapeHeight = 480,
    mobileWidth = portraitMode ? mobilePortraitWidth : mobileLandscapeWidth,
    mobileHeight = portraitMode ? mobilePortraitHeight : mobileLandscapeHeight,
    desktopWidth = 640,
    desktopHeight = 480,
    w, h, multiplier, destW, destH, dynamicClickableEntityDivs = {},
    coreDivsToResize = ["game", "play", "orientate"],
    advancedDivsToResize = {/*
        MobileAdInGamePreroll: {
            "box-width": _SETTINGS.Ad.Mobile.Preroll.Width + 2,
            "box-height": _SETTINGS.Ad.Mobile.Preroll.Height +
                20
        },
        MobileAdInGameEnd: {
            "box-width": _SETTINGS.Ad.Mobile.End.Width + 2,
            "box-height": _SETTINGS.Ad.Mobile.End.Height + 20
        },
        MobileAdInGamePreroll2: {
            "box-width": _SETTINGS.Ad.Mobile.Preroll.Width + 2,
            "box-height": _SETTINGS.Ad.Mobile.Preroll.Height + 20
        },
        MobileAdInGameEnd2: {
            "box-width": _SETTINGS.Ad.Mobile.End.Width + 2,
            "box-height": _SETTINGS.Ad.Mobile.End.Height + 20
        },
        MobileAdInGamePreroll3: {
            "box-width": _SETTINGS.Ad.Mobile.Preroll.Width + 2,
            "box-height": _SETTINGS.Ad.Mobile.Preroll.Height + 20
        },
        MobileAdInGameEnd3: {
            "box-width": _SETTINGS.Ad.Mobile.End.Width +
                2,
            "box-height": _SETTINGS.Ad.Mobile.End.Height + 20
        }*/
    };

function adjustLayers(b) {
    for (i = 0; i < coreDivsToResize.length; i++) ig.ua.mobile ? ($("#" + coreDivsToResize[i]).width(w), $("#" + coreDivsToResize[i]).height(h)) : ($("#" + coreDivsToResize[i]).width(destW), $("#" + coreDivsToResize[i]).height(destH), $("#" + coreDivsToResize[i]).css("left", b ? 0 : w / 2 - destW / 2));
    for (key in advancedDivsToResize) try {
        $("#" + key).width(w), $("#" + key).height(h), $("#" + key + "-Box").css("left", (w - advancedDivsToResize[key]["box-width"]) / 2), $("#" + key + "-Box").css("top", (h - advancedDivsToResize[key]["box-height"]) /
            2)
    } catch (c) {
        console.log(c)
    }
    $("#ajaxbar").width(w);
    $("#ajaxbar").height(h)
}

function sizeHandler() {
    if ($("#game")) {
        w = window.innerWidth;
        h = window.innerHeight;
        ig.ua.mobile ? (multiplier = Math.min(h / mobileHeight, w / mobileWidth), destW = mobileWidth * multiplier, destH = mobileHeight * multiplier) : (multiplier = Math.min(h / desktopHeight, w / desktopWidth), destW = desktopWidth * multiplier, destH = desktopHeight * multiplier);
        widthRatio = window.innerWidth / mobileWidth;
        heightRatio = window.innerHeight / mobileHeight;
        adjustLayers();
        window.scrollTo(0, 1);
        for (var b = navigator.userAgent.split(" "), c = 0; c < b.length; c++) b[c].substr(0,
            8);
        navigator.userAgent.indexOf("wv");
        navigator.userAgent.indexOf("SamsungBrowser")
    }
}

function orientationHandler() {
    console.log("changing orientation ...");
    ig.ua.mobile && ((portraitMode ? window.innerHeight < window.innerWidth : window.innerHeight > window.innerWidth) ? ($("#orientate").show(), $("#game").hide()) : ($("#orientate").hide(), $("#game").show()));
    sizeHandler()
}

function fixSamsungHandler() {
    ig.ua.android && !(4.2 > parseFloat(navigator.userAgent.slice(navigator.userAgent.indexOf("Android") + 8, navigator.userAgent.indexOf("Android") + 11))) && (!(0 > navigator.userAgent.indexOf("GT")) && !(0 < navigator.userAgent.indexOf("Chrome")) && !(0 < navigator.userAgent.indexOf("Firefox"))) && (document.addEventListener("touchstart", function(b) {
        b.preventDefault();
        return !1
    }, !1), document.addEventListener("touchmove", function(b) {
        b.preventDefault();
        return !1
    }, !1), document.addEventListener("touchend",
        function(b) {
            b.preventDefault();
            return !1
        }, !1))
}
window.addEventListener("resize", function() {
    orientationHandler()
}, !1);
window.addEventListener("orientationchange", function() {
    orientationHandler()
}, !1);
document.ontouchmove = function(b) {
    window.scrollTo(0, 1);
    b.preventDefault()
};

function getInternetExplorerVersion() {
    var b = -1;
    "Microsoft Internet Explorer" == navigator.appName && null != /MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent) && (b = parseFloat(RegExp.$1));
    return b
}
var ie = getInternetExplorerVersion();

function getQueryVariable(b) {
    for (var c = window.location.search.substring(1).split("&"), d = 0; d < c.length; d++) {
        var e = c[d].split("=");
        if (decodeURIComponent(e[0]) == b) return decodeURIComponent(e[1])
    }
}
this.jukebox = {};
jukebox.Player = function(b, c) {
    this.id = ++jukebox.__jukeboxId;
    this.origin = c || null;
    this.settings = {};
    for (var d in this.defaults) this.settings[d] = this.defaults[d];
    if ("[object Object]" === Object.prototype.toString.call(b))
        for (var e in b) this.settings[e] = b[e];
    "[object Function]" === Object.prototype.toString.call(jukebox.Manager) && (jukebox.Manager = new jukebox.Manager);
    this.resource = this.isPlaying = null;
    this.resource = "[object Object]" === Object.prototype.toString.call(jukebox.Manager) ? jukebox.Manager.getPlayableResource(this.settings.resources) :
        this.settings.resources[0] || null;
    if (null === this.resource) throw "Your browser can't playback the given resources - or you have missed to include jukebox.Manager";
    this.__init();
    return this
};
jukebox.__jukeboxId = 0;
jukebox.Player.prototype = {
    defaults: {
        resources: [],
        autoplay: !1,
        spritemap: {},
        flashMediaElement: "./swf/FlashMediaElement.swf",
        timeout: 1E3
    },
    __addToManager: function() {
        !0 !== this.__wasAddedToManager && (jukebox.Manager.add(this), this.__wasAddedToManager = !0)
    },
    __init: function() {
        var b = this,
            c = this.settings,
            d = {},
            e;
        jukebox.Manager && void 0 !== jukebox.Manager.features && (d = jukebox.Manager.features);
        if (!0 === d.html5audio) {
            this.context = new Audio;
            this.context.src = this.resource;
            if (null === this.origin) {
                var f = function(c) {
                    b.__addToManager(c)
                };
                this.context.addEventListener("canplaythrough", f, !0);
                window.setTimeout(function() {
                    b.context.removeEventListener("canplaythrough", f, !0);
                    f("timeout")
                }, c.timeout)
            }
            this.context.autobuffer = !0;
            this.context.preload = !0;
            for (e in this.HTML5API) this[e] = this.HTML5API[e];
            1 < d.channels ? !0 === c.autoplay ? this.context.autoplay = !0 : void 0 !== c.spritemap[c.autoplay] && this.play(c.autoplay) : 1 === d.channels && void 0 !== c.spritemap[c.autoplay] && (this.backgroundMusic = c.spritemap[c.autoplay], this.backgroundMusic.started = Date.now ?
                Date.now() : +new Date, this.play(c.autoplay));
            1 == d.channels && !0 !== c.canPlayBackground && (window.addEventListener("pagehide", function() {
                null !== b.isPlaying && (b.pause(), b.__wasAutoPaused = !0)
            }), window.addEventListener("pageshow", function() {
                b.__wasAutoPaused && (b.resume(), delete b._wasAutoPaused)
            }))
        } else if (!0 === d.flashaudio) {
            for (e in this.FLASHAPI) this[e] = this.FLASHAPI[e];
            d = ["id=jukebox-flashstream-" + this.id, "autoplay=" + c.autoplay, "file=" + window.encodeURIComponent(this.resource)];
            this.__initFlashContext(d);
            !0 === c.autoplay ? this.play(0) : c.spritemap[c.autoplay] && this.play(c.autoplay)
        } else throw "Your Browser does not support Flash Audio or HTML5 Audio.";
    },
    __initFlashContext: function(b) {
        var c, d = this.settings.flashMediaElement,
            e, f = {
                flashvars: b.join("&"),
                quality: "high",
                bgcolor: "#000000",
                wmode: "transparent",
                allowscriptaccess: "always",
                allowfullscreen: "true"
            };
        if (navigator.userAgent.match(/MSIE/)) {
            c = document.createElement("div");
            document.getElementsByTagName("body")[0].appendChild(c);
            var j = document.createElement("object");
            j.id = "jukebox-flashstream-" + this.id;
            j.setAttribute("type", "application/x-shockwave-flash");
            j.setAttribute("classid", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000");
            j.setAttribute("width", "0");
            j.setAttribute("height", "0");
            f.movie = d + "?x=" + (Date.now ? Date.now() : +new Date);
            f.flashvars = b.join("&amp;");
            for (e in f) b = document.createElement("param"), b.setAttribute("name", e), b.setAttribute("value", f[e]), j.appendChild(b);
            c.outerHTML = j.outerHTML;
            this.context = document.getElementById("jukebox-flashstream-" + this.id)
        } else {
            c =
                document.createElement("embed");
            c.id = "jukebox-flashstream-" + this.id;
            c.setAttribute("type", "application/x-shockwave-flash");
            c.setAttribute("width", "100");
            c.setAttribute("height", "100");
            f.play = !1;
            f.loop = !1;
            f.src = d + "?x=" + (Date.now ? Date.now() : +new Date);
            for (e in f) c.setAttribute(e, f[e]);
            document.getElementsByTagName("body")[0].appendChild(c);
            this.context = c
        }
    },
    backgroundHackForiOS: function() {
        if (void 0 !== this.backgroundMusic) {
            var b = Date.now ? Date.now() : +new Date;
            void 0 === this.backgroundMusic.started ? (this.backgroundMusic.started =
                b, this.setCurrentTime(this.backgroundMusic.start)) : (this.backgroundMusic.lastPointer = (b - this.backgroundMusic.started) / 1E3 % (this.backgroundMusic.end - this.backgroundMusic.start) + this.backgroundMusic.start, this.play(this.backgroundMusic.lastPointer))
        }
    },
    play: function(b, c) {
        if (null !== this.isPlaying && !0 !== c) void 0 !== jukebox.Manager && jukebox.Manager.addToQueue(b, this.id);
        else {
            var d = this.settings.spritemap,
                e;
            if (void 0 !== d[b]) e = d[b].start;
            else if ("number" === typeof b) {
                e = b;
                for (var f in d)
                    if (e >= d[f].start && e <=
                        d[f].end) {
                        b = f;
                        break
                    }
            }
            void 0 !== e && "[object Object]" === Object.prototype.toString.call(d[b]) && (this.isPlaying = this.settings.spritemap[b], this.context.play && this.context.play(), this.wasReady = this.setCurrentTime(e))
        }
    },
    stop: function() {
        this.__lastPosition = 0;
        this.isPlaying = null;
        this.backgroundMusic ? this.backgroundHackForiOS() : this.context.pause();
        return !0
    },
    pause: function() {
        this.isPlaying = null;
        this.__lastPosition = this.getCurrentTime();
        this.context.pause();
        return this.__lastPosition
    },
    resume: function(b) {
        b = "number" ===
            typeof b ? b : this.__lastPosition;
        if (null !== b) return this.play(b), this.__lastPosition = null, !0;
        this.context.play();
        return !1
    },
    HTML5API: {
        getVolume: function() {
            return this.context.volume || 1
        },
        setVolume: function(b) {
            this.context.volume = b;
            return 1E-4 > Math.abs(this.context.volume - b) ? !0 : !1
        },
        getCurrentTime: function() {
            return this.context.currentTime || 0
        },
        setCurrentTime: function(b) {
            try {
                return this.context.currentTime = b, !0
            } catch (c) {
                return !1
            }
        }
    },
    FLASHAPI: {
        getVolume: function() {
            return this.context && "function" === typeof this.context.getVolume ?
                this.context.getVolume() : 1
        },
        setVolume: function(b) {
            return this.context && "function" === typeof this.context.setVolume ? (this.context.setVolume(b), !0) : !1
        },
        getCurrentTime: function() {
            return this.context && "function" === typeof this.context.getCurrentTime ? this.context.getCurrentTime() : 0
        },
        setCurrentTime: function(b) {
            return this.context && "function" === typeof this.context.setCurrentTime ? this.context.setCurrentTime(b) : !1
        }
    }
};
if (void 0 === this.jukebox) throw "jukebox.Manager requires jukebox.Player (Player.js) to run properly.";
jukebox.Manager = function(b) {
    this.features = {};
    this.codecs = {};
    this.__players = {};
    this.__playersLength = 0;
    this.__clones = {};
    this.__queue = [];
    this.settings = {};
    for (var c in this.defaults) this.settings[c] = this.defaults[c];
    if ("[object Object]" === Object.prototype.toString.call(b))
        for (var d in b) this.settings[d] = b[d];
    this.__detectFeatures();
    jukebox.Manager.__initialized = !1 === this.settings.useGameLoop ? window.setInterval(function() {
        jukebox.Manager.loop()
    }, 20) : !0
};
jukebox.Manager.prototype = {
    defaults: {
        useFlash: !1,
        useGameLoop: !1
    },
    __detectFeatures: function() {
        var b = window.Audio && new Audio;
        if (b && b.canPlayType && !1 === this.settings.useFlash) {
            for (var c = [{
                    e: "3gp",
                    m: ["audio/3gpp", "audio/amr"]
                }, {
                    e: "aac",
                    m: ["audio/aac", "audio/aacp"]
                }, {
                    e: "amr",
                    m: ["audio/amr", "audio/3gpp"]
                }, {
                    e: "caf",
                    m: ["audio/IMA-ADPCM", "audio/x-adpcm", 'audio/x-aiff; codecs="IMA-ADPCM, ADPCM"']
                }, {
                    e: "m4a",
                    m: 'audio/mp4{audio/mp4; codecs="mp4a.40.2,avc1.42E01E"{audio/mpeg4{audio/mpeg4-generic{audio/mp4a-latm{audio/MP4A-LATM{audio/x-m4a'.split("{")
                }, {
                    e: "mp3",
                    m: ["audio/mp3", "audio/mpeg", 'audio/mpeg; codecs="mp3"', "audio/MPA", "audio/mpa-robust"]
                }, {
                    e: "mpga",
                    m: ["audio/MPA", "audio/mpa-robust", "audio/mpeg", "video/mpeg"]
                }, {
                    e: "mp4",
                    m: ["audio/mp4", "video/mp4"]
                }, {
                    e: "ogg",
                    m: ["application/ogg", "audio/ogg", 'audio/ogg; codecs="theora, vorbis"', "video/ogg", 'video/ogg; codecs="theora, vorbis"']
                }, {
                    e: "wav",
                    m: ["audio/wave", "audio/wav", 'audio/wav; codecs="1"', "audio/x-wav", "audio/x-pn-wav"]
                }, {
                    e: "webm",
                    m: ["audio/webm", 'audio/webm; codecs="vorbis"', "video/webm"]
                }],
                d, e, f = 0, j = c.length; f < j; f++)
                if (e = c[f].e, c[f].m.length && "object" === typeof c[f].m)
                    for (var p = 0, m = c[f].m.length; p < m; p++)
                        if (d = c[f].m[p], "" !== b.canPlayType(d)) {
                            this.codecs[e] = d;
                            break
                        } else this.codecs[e] || (this.codecs[e] = !1);
            this.features.html5audio = !(!this.codecs.mp3 && !this.codecs.ogg && !this.codecs.webm && !this.codecs.wav);
            this.features.channels = 8;
            b.volume = 0.1337;
            this.features.volume = !!(1E-4 > Math.abs(b.volume - 0.1337));
            navigator.userAgent.match(/iPhone|iPod|iPad/i) && (this.features.channels = 1)
        }
        this.features.flashaudio = !!navigator.mimeTypes["application/x-shockwave-flash"] || !!navigator.plugins["Shockwave Flash"] || !1;
        if (window.ActiveXObject) try {
            new ActiveXObject("ShockwaveFlash.ShockwaveFlash.10"), this.features.flashaudio = !0
        } catch (s) {}!0 === this.settings.useFlash && (this.features.flashaudio = !0);
        !0 === this.features.flashaudio && !this.features.html5audio && (this.codecs.mp3 = "audio/mp3", this.codecs.mpga = "audio/mpeg", this.codecs.mp4 = "audio/mp4", this.codecs.m4a = "audio/mp4", this.codecs["3gp"] = "audio/3gpp", this.codecs.amr = "audio/amr",
            this.features.volume = !0, this.features.channels = 1)
    },
    __getPlayerById: function(b) {
        return this.__players && void 0 !== this.__players[b] ? this.__players[b] : null
    },
    __getClone: function(b, c) {
        for (var d in this.__clones) {
            var e = this.__clones[d];
            if (null === e.isPlaying && e.origin === b) return e
        }
        if ("[object Object]" === Object.prototype.toString.call(c)) {
            d = {};
            for (var f in c) d[f] = c[f];
            d.autoplay = !1;
            f = new jukebox.Player(d, b);
            f.isClone = !0;
            f.wasReady = !1;
            return this.__clones[f.id] = f
        }
        return null
    },
    loop: function() {
        if (0 !== this.__playersLength)
            if (this.__queue.length &&
                this.__playersLength < this.features.channels) {
                var b = this.__queue[0],
                    c = this.__getPlayerById(b.origin);
                if (null !== c) {
                    var d = this.__getClone(b.origin, c.settings);
                    null !== d && (!0 === this.features.volume && (c = this.__players[b.origin]) && d.setVolume(c.getVolume()), this.add(d), d.play(b.pointer, !0))
                }
                this.__queue.splice(0, 1)
            } else
                for (d in this.__queue.length && 1 === this.features.channels && (b = this.__queue[0], c = this.__getPlayerById(b.origin), null !== c && c.play(b.pointer, !0), this.__queue.splice(0, 1)), this.__players) b = this.__players[d],
                    c = b.getCurrentTime() || 0, b.isPlaying && !1 === b.wasReady ? b.wasReady = b.setCurrentTime(b.isPlaying.start) : b.isPlaying && !0 === b.wasReady ? c > b.isPlaying.end && (!0 === b.isPlaying.loop ? b.play(b.isPlaying.start, !0) : b.stop()) : b.isClone && null === b.isPlaying ? this.remove(b) : void 0 !== b.backgroundMusic && null === b.isPlaying && c > b.backgroundMusic.end && b.backgroundHackForiOS()
    },
    getPlayableResource: function(b) {
        "[object Array]" !== Object.prototype.toString.call(b) && (b = [b]);
        for (var c = 0, d = b.length; c < d; c++) {
            var e = b[c],
                f = e.match(/\.([^\.]*)$/)[1];
            if (f && this.codecs[f]) return e
        }
        return null
    },
    add: function(b) {
        return b instanceof jukebox.Player && void 0 === this.__players[b.id] ? (this.__playersLength++, this.__players[b.id] = b, !0) : !1
    },
    remove: function(b) {
        return b instanceof jukebox.Player && void 0 !== this.__players[b.id] ? (this.__playersLength--, delete this.__players[b.id], !0) : !1
    },
    addToQueue: function(b, c) {
        return ("string" === typeof b || "number" === typeof b) && void 0 !== this.__players[c] ? (this.__queue.push({
            pointer: b,
            origin: c
        }), !0) : !1
    }
};
(function() {
    var b = {},
        c = null,
        d = !0,
        e = !1;
    if ("undefined" !== typeof AudioContext) c = new AudioContext;
    else if ("undefined" !== typeof webkitAudioContext) c = new webkitAudioContext;
    else if ("undefined" !== typeof Audio) {
        d = !1;
        try {
            new Audio
        } catch (f) {
            e = !0
        }
    } else d = !1, e = !0; if (d) {
        var j = "undefined" === typeof c.createGain ? c.createGainNode() : c.createGain();
        j.gain.value = 1;
        j.connect(c.destination)
    }
    var p = function() {
        this._volume = 1;
        this._muted = !1;
        this.usingWebAudio = d;
        this.noAudio = e;
        this._howls = []
    };
    p.prototype = {
        volume: function(b) {
            b =
                parseFloat(b);
            if (0 <= b && 1 >= b) {
                this._volume = b;
                d && (j.gain.value = b);
                for (var c in this._howls)
                    if (this._howls.hasOwnProperty(c) && !1 === this._howls[c]._webAudio)
                        for (b = 0; b < this._howls[c]._audioNode.length; b++) this._howls[c]._audioNode[b].volume = this._howls[c]._volume * this._volume;
                return this
            }
            return d ? j.gain.value : this._volume
        },
        mute: function() {
            this._setMuted(!0);
            return this
        },
        unmute: function() {
            this._setMuted(!1);
            return this
        },
        _setMuted: function(b) {
            this._muted = b;
            d && (j.gain.value = b ? 0 : this._volume);
            for (var c in this._howls)
                if (this._howls.hasOwnProperty(c) &&
                    !1 === this._howls[c]._webAudio)
                    for (var e = 0; e < this._howls[c]._audioNode.length; e++) this._howls[c]._audioNode[e].muted = b
        }
    };
    var m = new p,
        p = null;
    if (!e) var p = new Audio,
        s = {
            mp3: !!p.canPlayType("audio/mpeg;").replace(/^no$/, ""),
            opus: !!p.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
            ogg: !!p.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
            wav: !!p.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ""),
            m4a: !!(p.canPlayType("audio/x-m4a;") || p.canPlayType("audio/aac;")).replace(/^no$/,
                ""),
            mp4: !!(p.canPlayType("audio/x-mp4;") || p.canPlayType("audio/aac;")).replace(/^no$/, ""),
            weba: !!p.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")
        };
    var v = function(b) {
        this._autoplay = b.autoplay || !1;
        this._buffer = b.buffer || !1;
        this._duration = b.duration || 0;
        this._format = b.format || null;
        this._loop = b.loop || !1;
        this._loaded = !1;
        this._sprite = b.sprite || {};
        this._src = b.src || "";
        this._pos3d = b.pos3d || [0, 0, -0.5];
        this._volume = void 0 !== b.volume ? b.volume : 1;
        this._urls = b.urls || [];
        this._rate = b.rate || 1;
        this._onload = [b.onload || function() {}];
        this._onloaderror = [b.onloaderror || function() {}];
        this._onend = [b.onend || function() {}];
        this._onpause = [b.onpause || function() {}];
        this._onplay = [b.onplay || function() {}];
        this._onendTimer = [];
        this._webAudio = d && !this._buffer;
        this._audioNode = [];
        this._webAudio && this._setupAudioNode();
        m._howls.push(this);
        this.load()
    };
    v.prototype = {
        load: function() {
            var d = this,
                f = null;
            if (!e) {
                for (var j = 0; j < d._urls.length; j++) {
                    var p, v;
                    if (d._format) p = d._format;
                    else if (v = d._urls[j].toLowerCase().split("?")[0], p =
                        (p = v.match(/.+\.([^?]+)(\?|$)/)) && 2 <= p.length ? p : v.match(/data\:audio\/([^?]+);/)) p = p[1];
                    else {
                        d.on("loaderror");
                        return
                    } if (s[p]) {
                        f = d._urls[j];
                        break
                    }
                }
                if (f) {
                    d._src = f;
                    if (d._webAudio) {
                        var t = f;
                        if (t in b) d._duration = b[t].duration, A(d);
                        else {
                            var H = new XMLHttpRequest;
                            H.open("GET", t, !0);
                            H.responseType = "arraybuffer";
                            H.onload = function() {
                                c.decodeAudioData(H.response, function(c) {
                                    c && (b[t] = c, A(d, c))
                                }, function() {
                                    d.on("loaderror")
                                })
                            };
                            H.onerror = function() {
                                d._webAudio && (d._buffer = !0, d._webAudio = !1, d._audioNode = [], delete d._gainNode,
                                    d.load())
                            };
                            try {
                                H.send()
                            } catch (L) {
                                H.onerror()
                            }
                        }
                    } else {
                        var Q = new Audio;
                        d._audioNode.push(Q);
                        Q.src = f;
                        Q._pos = 0;
                        Q.preload = "auto";
                        Q.volume = m._muted ? 0 : d._volume * m.volume();
                        b[f] = d;
                        var M = function() {
                            d._duration = Math.ceil(10 * Q.duration) / 10;
                            0 === Object.getOwnPropertyNames(d._sprite).length && (d._sprite = {
                                _default: [0, 1E3 * d._duration]
                            });
                            d._loaded || (d._loaded = !0, d.on("load"));
                            d._autoplay && d.play();
                            Q.removeEventListener("canplaythrough", M, !1)
                        };
                        Q.addEventListener("canplaythrough", M, !1);
                        Q.load()
                    }
                    return d
                }
            }
            d.on("loaderror")
        },
        urls: function(b) {
            return b ? (this.stop(), this._urls = "string" === typeof b ? [b] : b, this._loaded = !1, this.load(), this) : this._urls
        },
        play: function(d, e) {
            var f = this;
            "function" === typeof d && (e = d);
            if (!d || "function" === typeof d) d = "_default";
            if (!f._loaded) return f.on("load", function() {
                f.play(d, e)
            }), f;
            if (!f._sprite[d]) return "function" === typeof e && e(), f;
            f._inactiveNode(function(j) {
                j._sprite = d;
                var s = 0 < j._pos ? j._pos : f._sprite[d][0] / 1E3,
                    t = f._sprite[d][1] / 1E3 - j._pos,
                    p = !(!f._loop && !f._sprite[d][2]),
                    v = "string" === typeof e ? e :
                    Math.round(Date.now() * Math.random()) + "",
                    A, M = {
                        id: v,
                        sprite: d,
                        loop: p
                    };
                A = setTimeout(function() {
                    !f._webAudio && p && f.stop(M.id, M.timer).play(d, M.id);
                    f._webAudio && !p && (f._nodeById(M.id).paused = !0, f._nodeById(M.id)._pos = 0);
                    !f._webAudio && !p && f.stop(M.id, M.timer);
                    f.on("end", v)
                }, 1E3 * t);
                f._onendTimer.push(A);
                M.timer = f._onendTimer[f._onendTimer.length - 1];
                if (f._webAudio) {
                    A = f._sprite[d][0] / 1E3;
                    var P = f._sprite[d][1] / 1E3;
                    j.id = v;
                    j.paused = !1;
                    A = [p, A, P];
                    P = f._nodeById(v);
                    P.bufferSource = c.createBufferSource();
                    P.bufferSource.buffer =
                        b[f._src];
                    P.bufferSource.connect(P.panner);
                    P.bufferSource.loop = A[0];
                    A[0] && (P.bufferSource.loopStart = A[1], P.bufferSource.loopEnd = A[1] + A[2]);
                    P.bufferSource.playbackRate.value = f._rate;
                    f._playStart = c.currentTime;
                    j.gain.value = f._volume;
                    "undefined" === typeof j.bufferSource.start ? j.bufferSource.noteGrainOn(0, s, t) : j.bufferSource.start(0, s, t)
                } else if (4 === j.readyState) j.id = v, j.currentTime = s, j.muted = m._muted, j.volume = f._volume * m.volume(), setTimeout(function() {
                    j.play()
                }, 0);
                else {
                    f._clearEndTimer(A);
                    var C = d,
                        S = e,
                        N = function() {
                            f.play(C, S);
                            j.removeEventListener("canplaythrough", N, !1)
                        };
                    j.addEventListener("canplaythrough", N, !1);
                    return f
                }
                f.on("play");
                "function" === typeof e && e(v);
                return f
            });
            return f
        },
        pause: function(b, c) {
            var d = this;
            if (!d._loaded) return d.on("play", function() {
                d.pause(b)
            }), d;
            d._clearEndTimer(c || 0);
            var e = b ? d._nodeById(b) : d._activeNode();
            if (e)
                if (e._pos = d.pos(null, b), d._webAudio) {
                    if (!e.bufferSource || e.paused) return d;
                    e.paused = !0;
                    "undefined" === typeof e.bufferSource.stop ? e.bufferSource.noteOff(0) : e.bufferSource.stop(0)
                } else e.pause();
            d.on("pause");
            return d
        },
        stop: function(b, c) {
            var d = this;
            if (!d._loaded) return d.on("play", function() {
                d.stop(b)
            }), d;
            d._clearEndTimer(c || 0);
            var e = b ? d._nodeById(b) : d._activeNode();
            if (e)
                if (e._pos = 0, d._webAudio) {
                    if (!e.bufferSource || e.paused) return d;
                    e.paused = !0;
                    "undefined" === typeof e.bufferSource.stop ? e.bufferSource.noteOff(0) : e.bufferSource.stop(0)
                } else e.pause(), e.currentTime = 0;
            return d
        },
        mute: function(b) {
            var c = this;
            if (!c._loaded) return c.on("play", function() {
                c.mute(b)
            }), c;
            var d = b ? c._nodeById(b) : c._activeNode();
            d && (c._webAudio ? d.gain.value = 0 : d.volume = 0);
            return c
        },
        unmute: function(b) {
            var c = this;
            if (!c._loaded) return c.on("play", function() {
                c.unmute(b)
            }), c;
            var d = b ? c._nodeById(b) : c._activeNode();
            d && (c._webAudio ? d.gain.value = c._volume : d.volume = c._volume);
            return c
        },
        volume: function(b, c) {
            var d = this;
            b = parseFloat(b);
            if (0 <= b && 1 >= b) {
                d._volume = b;
                if (!d._loaded) return d.on("play", function() {
                    d.volume(b, c)
                }), d;
                var e = c ? d._nodeById(c) : d._activeNode();
                e && (d._webAudio ? e.gain.value = b : e.volume = b * m.volume());
                return d
            }
            return d._volume
        },
        loop: function(b) {
            return "boolean" === typeof b ? (this._loop = b, this) : this._loop
        },
        sprite: function(b) {
            return "object" === typeof b ? (this._sprite = b, this) : this._sprite
        },
        pos: function(b, d) {
            var e = this;
            if (!e._loaded) return e.on("load", function() {
                e.pos(b)
            }), "number" === typeof b ? e : e._pos || 0;
            b = parseFloat(b);
            var f = d ? e._nodeById(d) : e._activeNode();
            if (f) return 0 <= b ? (e.pause(d), f._pos = b, e.play(f._sprite, d), e) : e._webAudio ? f._pos + (c.currentTime - e._playStart) : f.currentTime;
            if (0 <= b) return e;
            for (f = 0; f < e._audioNode.length; f++)
                if (e._audioNode[f].paused &&
                    4 === e._audioNode[f].readyState) return e._webAudio ? e._audioNode[f]._pos : e._audioNode[f].currentTime
        },
        pos3d: function(b, c, d, e) {
            var f = this;
            c = "undefined" === typeof c || !c ? 0 : c;
            d = "undefined" === typeof d || !d ? -0.5 : d;
            if (!f._loaded) return f.on("play", function() {
                f.pos3d(b, c, d, e)
            }), f;
            if (0 <= b || 0 > b) {
                if (f._webAudio) {
                    var m = e ? f._nodeById(e) : f._activeNode();
                    m && (f._pos3d = [b, c, d], m.panner.setPosition(b, c, d))
                }
            } else return f._pos3d;
            return f
        },
        fade: function(b, c, d, e, f) {
            var m = this,
                j = Math.abs(b - c),
                s = b > c ? "down" : "up",
                j = j / 0.01,
                p =
                d / j;
            if (!m._loaded) return m.on("load", function() {
                m.fade(b, c, d, e, f)
            }), m;
            m.volume(b, f);
            for (var v = 1; v <= j; v++)(function() {
                var b = Math.round(1E3 * (m._volume + ("up" === s ? 0.01 : -0.01) * v)) / 1E3;
                setTimeout(function() {
                    m.volume(b, f);
                    b === c && e && e()
                }, p * v)
            })()
        },
        fadeIn: function(b, c, d) {
            return this.volume(0).play().fade(0, b, c, d)
        },
        fadeOut: function(b, c, d, e) {
            var f = this;
            return f.fade(f._volume, b, c, function() {
                d && d();
                f.pause(e);
                f.on("end")
            }, e)
        },
        _nodeById: function(b) {
            for (var c = this._audioNode[0], d = 0; d < this._audioNode.length; d++)
                if (this._audioNode[d].id ===
                    b) {
                    c = this._audioNode[d];
                    break
                }
            return c
        },
        _activeNode: function() {
            for (var b = null, c = 0; c < this._audioNode.length; c++)
                if (!this._audioNode[c].paused) {
                    b = this._audioNode[c];
                    break
                }
            this._drainPool();
            return b
        },
        _inactiveNode: function(b) {
            for (var c = null, d = 0; d < this._audioNode.length; d++)
                if (this._audioNode[d].paused && 4 === this._audioNode[d].readyState) {
                    b(this._audioNode[d]);
                    c = !0;
                    break
                }
            this._drainPool();
            if (!c) {
                var e;
                this._webAudio ? (e = this._setupAudioNode(), b(e)) : (this.load(), e = this._audioNode[this._audioNode.length -
                    1], e.addEventListener("loadedmetadata", function() {
                    b(e)
                }))
            }
        },
        _drainPool: function() {
            var b = 0,
                c;
            for (c = 0; c < this._audioNode.length; c++) this._audioNode[c].paused && b++;
            for (c = this._audioNode.length - 1; 0 <= c && !(5 >= b); c--) this._audioNode[c].paused && (this._webAudio && this._audioNode[c].disconnect(0), b--, this._audioNode.splice(c, 1))
        },
        _clearEndTimer: function(b) {
            b = this._onendTimer.indexOf(b);
            b = 0 <= b ? b : 0;
            this._onendTimer[b] && (clearTimeout(this._onendTimer[b]), this._onendTimer.splice(b, 1))
        },
        _setupAudioNode: function() {
            var b =
                this._audioNode,
                d = this._audioNode.length;
            b[d] = "undefined" === typeof c.createGain ? c.createGainNode() : c.createGain();
            b[d].gain.value = this._volume;
            b[d].paused = !0;
            b[d]._pos = 0;
            b[d].readyState = 4;
            b[d].connect(j);
            b[d].panner = c.createPanner();
            b[d].panner.setPosition(this._pos3d[0], this._pos3d[1], this._pos3d[2]);
            b[d].panner.connect(b[d]);
            return b[d]
        },
        on: function(b, c) {
            var d = this["_on" + b];
            if ("function" === typeof c) d.push(c);
            else
                for (var e = 0; e < d.length; e++) c ? d[e].call(this, c) : d[e].call(this);
            return this
        },
        off: function(b,
            c) {
            for (var d = this["_on" + b], e = c.toString(), f = 0; f < d.length; f++)
                if (e === d[f].toString()) {
                    d.splice(f, 1);
                    break
                }
            return this
        },
        unload: function() {
            for (var c = this._audioNode, d = 0; d < this._audioNode.length; d++) c[d].paused || this.stop(c[d].id), this._webAudio ? c[d].disconnect(0) : c[d].src = "";
            c = m._howls.indexOf(this);
            null !== c && 0 <= c && m._howls.splice(c, 1);
            delete b[this._src]
        }
    };
    if (d) var A = function(b, c) {
        b._duration = c ? c.duration : b._duration;
        0 === Object.getOwnPropertyNames(b._sprite).length && (b._sprite = {
            _default: [0, 1E3 * b._duration]
        });
        b._loaded || (b._loaded = !0, b.on("load"));
        b._autoplay && b.play()
    };
    "function" === typeof define && define.amd && define(function() {
        return {
            Howler: m,
            Howl: v
        }
    });
    "undefined" !== typeof exports && (exports.Howler = m, exports.Howl = v);
    window.Howler = m;
    window.Howl = v
})();
(function(b) {
    Number.prototype.map = function(b, c, d, e) {
        return d + (e - d) * ((this - b) / (c - b))
    };
    Number.prototype.limit = function(b, c) {
        return Math.min(c, Math.max(b, this))
    };
    Number.prototype.round = function(b) {
        b = Math.pow(10, b || 0);
        return Math.round(this * b) / b
    };
    Number.prototype.floor = function() {
        return Math.floor(this)
    };
    Number.prototype.ceil = function() {
        return Math.ceil(this)
    };
    Number.prototype.toInt = function() {
        return this | 0
    };
    Number.prototype.toRad = function() {
        return this / 180 * Math.PI
    };
    Number.prototype.toDeg = function() {
        return 180 *
            this / Math.PI
    };
    Array.prototype.erase = function(b) {
        for (var c = this.length; c--;) this[c] === b && this.splice(c, 1);
        return this
    };
    Array.prototype.random = function() {
        return this[Math.floor(Math.random() * this.length)]
    };
    Function.prototype.bind = Function.prototype.bind || function(b) {
        if ("function" !== typeof this) throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
        var c = Array.prototype.slice.call(arguments, 1),
            d = this,
            e = function() {},
            f = function() {
                return d.apply(this instanceof e && b ?
                    this : b, c.concat(Array.prototype.slice.call(arguments)))
            };
        e.prototype = this.prototype;
        f.prototype = new e;
        return f
    };
    b.ig = {
        game: null,
        debug: null,
        version: "1.23",
        global: b,
        modules: {},
        resources: [],
        ready: !1,
        baked: !1,
        nocache: "",
        ua: {},
        prefix: b.ImpactPrefix || "",
        lib: "lib/",
        _current: null,
        _loadQueue: [],
        _waitForOnload: 0,
        $: function(b) {
            return "#" == b.charAt(0) ? document.getElementById(b.substr(1)) : document.getElementsByTagName(b)
        },
        $new: function(b) {
            return document.createElement(b)
        },
        copy: function(b) {
            if (!b || "object" != typeof b ||
                b instanceof HTMLElement || b instanceof ig.Class) return b;
            if (b instanceof Array)
                for (var c = [], d = 0, e = b.length; d < e; d++) c[d] = ig.copy(b[d]);
            else
                for (d in c = {}, b) c[d] = ig.copy(b[d]);
            return c
        },
        merge: function(b, c) {
            for (var d in c) {
                var e = c[d];
                if ("object" != typeof e || e instanceof HTMLElement || e instanceof ig.Class || null === e) b[d] = e;
                else {
                    if (!b[d] || "object" != typeof b[d]) b[d] = e instanceof Array ? [] : {};
                    ig.merge(b[d], e)
                }
            }
            return b
        },
        ksort: function(b) {
            if (!b || "object" != typeof b) return [];
            var c = [],
                d = [],
                e;
            for (e in b) c.push(e);
            c.sort();
            for (e = 0; e < c.length; e++) d.push(b[c[e]]);
            return d
        },
        setVendorAttribute: function(b, c, d) {
            var e = c.charAt(0).toUpperCase() + c.substr(1);
            b[c] = "undefined" !== typeof b.imageSmoothingEnabled ? b["ms" + e] = b["moz" + e] = b["o" + e] = d : b["ms" + e] = b["moz" + e] = b["webkit" + e] = b["o" + e] = d
        },
        getVendorAttribute: function(b, c) {
            var d = c.charAt(0).toUpperCase() + c.substr(1);
            return "undefined" !== typeof b.imageSmoothingEnabled ? b[c] || b["ms" + d] || b["moz" + d] || b["o" + d] : b[c] || b["ms" + d] || b["moz" + d] || b["webkit" + d] || b["o" + d]
        },
        normalizeVendorAttribute: function(b,
            c) {
            var d = ig.getVendorAttribute(b, c);
            !b[c] && d && (b[c] = d)
        },
        getImagePixels: function(b, c, d, e, f) {
            var j = ig.$new("canvas");
            j.width = b.width;
            j.height = b.height;
            var p = j.getContext("2d");
            ig.System.SCALE.CRISP(j, p);
            var I = ig.getVendorAttribute(p, "backingStorePixelRatio") || 1;
            ig.normalizeVendorAttribute(p, "getImageDataHD");
            var E = b.width / I,
                t = b.height / I;
            j.width = Math.ceil(E);
            j.height = Math.ceil(t);
            p.drawImage(b, 0, 0, E, t);
            return 1 === I ? p.getImageData(c, d, e, f) : p.getImageDataHD(c, d, e, f)
        },
        module: function(b) {
            if (ig._current) throw "Module '" +
                ig._current.name + "' defines nothing";
            if (ig.modules[b] && ig.modules[b].body) throw "Module '" + b + "' is already defined";
            ig._current = {
                name: b,
                requires: [],
                loaded: !1,
                body: null
            };
            ig.modules[b] = ig._current;
            ig._loadQueue.push(ig._current);
            return ig
        },
        requires: function() {
            ig._current.requires = Array.prototype.slice.call(arguments);
            return ig
        },
        defines: function(b) {
            ig._current.body = b;
            ig._current = null;
            ig._initDOMReady()
        },
        addResource: function(b) {
            ig.resources.push(b)
        },
        setNocache: function(b) {
            ig.nocache = b ? "?" + Date.now() : ""
        },
        log: function() {},
        assert: function() {},
        show: function() {},
        mark: function() {},
        _loadScript: function(b, c) {
            ig.modules[b] = {
                name: b,
                requires: [],
                loaded: !1,
                body: null
            };
            ig._waitForOnload++;
            var d = ig.prefix + ig.lib + b.replace(/\./g, "/") + ".js" + ig.nocache,
                e = ig.$new("script");
            e.type = "text/javascript";
            e.src = d;
            e.onload = function() {
                ig._waitForOnload--;
                ig._execModules()
            };
            e.onerror = function() {
                throw "Failed to load module " + b + " at " + d + " required from " + c;
            };
            ig.$("head")[0].appendChild(e)
        },
        _execModules: function() {
            for (var b = !1, c =
                0; c < ig._loadQueue.length; c++) {
                for (var d = ig._loadQueue[c], e = !0, f = 0; f < d.requires.length; f++) {
                    var j = d.requires[f];
                    ig.modules[j] ? ig.modules[j].loaded || (e = !1) : (e = !1, ig._loadScript(j, d.name))
                }
                e && d.body && (ig._loadQueue.splice(c, 1), d.loaded = !0, d.body(), b = !0, c--)
            }
            if (b) ig._execModules();
            else if (!ig.baked && 0 == ig._waitForOnload && 0 != ig._loadQueue.length) {
                b = [];
                for (c = 0; c < ig._loadQueue.length; c++) {
                    e = [];
                    j = ig._loadQueue[c].requires;
                    for (f = 0; f < j.length; f++) d = ig.modules[j[f]], (!d || !d.loaded) && e.push(j[f]);
                    b.push(ig._loadQueue[c].name +
                        " (requires: " + e.join(", ") + ")")
                }
                throw "Unresolved (or circular?) dependencies. Most likely there's a name/path mismatch for one of the listed modules or a previous syntax error prevents a module from loading:\n" + b.join("\n");
            }
        },
        _DOMReady: function() {
            if (!ig.modules["dom.ready"].loaded) {
                if (!document.body) return setTimeout(ig._DOMReady, 13);
                ig.modules["dom.ready"].loaded = !0;
                ig._waitForOnload--;
                ig._execModules()
            }
            return 0
        },
        _boot: function() {
            document.location.href.match(/\?nocache/) && ig.setNocache(!0);
            ig.ua.pixelRatio =
                b.devicePixelRatio || 1;
            ig.ua.viewport = {
                width: b.innerWidth,
                height: b.innerHeight
            };
            ig.ua.screen = {
                width: b.screen.availWidth * ig.ua.pixelRatio,
                height: b.screen.availHeight * ig.ua.pixelRatio
            };
            ig.ua.iPhone = /iPhone/i.test(navigator.userAgent);
            ig.ua.iPhone4 = ig.ua.iPhone && 2 == ig.ua.pixelRatio;
            ig.ua.iPad = /iPad/i.test(navigator.userAgent);
            ig.ua.android = /android/i.test(navigator.userAgent);
            ig.ua.winPhone = /Windows Phone/i.test(navigator.userAgent);
            ig.ua.is_uiwebview = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);
            ig.ua.is_safari_or_uiwebview = /(iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent);
            ig.ua.iOS = ig.ua.iPhone || ig.ua.iPad;
            ig.ua.iOS6_tag = /OS 6_/i.test(navigator.userAgent);
            ig.ua.iOS6 = (ig.ua.iPhone || ig.ua.iPad) && ig.ua.iOS6_tag;
            ig.ua.iOSgt5 = ig.ua.iOS && 5 < parseInt(navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/)[1]);
            ig.ua.HTCONE = /HTC_One/i.test(navigator.userAgent);
            ig.ua.winPhone = /Windows Phone/i.test(navigator.userAgent);
            ig.ua.Kindle = /Silk/i.test(navigator.userAgent);
            ig.ua.touchDevice = "ontouchstart" in
                b || b.navigator.msMaxTouchPoints;
            ig.ua.mobile = ig.ua.iOS || ig.ua.android || ig.ua.iOS6 || ig.ua.winPhone || ig.ua.Kindle || /mobile/i.test(navigator.userAgent)
        },
        _initDOMReady: function() {
            ig.modules["dom.ready"] ? ig._execModules() : (ig._boot(), ig.modules["dom.ready"] = {
                requires: [],
                loaded: !1,
                body: null
            }, ig._waitForOnload++, "complete" === document.readyState ? ig._DOMReady() : (document.addEventListener("DOMContentLoaded", ig._DOMReady, !1), b.addEventListener("load", ig._DOMReady, !1)))
        }
    };
    ig.normalizeVendorAttribute(b, "requestAnimationFrame");
    if (b.requestAnimationFrame) {
        var c = 1,
            d = {};
        b.ig.setAnimation = function(e, f) {
            var j = c++;
            d[j] = !0;
            var p = function() {
                d[j] && (b.requestAnimationFrame(p, f), e())
            };
            b.requestAnimationFrame(p, f);
            return j
        };
        b.ig.clearAnimation = function(b) {
            delete d[b]
        }
    } else b.ig.setAnimation = function(c) {
        return b.setInterval(c, 1E3 / 60)
    }, b.ig.clearAnimation = function(c) {
        b.clearInterval(c)
    };
    var e = !1,
        f = /xyz/.test(function() {
            xyz
        }) ? /\bparent\b/ : /.*/,
        j = 0;
    b.ig.Class = function() {};
    var p = function(b) {
        var c = this.prototype,
            d = {},
            e;
        for (e in b) "function" ==
            typeof b[e] && "function" == typeof c[e] && f.test(b[e]) ? (d[e] = c[e], c[e] = function(b, c) {
                return function() {
                    var e = this.parent;
                    this.parent = d[b];
                    var f = c.apply(this, arguments);
                    this.parent = e;
                    return f
                }
            }(e, b[e])) : c[e] = b[e]
    };
    b.ig.Class.extend = function(c) {
        function d() {
            if (!e) {
                if (this.staticInstantiate) {
                    var b = this.staticInstantiate.apply(this, arguments);
                    if (b) return b
                }
                for (var c in this) "object" == typeof this[c] && (this[c] = ig.copy(this[c]));
                this.init && this.init.apply(this, arguments)
            }
            return this
        }
        var v = this.prototype;
        e = !0;
        var A = new this;
        e = !1;
        for (var B in c) A[B] = "function" == typeof c[B] && "function" == typeof v[B] && f.test(c[B]) ? function(b, c) {
            return function() {
                var d = this.parent;
                this.parent = v[b];
                var e = c.apply(this, arguments);
                this.parent = d;
                return e
            }
        }(B, c[B]) : c[B];
        d.prototype = A;
        d.prototype.constructor = d;
        d.extend = b.ig.Class.extend;
        d.inject = p;
        d.classId = A.classId = ++j;
        return d
    };
    b.ImpactMixin && ig.merge(ig, b.ImpactMixin)
})(window);
ig.baked = !0;
ig.module("impact.image").defines(function() {
    ig.Image = ig.Class.extend({
        data: null,
        width: 0,
        height: 0,
        loaded: !1,
        failed: !1,
        loadCallback: null,
        path: "",
        staticInstantiate: function(b) {
            return ig.Image.cache[b] || null
        },
        init: function(b) {
            this.path = b;
            this.load()
        },
        load: function(b) {
            this.loaded ? b && b(this.path, !0) : (!this.loaded && ig.ready ? (this.loadCallback = b || null, this.data = new Image, this.data.onload = this.onload.bind(this), this.data.onerror = this.onerror.bind(this), this.data.src = ig.prefix + this.path + ig.nocache) : ig.addResource(this),
                ig.Image.cache[this.path] = this)
        },
        reload: function() {
            this.loaded = !1;
            this.data = new Image;
            this.data.onload = this.onload.bind(this);
            this.data.src = this.path + "?" + Date.now()
        },
        onload: function() {
            this.width = this.data.width;
            this.height = this.data.height;
            this.loaded = !0;
            1 != ig.system.scale && this.resize(ig.system.scale);
            this.loadCallback && this.loadCallback(this.path, !0)
        },
        onerror: function() {
            this.failed = !0;
            this.loadCallback && this.loadCallback(this.path, !1)
        },
        resize: function(b) {
            var c = ig.getImagePixels(this.data, 0, 0, this.width,
                    this.height),
                d = this.width * b,
                e = this.height * b,
                f = ig.$new("canvas");
            f.width = d;
            f.height = e;
            for (var j = f.getContext("2d"), p = j.getImageData(0, 0, d, e), m = 0; m < e; m++)
                for (var s = 0; s < d; s++) {
                    var v = 4 * (Math.floor(m / b) * this.width + Math.floor(s / b)),
                        A = 4 * (m * d + s);
                    p.data[A] = c.data[v];
                    p.data[A + 1] = c.data[v + 1];
                    p.data[A + 2] = c.data[v + 2];
                    p.data[A + 3] = c.data[v + 3]
                }
            j.putImageData(p, 0, 0);
            this.data = f
        },
        draw: function(b, c, d, e, f, j) {
            if (this.loaded) {
                var p = ig.system.scale;
                f = (f ? f : this.width) * p;
                j = (j ? j : this.height) * p;
                ig.system.context.drawImage(this.data,
                    d ? d * p : 0, e ? e * p : 0, f, j, ig.system.getDrawPos(b), ig.system.getDrawPos(c), f, j);
                ig.Image.drawCount++
            }
        },
        drawTile: function(b, c, d, e, f, j, p) {
            f = f ? f : e;
            if (this.loaded && !(e > this.width || f > this.height)) {
                var m = ig.system.scale,
                    s = Math.floor(e * m),
                    v = Math.floor(f * m),
                    A = j ? -1 : 1,
                    B = p ? -1 : 1;
                if (j || p) ig.system.context.save(), ig.system.context.scale(A, B);
                ig.system.context.drawImage(this.data, Math.floor(d * e) % this.width * m, Math.floor(d * e / this.width) * f * m, s, v, ig.system.getDrawPos(b) * A - (j ? s : 0), ig.system.getDrawPos(c) * B - (p ? v : 0), s, v);
                (j ||
                    p) && ig.system.context.restore();
                ig.Image.drawCount++
            }
        }
    });
    ig.Image.drawCount = 0;
    ig.Image.cache = {};
    ig.Image.reloadCache = function() {
        for (var b in ig.Image.cache) ig.Image.cache[b].reload()
    }
});
ig.baked = !0;
ig.module("impact.font").requires("impact.image").defines(function() {
    ig.Font = ig.Image.extend({
        widthMap: [],
        indices: [],
        firstChar: 32,
        alpha: 1,
        letterSpacing: 1,
        lineSpacing: 0,
        onload: function(b) {
            this._loadMetrics(this.data);
            this.parent(b)
        },
        widthForString: function(b) {
            if (-1 !== b.indexOf("\n")) {
                b = b.split("\n");
                for (var c = 0, d = 0; d < b.length; d++) c = Math.max(c, this._widthForLine(b[d]));
                return c
            }
            return this._widthForLine(b)
        },
        _widthForLine: function(b) {
            for (var c = 0, d = 0; d < b.length; d++) c += this.widthMap[b.charCodeAt(d) - this.firstChar] +
                this.letterSpacing;
            return c
        },
        heightForString: function(b) {
            return b.split("\n").length * (this.height + this.lineSpacing)
        },
        draw: function(b, c, d, e) {
            "string" != typeof b && (b = b.toString());
            if (-1 !== b.indexOf("\n")) {
                b = b.split("\n");
                for (var f = this.height + this.lineSpacing, j = 0; j < b.length; j++) this.draw(b[j], c, d + j * f, e)
            } else {
                if (e == ig.Font.ALIGN.RIGHT || e == ig.Font.ALIGN.CENTER) j = this._widthForLine(b), c -= e == ig.Font.ALIGN.CENTER ? j / 2 : j;
                1 !== this.alpha && (ig.system.context.globalAlpha = this.alpha);
                for (j = 0; j < b.length; j++) e = b.charCodeAt(j),
                    c += this._drawChar(e - this.firstChar, c, d);
                1 !== this.alpha && (ig.system.context.globalAlpha = 1);
                ig.Image.drawCount += b.length
            }
        },
        _drawChar: function(b, c, d) {
            if (!this.loaded || 0 > b || b >= this.indices.length) return 0;
            var e = ig.system.scale,
                f = this.widthMap[b] * e,
                j = (this.height - 2) * e;
            ig.system.context.drawImage(this.data, this.indices[b] * e, 0, f, j, ig.system.getDrawPos(c), ig.system.getDrawPos(d), f, j);
            return this.widthMap[b] + this.letterSpacing
        },
        _loadMetrics: function(b) {
            this.height = b.height - 1;
            this.widthMap = [];
            this.indices = [];
            for (var c = ig.getImagePixels(b, 0, b.height - 1, b.width, 1), d = 0, e = 0, f = 0; f < b.width; f++) {
                var j = 4 * f + 3;
                127 < c.data[j] ? e++ : 128 > c.data[j] && e && (this.widthMap.push(e), this.indices.push(f - e), d++, e = 0)
            }
            this.widthMap.push(e);
            this.indices.push(f - e)
        }
    });
    ig.Font.ALIGN = {
        LEFT: 0,
        RIGHT: 1,
        CENTER: 2
    }
});
ig.baked = !0;
ig.module("impact.sound").defines(function() {
    ig.SoundManager = ig.Class.extend({
        clips: {},
        volume: 1,
        format: null,
        init: function() {
            if (!ig.Sound.enabled || !window.Audio) ig.Sound.enabled = !1;
            else {
                for (var b = new Audio, c = 0; c < ig.Sound.use.length; c++) {
                    var d = ig.Sound.use[c];
                    if (b.canPlayType(d.mime)) {
                        this.format = d;
                        break
                    }
                }
                this.format || (ig.Sound.enabled = !1)
            }
        },
        load: function(b, c, d) {
            var e = ig.prefix + b.replace(/[^\.]+$/, this.format.ext) + ig.nocache;
            if (this.clips[b]) {
                if (c && this.clips[b].length < ig.Sound.channels)
                    for (c = this.clips[b].length; c <
                        ig.Sound.channels; c++) {
                        var f = new Audio(e);
                        f.load();
                        this.clips[b].push(f)
                    }
                return this.clips[b][0]
            }
            var j = new Audio(e);
            d && (j.addEventListener("canplaythrough", function m(c) {
                j.removeEventListener("canplaythrough", m, !1);
                d(b, !0, c)
            }, !1), j.addEventListener("error", function(c) {
                d(b, !1, c)
            }, !1));
            j.preload = "auto";
            j.load();
            this.clips[b] = [j];
            if (c)
                for (c = 1; c < ig.Sound.channels; c++) f = new Audio(e), f.load(), this.clips[b].push(f);
            return j
        },
        get: function(b) {
            b = this.clips[b];
            for (var c = 0, d; d = b[c++];)
                if (d.paused || d.ended) return d.ended &&
                    (d.currentTime = 0), d;
            b[0].pause();
            b[0].currentTime = 0;
            return b[0]
        }
    });
    ig.Music = ig.Class.extend({
        tracks: [],
        namedTracks: {},
        currentTrack: null,
        currentIndex: 0,
        random: !1,
        _volume: 1,
        _loop: !1,
        _fadeInterval: 0,
        _fadeTimer: null,
        _endedCallbackBound: null,
        init: function() {
            this._endedCallbackBound = this._endedCallback.bind(this);
            Object.defineProperty ? (Object.defineProperty(this, "volume", {
                    get: this.getVolume.bind(this),
                    set: this.setVolume.bind(this)
                }), Object.defineProperty(this, "loop", {
                    get: this.getLooping.bind(this),
                    set: this.setLooping.bind(this)
                })) :
                this.__defineGetter__ && (this.__defineGetter__("volume", this.getVolume.bind(this)), this.__defineSetter__("volume", this.setVolume.bind(this)), this.__defineGetter__("loop", this.getLooping.bind(this)), this.__defineSetter__("loop", this.setLooping.bind(this)))
        },
        add: function(b, c) {
            if (ig.Sound.enabled) {
                var d = ig.soundManager.load(b instanceof ig.Sound ? b.path : b, !1);
                d.loop = this._loop;
                d.volume = this._volume;
                d.addEventListener("ended", this._endedCallbackBound, !1);
                this.tracks.push(d);
                c && (this.namedTracks[c] = d);
                this.currentTrack ||
                    (this.currentTrack = d)
            }
        },
        next: function() {
            this.tracks.length && (this.stop(), this.currentIndex = this.random ? Math.floor(Math.random() * this.tracks.length) : (this.currentIndex + 1) % this.tracks.length, this.currentTrack = this.tracks[this.currentIndex], this.play())
        },
        pause: function() {
            this.currentTrack && this.currentTrack.pause()
        },
        stop: function() {
            this.currentTrack && (this.currentTrack.pause(), this.currentTrack.currentTime = 0)
        },
        play: function(b) {
            if (b && this.namedTracks[b]) b = this.namedTracks[b], b != this.currentTrack && (this.stop(),
                this.currentTrack = b);
            else if (!this.currentTrack) return;
            this.currentTrack.play()
        },
        getLooping: function() {
            return this._loop
        },
        setLooping: function(b) {
            this._loop = b;
            for (var c in this.tracks) this.tracks[c].loop = b
        },
        getVolume: function() {
            return this._volume
        },
        setVolume: function(b) {
            this._volume = b.limit(0, 1);
            for (var c in this.tracks) this.tracks[c].volume = this._volume
        },
        fadeOut: function(b) {
            this.currentTrack && (clearInterval(this._fadeInterval), this.fadeTimer = new ig.Timer(b), this._fadeInterval = setInterval(this._fadeStep.bind(this),
                50))
        },
        _fadeStep: function() {
            var b = this.fadeTimer.delta().map(-this.fadeTimer.target, 0, 1, 0).limit(0, 1) * this._volume;
            0.01 >= b ? (this.stop(), this.currentTrack.volume = this._volume, clearInterval(this._fadeInterval)) : this.currentTrack.volume = b
        },
        _endedCallback: function() {
            this._loop ? this.play() : this.next()
        }
    });
    ig.Sound = ig.Class.extend({
        path: "",
        volume: 1,
        currentClip: null,
        multiChannel: !0,
        init: function(b, c) {
            this.path = b;
            this.multiChannel = !1 !== c;
            this.load()
        },
        load: function(b) {
            ig.Sound.enabled ? ig.ready ? ig.soundManager.load(this.path,
                this.multiChannel, b) : ig.addResource(this) : b && b(this.path, !0)
        },
        play: function() {
            ig.Sound.enabled && (this.currentClip = ig.soundManager.get(this.path), this.currentClip.volume = ig.soundManager.volume * this.volume, this.currentClip.play())
        },
        stop: function() {
            this.currentClip && (this.currentClip.pause(), this.currentClip.currentTime = 0)
        }
    });
    ig.Sound.FORMAT = {
        MP3: {
            ext: "mp3",
            mime: "audio/mpeg"
        },
        M4A: {
            ext: "m4a",
            mime: "audio/mp4; codecs=mp4a"
        },
        OGG: {
            ext: "ogg",
            mime: "audio/ogg; codecs=vorbis"
        },
        WEBM: {
            ext: "webm",
            mime: "audio/webm; codecs=vorbis"
        },
        CAF: {
            ext: "caf",
            mime: "audio/x-caf"
        }
    };
    ig.Sound.use = [ig.Sound.FORMAT.OGG, ig.Sound.FORMAT.MP3];
    ig.Sound.channels = 4;
    ig.Sound.enabled = !0
});
ig.baked = !0;
ig.module("impact.loader").requires("impact.image", "impact.font", "impact.sound").defines(function() {
    ig.Loader = ig.Class.extend({
        resources: [],
        gameClass: null,
        status: 0,
        done: !1,
        _unloaded: [],
        _drawStatus: 0,
        _intervalId: 0,
        _loadCallbackBound: null,
        init: function(b, c) {
            this.gameClass = b;
            this.resources = c;
            this._loadCallbackBound = this._loadCallback.bind(this);
            for (var d = 0; d < this.resources.length; d++) this._unloaded.push(this.resources[d].path)
        },
        load: function() {
            ig.system.clear("#000");
            if (this.resources.length) {
                for (var b =
                    0; b < this.resources.length; b++) this.loadResource(this.resources[b]);
                this._intervalId = setInterval(this.draw.bind(this), 16)
            } else this.end()
        },
        loadResource: function(b) {
            b.load(this._loadCallbackBound)
        },
        end: function() {
            this.done || (this.done = !0, clearInterval(this._intervalId))
        },
        draw: function() {},
        _loadCallback: function(b, c) {
            if (c) this._unloaded.erase(b);
            else throw "Failed to load resource: " + b;
            this.status = 1 - this._unloaded.length / this.resources.length;
            0 == this._unloaded.length && setTimeout(this.end.bind(this), 250)
        }
    })
});
ig.baked = !0;
ig.module("impact.timer").defines(function() {
    ig.Timer = ig.Class.extend({
        target: 0,
        base: 0,
        last: 0,
        pausedAt: 0,
        init: function(b) {
            this.last = this.base = ig.Timer.time;
            this.target = b || 0
        },
        set: function(b) {
            this.target = b || 0;
            this.base = ig.Timer.time;
            this.pausedAt = 0
        },
        reset: function() {
            this.base = ig.Timer.time;
            this.pausedAt = 0
        },
        tick: function() {
            var b = ig.Timer.time - this.last;
            this.last = ig.Timer.time;
            return this.pausedAt ? 0 : b
        },
        delta: function() {
            return (this.pausedAt || ig.Timer.time) - this.base - this.target
        },
        pause: function() {
            this.pausedAt || (this.pausedAt =
                ig.Timer.time)
        },
        unpause: function() {
            this.pausedAt && (this.base += ig.Timer.time - this.pausedAt, this.pausedAt = 0)
        }
    });
    ig.Timer._last = 0;
    ig.Timer.time = Number.MIN_VALUE;
    ig.Timer.timeScale = 1;
    ig.Timer.maxStep = 0.05;
    ig.Timer.step = function() {
        var b = Date.now();
        ig.Timer.time += Math.min((b - ig.Timer._last) / 1E3, ig.Timer.maxStep) * ig.Timer.timeScale;
        ig.Timer._last = b
    }
});
ig.baked = !0;
ig.module("impact.system").requires("impact.timer", "impact.image").defines(function() {
    ig.System = ig.Class.extend({
        fps: 30,
        width: 320,
        height: 240,
        realWidth: 320,
        realHeight: 240,
        scale: 1,
        tick: 0,
        animationId: 0,
        newGameClass: null,
        running: !1,
        delegate: null,
        clock: null,
        canvas: null,
        context: null,
        init: function(b, c, d, e, f) {
            this.fps = c;
            this.clock = new ig.Timer;
            this.canvas = ig.$(b);
            this.resize(d, e, f);
            this.context = this.canvas.getContext("2d");
            this.getDrawPos = ig.System.drawMode;
            1 != this.scale && (ig.System.scaleMode = ig.System.SCALE.CRISP);
            ig.System.scaleMode(this.canvas, this.context)
        },
        resize: function(b, c, d) {
            this.width = b;
            this.height = c;
            this.scale = d || this.scale;
            this.realWidth = this.width * this.scale;
            this.realHeight = this.height * this.scale;
            this.canvas.width = this.realWidth;
            this.canvas.height = this.realHeight
        },
        setGame: function(b) {
            this.running ? this.newGameClass = b : this.setGameNow(b)
        },
        setGameNow: function(b) {
            ig.game = new b;
            ig.system.setDelegate(ig.game)
        },
        setDelegate: function(b) {
            if ("function" == typeof b.run) this.delegate = b, this.startRunLoop();
            else throw "System.setDelegate: No run() function in object";
        },
        stopRunLoop: function() {
            ig.clearAnimation(this.animationId);
            this.running = !1
        },
        startRunLoop: function() {
            this.stopRunLoop();
            this.animationId = ig.setAnimation(this.run.bind(this), this.canvas);
            this.running = !0
        },
        clear: function(b) {
            this.context.fillStyle = b;
            this.context.fillRect(0, 0, this.realWidth, this.realHeight)
        },
        run: function() {
            ig.Timer.step();
            this.tick = this.clock.tick();
            this.delegate.run();
            ig.input.clearPressed();
            this.newGameClass && (this.setGameNow(this.newGameClass), this.newGameClass = null)
        },
        getDrawPos: null
    });
    ig.System.DRAW = {
        AUTHENTIC: function(b) {
            return Math.round(b) * this.scale
        },
        SMOOTH: function(b) {
            return Math.round(b * this.scale)
        },
        SUBPIXEL: function(b) {
            return b * this.scale
        }
    };
    ig.System.drawMode = ig.System.DRAW.SMOOTH;
    ig.System.SCALE = {
        CRISP: function(b, c) {
            ig.setVendorAttribute(c, "imageSmoothingEnabled", !1);
            b.style.imageRendering = "-moz-crisp-edges";
            b.style.imageRendering = "-o-crisp-edges";
            b.style.imageRendering = "-webkit-optimize-contrast";
            b.style.imageRendering = "crisp-edges";
            b.style.msInterpolationMode = "nearest-neighbor"
        },
        SMOOTH: function(b, c) {
            ig.setVendorAttribute(c, "imageSmoothingEnabled", !0);
            b.style.imageRendering = "";
            b.style.msInterpolationMode = ""
        }
    };
    ig.System.scaleMode = ig.System.SCALE.SMOOTH
});
ig.baked = !0;
ig.module("impact.input").defines(function() {
    ig.KEY = {
        MOUSE1: -1,
        MOUSE2: -3,
        MWHEEL_UP: -4,
        MWHEEL_DOWN: -5,
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        PAUSE: 19,
        CAPS: 20,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT_ARROW: 37,
        UP_ARROW: 38,
        RIGHT_ARROW: 39,
        DOWN_ARROW: 40,
        INSERT: 45,
        DELETE: 46,
        _0: 48,
        _1: 49,
        _2: 50,
        _3: 51,
        _4: 52,
        _5: 53,
        _6: 54,
        _7: 55,
        _8: 56,
        _9: 57,
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        NUMPAD_0: 96,
        NUMPAD_1: 97,
        NUMPAD_2: 98,
        NUMPAD_3: 99,
        NUMPAD_4: 100,
        NUMPAD_5: 101,
        NUMPAD_6: 102,
        NUMPAD_7: 103,
        NUMPAD_8: 104,
        NUMPAD_9: 105,
        MULTIPLY: 106,
        ADD: 107,
        SUBSTRACT: 109,
        DECIMAL: 110,
        DIVIDE: 111,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        PLUS: 187,
        COMMA: 188,
        MINUS: 189,
        PERIOD: 190
    };
    ig.Input = ig.Class.extend({
        bindings: {},
        actions: {},
        presses: {},
        locks: {},
        delayedKeyup: {},
        isUsingMouse: !1,
        isUsingKeyboard: !1,
        isUsingAccelerometer: !1,
        mouse: {
            x: 0,
            y: 0
        },
        accel: {
            x: 0,
            y: 0,
            z: 0
        },
        initMouse: function() {
            if (!this.isUsingMouse) {
                this.isUsingMouse = !0;
                var b = this.mousewheel.bind(this);
                ig.system.canvas.addEventListener("mousewheel", b, !1);
                ig.system.canvas.addEventListener("DOMMouseScroll", b, !1);
                ig.system.canvas.addEventListener("contextmenu", this.contextmenu.bind(this), !1);
                ig.system.canvas.addEventListener("mousedown", this.keydown.bind(this), !1);
                ig.system.canvas.addEventListener("mouseup", this.keyup.bind(this), !1);
                ig.system.canvas.addEventListener("mousemove", this.mousemove.bind(this), !1);
                ig.ua.touchDevice && (ig.system.canvas.addEventListener("touchstart",
                    this.keydown.bind(this), !1), ig.system.canvas.addEventListener("touchend", this.keyup.bind(this), !1), ig.system.canvas.addEventListener("touchmove", this.mousemove.bind(this), !1), ig.system.canvas.addEventListener("MSPointerDown", this.keydown.bind(this), !1), ig.system.canvas.addEventListener("MSPointerUp", this.keyup.bind(this), !1), ig.system.canvas.addEventListener("MSPointerMove", this.mousemove.bind(this), !1), ig.system.canvas.style.msTouchAction = "none")
            }
        },
        initKeyboard: function() {
            this.isUsingKeyboard || (this.isUsingKeyboard = !0, window.addEventListener("keydown", this.keydown.bind(this), !1), window.addEventListener("keyup", this.keyup.bind(this), !1))
        },
        initAccelerometer: function() {
            this.isUsingAccelerometer || window.addEventListener("devicemotion", this.devicemotion.bind(this), !1)
        },
        mousewheel: function(b) {
            var c = this.bindings[0 < (b.wheelDelta ? b.wheelDelta : -1 * b.detail) ? ig.KEY.MWHEEL_UP : ig.KEY.MWHEEL_DOWN];
            c && (this.actions[c] = !0, this.presses[c] = !0, this.delayedKeyup[c] = !0, b.stopPropagation(), b.preventDefault())
        },
        mousemove: function(b) {
            var c =
                parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth;
            ig.ua.mobile && (c = ig.system.realWidth);
            var c = ig.system.scale * (c / ig.system.realWidth),
                d = {
                    left: 0,
                    top: 0
                };
            ig.system.canvas.getBoundingClientRect && (d = ig.system.canvas.getBoundingClientRect());
            b = b.touches ? b.touches[0] : b;
            this.mouse.x = (b.clientX - d.left) / c;
            this.mouse.y = (b.clientY - d.top) / c
        },
        contextmenu: function(b) {
            this.bindings[ig.KEY.MOUSE2] && (b.stopPropagation(), b.preventDefault())
        },
        keydown: function(b) {
            var c = b.target.tagName;
            if (!("INPUT" == c || "TEXTAREA" ==
                c))
                if (c = "keydown" == b.type ? b.keyCode : 2 == b.button ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1, 0 > c && window.focus(), ("touchstart" == b.type || "mousedown" == b.type) && this.mousemove(b), c = this.bindings[c]) this.actions[c] = !0, this.locks[c] || (this.presses[c] = !0, this.locks[c] = !0), b.stopPropagation(), b.preventDefault()
        },
        keyup: function(b) {
            var c = b.target.tagName;
            if (!("INPUT" == c || "TEXTAREA" == c))
                if (c = this.bindings["keyup" == b.type ? b.keyCode : 2 == b.button ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1]) this.delayedKeyup[c] = !0, b.stopPropagation(), b.preventDefault()
        },
        devicemotion: function(b) {
            this.accel = b.accelerationIncludingGravity
        },
        bind: function(b, c) {
            0 > b ? this.initMouse() : 0 < b && this.initKeyboard();
            this.bindings[b] = c
        },
        bindTouch: function(b, c) {
            var d = ig.$(b),
                e = this;
            d.addEventListener("touchstart", function(b) {
                e.touchStart(b, c)
            }, !1);
            d.addEventListener("touchend", function(b) {
                e.touchEnd(b, c)
            }, !1);
            d.addEventListener("MSPointerDown", function(b) {
                e.touchStart(b, c)
            }, !1);
            d.addEventListener("MSPointerUp", function(b) {
                e.touchEnd(b, c)
            }, !1)
        },
        unbind: function(b) {
            this.delayedKeyup[this.bindings[b]] = !0;
            this.bindings[b] = null
        },
        unbindAll: function() {
            this.bindings = {};
            this.actions = {};
            this.presses = {};
            this.locks = {};
            this.delayedKeyup = {}
        },
        state: function(b) {
            return this.actions[b]
        },
        pressed: function(b) {
            return this.presses[b]
        },
        released: function(b) {
            return !!this.delayedKeyup[b]
        },
        clearPressed: function() {
            for (var b in this.delayedKeyup) this.actions[b] = !1, this.locks[b] = !1;
            this.delayedKeyup = {};
            this.presses = {}
        },
        touchStart: function(b, c) {
            this.actions[c] = !0;
            this.presses[c] = !0;
            b.stopPropagation();
            b.preventDefault();
            return !1
        },
        touchEnd: function(b, c) {
            this.delayedKeyup[c] = !0;
            b.stopPropagation();
            b.preventDefault();
            return !1
        }
    })
});
ig.baked = !0;
ig.module("impact.sound-handler").defines(function() {
    ig.SoundHandler = ig.Class.extend({
        formats: {
            ogg: ".ogg",
            mp3: ".mp3"
        },
        jukebox: null,
        pausePosition: null,
        globalMute: !1,
        forceMuted: !1,
        muted: !1,
        bgmStarted: !1,
        bgmPlaying: !1,
        soundPlaying: !1,
        currentSoundPlaying: null,
        soundBuffer: [],
        voSoundLoaded: [],
        sfxSoundLoaded: [],
        SOUNDID: {},
        voSoundsToLoad: [],
        sfxSoundsToLoad: [{
            name: "staticSound",
            path: "media/audio/play/static"
        }, {
            name: "openingSound",
            path: "media/audio/opening/opening"
        }, {
            name: "kittyopeningSound",
            path: "media/audio/opening/kittyopening"
        }, {
            name: "moo",
            path: "media/audio/game/moo"
        }, {
            name: "woosh",
            path: "media/audio/game/woosh"
        }, {
            name: "accelerate",
            path: "media/audio/game/swing"
        }, {
            name: "pop",
            path: "media/audio/game/pop"
        }, {
            name: "glass",
            path: "media/audio/game/glass"
        }, {
            name: "wood",
            path: "media/audio/game/wood"
        }, {
            name: "rock",
            path: "media/audio/game/rock"
        }, {
            name: "click",
            path: "media/audio/game/click"
        }, {
            name: "win",
            path: "media/audio/game/win"
        }],
        debug: !1,
        init: function() {
            ig.ua.mobile ? (this.initSfx(), this.setupJukebox()) : (this.initSfx(), this.setupDesktopMusic());
            this.setupWindowHandler()
        },
        allVoSoundLoaded: function() {
            if (this.voSoundLoaded.length >= this.voSoundsToLoad.length) {
                this.debug && console.log("Vo ready");
                for (index = 0; index < this.voSoundLoaded.length; index++) this.voSoundLoaded[index].on("end", function(b) {
                    b.isPlaying = !1;
                    this.soundBuffer.pop()
                }.bind(this, this.voSoundLoaded[index])), this.voSoundLoaded[index].on("play", function(b) {
                    b.isPlaying = !0
                }.bind(this, this.voSoundLoaded[index]));
                return !0
            }
            return !1
        },
        allSfxSoundLoaded: function() {
            return this.sfxSoundLoaded.length >=
                this.sfxSoundsToLoad.length ? !0 : !1
        },
        stopBackgroundMusic: function() {
            ig.ua.mobile ? this.pausePosition = this.jukebox.player.pause() : ig.music.pause();
            this.bgmPlaying = !1
        },
        playBackgroundMusic: function() {
            this.bgmPlaying || (this.bgmStarted = !0, ig.ua.mobile ? this.pausePosition ? this.jukebox.player.resume(this.pausePosition) : this.jukebox.player.play(this.jukebox.player.settings.spritemap.music.start, !0) : ig.music.play(), this._unMuteBackgroundMusic(), this.bgmPlaying = !0)
        },
        playSound: function(b) {
            if ((b = this[b]) && (!this.forceMuted ||
                !this.muted) && !b.isPlaying) this.soundBuffer.push(b), b.play()
        },
        stopAllAndPlaySound: function(b) {
            this.stopAllSounds();
            this.playSound(b)
        },
        stopAllSounds: function() {
            for (index = 0; index < this.soundBuffer.length; index++) this.soundBuffer[index].isPlaying = !1, this.soundBuffer.splice(0, 1)[0].stop()
        },
        addSound: function(b, c, d) {
            var e = c + this.formats.ogg;
            c += this.formats.mp3;
            this.SOUNDID[b] = b;
            this[b] = d ? new Howl({
                urls: [e, c],
                onload: d
            }) : new Howl({
                urls: [e, c]
            })
        },
        _muteSounds: function() {
            for (i = 0; i < ig.resources.length; i++) ig.resources[i].multiChannel &&
                ig.resources[i].stop();
            Howler.mute();
            this.debug && console.log("Sounds muted")
        },
        _unMuteSounds: function() {
            Howler.unmute();
            ig.Sound.enabled = !0;
            this.debug && console.log("Sounds can play")
        },
        _muteBackgroundMusic: function() {
            ig.ua.mobile ? (this.stopBackgroundMusic(), this.jukebox.player.setVolume(0)) : ig.music.volume = 0;
            this.debug && console.log("BGM muted")
        },
        _unMuteBackgroundMusic: function() {
            this.bgmStarted && (ig.ua.mobile ? (this.pausePosition ? this.jukebox.player.resume(this.pausePosition) : this.jukebox.player.play(this.jukebox.player.settings.spritemap.music.start, !0), this.jukebox.player.setVolume(1)) : ig.music.volume = 1, this.debug && console.log("BGM can play"))
        },
        focusBlurMute: function() {
            this.forceMuted || this.mute()
        },
        focusBlurUnmute: function() {
            !this.forceMuted && (!ig.game || !(ig.game.storage && "OFF" == ig.game.storage.get("SOUND"))) && this.unmute()
        },
        setForceMuted: function(b) {
            this.forceMuted = b
        },
        mute: function() {
            this.muted || (this._muteSounds(), this._muteBackgroundMusic(), this.muted = !0)
        },
        unmute: function() {
            this.muted && (this._unMuteSounds(), this._unMuteBackgroundMusic(),
                this.muted = !1)
        },
        setupWindowHandler: function() {
            "true" === getQueryVariable("webview") ? ($(window).focus(function() {
                ig.ua.mobile && ig.game && ig.game.resumeGame();
                ig.soundHandler && ig.soundHandler.focusBlurUnmute()
            }), $(window).blur(function() {
                ig.soundHandler && ig.soundHandler.focusBlurMute()
            })) : (window.onfocus = function() {
                ig.ua.mobile && ig.game && ig.game.resumeGame();
                ig.soundHandler && ig.soundHandler.focusBlurUnmute()
            }, window.onblur = function() {
                ig.soundHandler && ig.soundHandler.focusBlurMute()
            })
        },
        initSfx: function() {
            for (index =
                0; index < this.sfxSoundsToLoad.length; index++) {
                var b = function(b) {
                    this.sfxSoundLoaded.push(this[b])
                }.bind(this, this.sfxSoundsToLoad[index].name);
                this.addSound(this.sfxSoundsToLoad[index].name, this.sfxSoundsToLoad[index].path, b)
            }
        },
        initVoSfx: function() {
            for (index = 0; index < this.voSoundsToLoad.length; index++) {
                var b = function(b) {
                    this.voSoundLoaded.push(this[b])
                }.bind(this, this.voSoundsToLoad[index].name);
                this.addSound(this.voSoundsToLoad[index].name, this.voSoundsToLoad[index].path, b)
            }
        },
        setupDesktopMusic: function() {
            ig.music.add("media/audio/game/bgm.*",
                "bgm")
        },
        setupJukebox: function() {
            ig.ua.mobile && (this.jukebox = new ig.Jukebox, this.pausePosition = this.jukebox.player.settings.spritemap.music.start)
        },
        forceLoopBGM: function() {
            if (!this.forceMuted && this.bgmPlaying && this.jukebox && this.jukebox.player && this.jukebox.player.settings.spritemap.music && this.jukebox.player.settings.spritemap.music.loop) {
                if (0 <= this.prevTime)
                    if (this.jukebox.player.getCurrentTime() === this.prevTime) {
                        if (this.silentCounter || (this.silentCounter = 0), this.silentCounter++, this.jukebox.player.getCurrentTime() >=
                            this.jukebox.player.settings.spritemap.music.end || this.silentCounter > 0.0010 * ig.soundHandler.jukebox.player.settings.timeout * ig.system.fps) this.jukebox.player.pause(), this.jukebox.player.play(this.jukebox.player.settings.spritemap.music.start, !0), this.silentCounter = null
                    } else this.silentCounter = null;
                this.prevTime = this.jukebox.player.getCurrentTime()
            }
        }
    })
});

function getHiddenProp() {
    var b = ["webkit", "moz", "ms", "o"];
    if ("hidden" in document) return "hidden";
    for (var c = 0; c < b.length; c++)
        if (b[c] + "Hidden" in document) return b[c] + "Hidden";
    return null
}

function isHidden() {
    var b = getHiddenProp();
    return !b ? !1 : document[b]
}
var visProp = getHiddenProp();
if (visProp) {
    var evtname = visProp.replace(/[H|h]idden/, "") + "visibilitychange";
    document.addEventListener(evtname, visChange)
}
window.addEventListener("pagehide", function() {
    ig.soundHandler && ig.soundHandler.focusBlurMute()
}, !1);
window.addEventListener("pageshow", function() {
    ig.ua.mobile && ig.game && ig.game.resumeGame();
    ig.soundHandler && ig.soundHandler.focusBlurUnmute()
}, !1);

function visChange() {
    isHidden() ? ig.soundHandler && ig.soundHandler.focusBlurMute() : (ig.ua.mobile && ig.game && ig.game.resumeGame(), ig.soundHandler && ig.soundHandler.focusBlurUnmute())
}
ig.baked = !0;
ig.module("impact.impact").requires("dom.ready", "impact.loader", "impact.system", "impact.input", "impact.sound", "impact.sound-handler").defines(function() {
    ig.main = function(b, c, d, e, f, j, p) {
        ig.system = new ig.System(b, d, e, f, j || 1);
        ig.input = new ig.Input;
        ig.soundManager = new ig.SoundManager;
        ig.music = new ig.Music;
        ig.ready = !0;
        ig.soundHandler = new ig.SoundHandler;
        (new(p || ig.Loader)(c, ig.resources)).load()
    }
});
ig.baked = !0;
ig.module("impact.animation").requires("impact.timer", "impact.image").defines(function() {
    ig.AnimationSheet = ig.Class.extend({
        width: 8,
        height: 8,
        image: null,
        init: function(b, c, d) {
            this.width = c;
            this.height = d;
            this.image = new ig.Image(b)
        }
    });
    ig.Animation = ig.Class.extend({
        sheet: null,
        timer: null,
        sequence: [],
        flip: {
            x: !1,
            y: !1
        },
        pivot: {
            x: 0,
            y: 0
        },
        frame: 0,
        tile: 0,
        loopCount: 0,
        alpha: 1,
        angle: 0,
        init: function(b, c, d, e) {
            this.sheet = b;
            this.pivot = {
                x: b.width / 2,
                y: b.height / 2
            };
            this.timer = new ig.Timer;
            this.frameTime = c;
            this.sequence = d;
            this.stop = !!e;
            this.tile = this.sequence[0]
        },
        rewind: function() {
            this.timer.set();
            this.frame = this.loopCount = 0;
            this.tile = this.sequence[0];
            return this
        },
        gotoFrame: function(b) {
            this.timer.set(this.frameTime * -b - 1E-4);
            this.update()
        },
        gotoRandomFrame: function() {
            this.gotoFrame(Math.floor(Math.random() * this.sequence.length))
        },
        update: function() {
            var b = Math.floor(this.timer.delta() / this.frameTime);
            this.loopCount = Math.floor(b / this.sequence.length);
            this.frame = this.stop && 0 < this.loopCount ? this.sequence.length - 1 : b % this.sequence.length;
            this.tile = this.sequence[this.frame]
        },
        draw: function(b, c) {
            var d = Math.max(this.sheet.width, this.sheet.height);
            b > ig.system.width || c > ig.system.height || (0 > b + d || 0 > c + d) || (1 != this.alpha && (ig.system.context.globalAlpha = this.alpha), 0 == this.angle ? this.sheet.image.drawTile(b, c, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y) : (ig.system.context.save(), ig.system.context.translate(ig.system.getDrawPos(b + this.pivot.x), ig.system.getDrawPos(c + this.pivot.y)), ig.system.context.rotate(this.angle),
                this.sheet.image.drawTile(-this.pivot.x, -this.pivot.y, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y), ig.system.context.restore()), 1 != this.alpha && (ig.system.context.globalAlpha = 1))
        }
    })
});
ig.baked = !0;
ig.module("impact.entity").requires("impact.animation", "impact.impact").defines(function() {
    ig.Entity = ig.Class.extend({
        id: 0,
        settings: {},
        size: {
            x: 16,
            y: 16
        },
        offset: {
            x: 0,
            y: 0
        },
        pos: {
            x: 0,
            y: 0
        },
        last: {
            x: 0,
            y: 0
        },
        vel: {
            x: 0,
            y: 0
        },
        accel: {
            x: 0,
            y: 0
        },
        friction: {
            x: 0,
            y: 0
        },
        maxVel: {
            x: 100,
            y: 100
        },
        zIndex: 0,
        gravityFactor: 1,
        standing: !1,
        bounciness: 0,
        minBounceVelocity: 40,
        anims: {},
        animSheet: null,
        currentAnim: null,
        health: 10,
        type: 0,
        checkAgainst: 0,
        collides: 0,
        _killed: !1,
        slopeStanding: {
            min: (44).toRad(),
            max: (136).toRad()
        },
        init: function(b,
            c, d) {
            this.id = ++ig.Entity._lastId;
            this.pos.x = this.last.x = b;
            this.pos.y = this.last.y = c;
            ig.merge(this, d)
        },
        reset: function(b, c, d) {
            var e = this.constructor.prototype;
            this.pos.x = b;
            this.pos.y = c;
            this.last.x = b;
            this.last.y = c;
            this.vel.x = e.vel.x;
            this.vel.y = e.vel.y;
            this.accel.x = e.accel.x;
            this.accel.y = e.accel.y;
            this.health = e.health;
            this._killed = e._killed;
            this.standing = e.standing;
            this.type = e.type;
            this.checkAgainst = e.checkAgainst;
            this.collides = e.collides;
            ig.merge(this, d)
        },
        addAnim: function(b, c, d, e) {
            if (!this.animSheet) throw "No animSheet to add the animation " +
                b + " to.";
            c = new ig.Animation(this.animSheet, c, d, e);
            this.anims[b] = c;
            this.currentAnim || (this.currentAnim = c);
            return c
        },
        update: function() {
            this.last.x = this.pos.x;
            this.last.y = this.pos.y;
            this.vel.y += ig.game.gravity * ig.system.tick * this.gravityFactor;
            this.vel.x = this.getNewVelocity(this.vel.x, this.accel.x, this.friction.x, this.maxVel.x);
            this.vel.y = this.getNewVelocity(this.vel.y, this.accel.y, this.friction.y, this.maxVel.y);
            var b = ig.game.collisionMap.trace(this.pos.x, this.pos.y, this.vel.x * ig.system.tick, this.vel.y *
                ig.system.tick, this.size.x, this.size.y);
            this.handleMovementTrace(b);
            this.currentAnim && this.currentAnim.update()
        },
        getNewVelocity: function(b, c, d, e) {
            return c ? (b + c * ig.system.tick).limit(-e, e) : d ? (c = d * ig.system.tick, 0 < b - c ? b - c : 0 > b + c ? b + c : 0) : b.limit(-e, e)
        },
        handleMovementTrace: function(b) {
            this.standing = !1;
            b.collision.y && (0 < this.bounciness && Math.abs(this.vel.y) > this.minBounceVelocity ? this.vel.y *= -this.bounciness : (0 < this.vel.y && (this.standing = !0), this.vel.y = 0));
            b.collision.x && (this.vel.x = 0 < this.bounciness && Math.abs(this.vel.x) >
                this.minBounceVelocity ? this.vel.x * -this.bounciness : 0);
            if (b.collision.slope) {
                var c = b.collision.slope;
                if (0 < this.bounciness) {
                    var d = this.vel.x * c.nx + this.vel.y * c.ny;
                    this.vel.x = (this.vel.x - 2 * c.nx * d) * this.bounciness;
                    this.vel.y = (this.vel.y - 2 * c.ny * d) * this.bounciness
                } else d = (this.vel.x * c.x + this.vel.y * c.y) / (c.x * c.x + c.y * c.y), this.vel.x = c.x * d, this.vel.y = c.y * d, c = Math.atan2(c.x, c.y), c > this.slopeStanding.min && c < this.slopeStanding.max && (this.standing = !0)
            }
            this.pos = b.pos
        },
        draw: function() {
            this.currentAnim && this.currentAnim.draw(this.pos.x -
                this.offset.x - ig.game._rscreen.x, this.pos.y - this.offset.y - ig.game._rscreen.y)
        },
        kill: function() {
            ig.game.removeEntity(this)
        },
        receiveDamage: function(b) {
            this.health -= b;
            0 >= this.health && this.kill()
        },
        touches: function(b) {
            return !(this.pos.x >= b.pos.x + b.size.x || this.pos.x + this.size.x <= b.pos.x || this.pos.y >= b.pos.y + b.size.y || this.pos.y + this.size.y <= b.pos.y)
        },
        distanceTo: function(b) {
            var c = this.pos.x + this.size.x / 2 - (b.pos.x + b.size.x / 2);
            b = this.pos.y + this.size.y / 2 - (b.pos.y + b.size.y / 2);
            return Math.sqrt(c * c + b * b)
        },
        angleTo: function(b) {
            return Math.atan2(b.pos.y +
                b.size.y / 2 - (this.pos.y + this.size.y / 2), b.pos.x + b.size.x / 2 - (this.pos.x + this.size.x / 2))
        },
        check: function() {},
        collideWith: function() {},
        ready: function() {},
        erase: function() {}
    });
    ig.Entity._lastId = 0;
    ig.Entity.COLLIDES = {
        NEVER: 0,
        LITE: 1,
        PASSIVE: 2,
        ACTIVE: 4,
        FIXED: 8
    };
    ig.Entity.TYPE = {
        NONE: 0,
        A: 1,
        B: 2,
        BOTH: 3
    };
    ig.Entity.checkPair = function(b, c) {
        b.checkAgainst & c.type && b.check(c);
        c.checkAgainst & b.type && c.check(b);
        b.collides && c.collides && b.collides + c.collides > ig.Entity.COLLIDES.ACTIVE && ig.Entity.solveCollision(b, c)
    };
    ig.Entity.solveCollision =
        function(b, c) {
            var d = null;
            if (b.collides == ig.Entity.COLLIDES.LITE || c.collides == ig.Entity.COLLIDES.FIXED) d = b;
            else if (c.collides == ig.Entity.COLLIDES.LITE || b.collides == ig.Entity.COLLIDES.FIXED) d = c;
            b.last.x + b.size.x > c.last.x && b.last.x < c.last.x + c.size.x ? (b.last.y < c.last.y ? ig.Entity.seperateOnYAxis(b, c, d) : ig.Entity.seperateOnYAxis(c, b, d), b.collideWith(c, "y"), c.collideWith(b, "y")) : b.last.y + b.size.y > c.last.y && b.last.y < c.last.y + c.size.y && (b.last.x < c.last.x ? ig.Entity.seperateOnXAxis(b, c, d) : ig.Entity.seperateOnXAxis(c,
                b, d), b.collideWith(c, "x"), c.collideWith(b, "x"))
        };
    ig.Entity.seperateOnXAxis = function(b, c, d) {
        var e = b.pos.x + b.size.x - c.pos.x;
        d ? (d.vel.x = -d.vel.x * d.bounciness + (b === d ? c : b).vel.x, c = ig.game.collisionMap.trace(d.pos.x, d.pos.y, d == b ? -e : e, 0, d.size.x, d.size.y), d.pos.x = c.pos.x) : (d = (b.vel.x - c.vel.x) / 2, b.vel.x = -d, c.vel.x = d, d = ig.game.collisionMap.trace(b.pos.x, b.pos.y, -e / 2, 0, b.size.x, b.size.y), b.pos.x = Math.floor(d.pos.x), b = ig.game.collisionMap.trace(c.pos.x, c.pos.y, e / 2, 0, c.size.x, c.size.y), c.pos.x = Math.ceil(b.pos.x))
    };
    ig.Entity.seperateOnYAxis = function(b, c, d) {
        var e = b.pos.y + b.size.y - c.pos.y;
        if (d) {
            c = b === d ? c : b;
            d.vel.y = -d.vel.y * d.bounciness + c.vel.y;
            var f = 0;
            d == b && Math.abs(d.vel.y - c.vel.y) < d.minBounceVelocity && (d.standing = !0, f = c.vel.x * ig.system.tick);
            b = ig.game.collisionMap.trace(d.pos.x, d.pos.y, f, d == b ? -e : e, d.size.x, d.size.y);
            d.pos.y = b.pos.y;
            d.pos.x = b.pos.x
        } else ig.game.gravity && (c.standing || 0 < b.vel.y) ? (d = ig.game.collisionMap.trace(b.pos.x, b.pos.y, 0, -(b.pos.y + b.size.y - c.pos.y), b.size.x, b.size.y), b.pos.y = d.pos.y, 0 < b.bounciness &&
            b.vel.y > b.minBounceVelocity ? b.vel.y *= -b.bounciness : (b.standing = !0, b.vel.y = 0)) : (d = (b.vel.y - c.vel.y) / 2, b.vel.y = -d, c.vel.y = d, f = c.vel.x * ig.system.tick, d = ig.game.collisionMap.trace(b.pos.x, b.pos.y, f, -e / 2, b.size.x, b.size.y), b.pos.y = d.pos.y, b = ig.game.collisionMap.trace(c.pos.x, c.pos.y, 0, e / 2, c.size.x, c.size.y), c.pos.y = b.pos.y)
    }
});
ig.baked = !0;
ig.module("impact.map").defines(function() {
    ig.Map = ig.Class.extend({
        tilesize: 8,
        width: 1,
        height: 1,
        data: [
            []
        ],
        name: null,
        init: function(b, c) {
            this.tilesize = b;
            this.data = c;
            this.height = c.length;
            this.width = c[0].length;
            this.pxWidth = this.width * this.tilesize;
            this.pxHeight = this.height * this.tilesize
        },
        getTile: function(b, c) {
            var d = Math.floor(b / this.tilesize),
                e = Math.floor(c / this.tilesize);
            return 0 <= d && d < this.width && 0 <= e && e < this.height ? this.data[e][d] : 0
        },
        setTile: function(b, c, d) {
            b = Math.floor(b / this.tilesize);
            c = Math.floor(c /
                this.tilesize);
            0 <= b && b < this.width && 0 <= c && c < this.height && (this.data[c][b] = d)
        }
    })
});
ig.baked = !0;
ig.module("impact.collision-map").requires("impact.map").defines(function() {
    ig.CollisionMap = ig.Map.extend({
        lastSlope: 1,
        tiledef: null,
        init: function(b, c, f) {
            this.parent(b, c);
            this.tiledef = f || ig.CollisionMap.defaultTileDef;
            for (var j in this.tiledef) j | 0 > this.lastSlope && (this.lastSlope = j | 0)
        },
        trace: function(b, c, f, j, p, m) {
            var s = {
                    collision: {
                        x: !1,
                        y: !1,
                        slope: !1
                    },
                    pos: {
                        x: b,
                        y: c
                    },
                    tile: {
                        x: 0,
                        y: 0
                    }
                },
                v = Math.ceil(Math.max(Math.abs(f), Math.abs(j)) / this.tilesize);
            if (1 < v)
                for (var A = f / v, B = j / v, z = 0; z < v && (A || B) && !(this._traceStep(s,
                    b, c, A, B, p, m, f, j, z), b = s.pos.x, c = s.pos.y, s.collision.x && (f = A = 0), s.collision.y && (j = B = 0), s.collision.slope); z++);
            else this._traceStep(s, b, c, f, j, p, m, f, j, 0);
            return s
        },
        _traceStep: function(b, c, f, j, p, m, s, v, A, B) {
            b.pos.x += j;
            b.pos.y += p;
            var z = 0;
            if (j) {
                var x = 0 < j ? m : 0,
                    I = 0 > j ? this.tilesize : 0,
                    z = Math.max(Math.floor(f / this.tilesize), 0),
                    E = Math.min(Math.ceil((f + s) / this.tilesize), this.height);
                j = Math.floor((b.pos.x + x) / this.tilesize);
                var t = Math.floor((c + x) / this.tilesize);
                if (0 < B || j == t || 0 > t || t >= this.width) t = -1;
                if (0 <= j && j < this.width)
                    for (var H =
                        z; H < E && !(-1 != t && (z = this.data[H][t], 1 < z && z <= this.lastSlope && this._checkTileDef(b, z, c, f, v, A, m, s, t, H))); H++)
                        if (z = this.data[H][j], 1 == z || z > this.lastSlope || 1 < z && this._checkTileDef(b, z, c, f, v, A, m, s, j, H)) {
                            if (1 < z && z <= this.lastSlope && b.collision.slope) break;
                            b.collision.x = !0;
                            b.tile.x = z;
                            c = b.pos.x = j * this.tilesize - x + I;
                            v = 0;
                            break
                        }
            }
            if (p) {
                x = 0 < p ? s : 0;
                p = 0 > p ? this.tilesize : 0;
                z = Math.max(Math.floor(b.pos.x / this.tilesize), 0);
                I = Math.min(Math.ceil((b.pos.x + m) / this.tilesize), this.width);
                H = Math.floor((b.pos.y + x) / this.tilesize);
                E = Math.floor((f + x) / this.tilesize);
                if (0 < B || H == E || 0 > E || E >= this.height) E = -1;
                if (0 <= H && H < this.height)
                    for (j = z; j < I && !(-1 != E && (z = this.data[E][j], 1 < z && z <= this.lastSlope && this._checkTileDef(b, z, c, f, v, A, m, s, j, E))); j++)
                        if (z = this.data[H][j], 1 == z || z > this.lastSlope || 1 < z && this._checkTileDef(b, z, c, f, v, A, m, s, j, H)) {
                            if (1 < z && z <= this.lastSlope && b.collision.slope) break;
                            b.collision.y = !0;
                            b.tile.y = z;
                            b.pos.y = H * this.tilesize - x + p;
                            break
                        }
            }
        },
        _checkTileDef: function(b, c, f, j, p, m, s, v, A, B) {
            var z = this.tiledef[c];
            if (!z) return !1;
            c = (z[2] -
                z[0]) * this.tilesize;
            var x = (z[3] - z[1]) * this.tilesize,
                I = z[4];
            s = f + p + (0 > x ? s : 0) - (A + z[0]) * this.tilesize;
            v = j + m + (0 < c ? v : 0) - (B + z[1]) * this.tilesize;
            if (0 < c * v - x * s) {
                if (0 > p * -x + m * c) return I;
                A = Math.sqrt(c * c + x * x);
                B = x / A;
                A = -c / A;
                var E = s * B + v * A,
                    z = B * E,
                    E = A * E;
                if (z * z + E * E >= p * p + m * m) return I || 0.5 > c * (v - m) - x * (s - p);
                b.pos.x = f + p - z;
                b.pos.y = j + m - E;
                b.collision.slope = {
                    x: c,
                    y: x,
                    nx: B,
                    ny: A
                };
                return !0
            }
            return !1
        }
    });
    var b = 1 / 3,
        c = 2 / 3;
    ig.CollisionMap.defaultTileDef = {
        5: [0, 1, 1, c, !0],
        6: [0, c, 1, b, !0],
        7: [0, b, 1, 0, !0],
        3: [0, 1, 1, 0.5, !0],
        4: [0, 0.5, 1, 0, !0],
        2: [0,
            1, 1, 0, !0
        ],
        10: [0.5, 1, 1, 0, !0],
        21: [0, 1, 0.5, 0, !0],
        32: [c, 1, 1, 0, !0],
        43: [b, 1, c, 0, !0],
        54: [0, 1, b, 0, !0],
        27: [0, 0, 1, b, !0],
        28: [0, b, 1, c, !0],
        29: [0, c, 1, 1, !0],
        25: [0, 0, 1, 0.5, !0],
        26: [0, 0.5, 1, 1, !0],
        24: [0, 0, 1, 1, !0],
        11: [0, 0, 0.5, 1, !0],
        22: [0.5, 0, 1, 1, !0],
        33: [0, 0, b, 1, !0],
        44: [b, 0, c, 1, !0],
        55: [c, 0, 1, 1, !0],
        16: [1, b, 0, 0, !0],
        17: [1, c, 0, b, !0],
        18: [1, 1, 0, c, !0],
        14: [1, 0.5, 0, 0, !0],
        15: [1, 1, 0, 0.5, !0],
        13: [1, 1, 0, 0, !0],
        8: [0.5, 1, 0, 0, !0],
        19: [1, 1, 0.5, 0, !0],
        30: [b, 1, 0, 0, !0],
        41: [c, 1, b, 0, !0],
        52: [1, 1, c, 0, !0],
        38: [1, c, 0, 1, !0],
        39: [1, b, 0, c, !0],
        40: [1, 0,
            0, b, !0
        ],
        36: [1, 0.5, 0, 1, !0],
        37: [1, 0, 0, 0.5, !0],
        35: [1, 0, 0, 1, !0],
        9: [1, 0, 0.5, 1, !0],
        20: [0.5, 0, 0, 1, !0],
        31: [1, 0, c, 1, !0],
        42: [c, 0, b, 1, !0],
        53: [b, 0, 0, 1, !0],
        12: [0, 0, 1, 0, !1],
        23: [1, 1, 0, 1, !1],
        34: [1, 0, 1, 1, !1],
        45: [0, 1, 0, 0, !1]
    };
    ig.CollisionMap.staticNoCollision = {
        trace: function(b, c, f, j) {
            return {
                collision: {
                    x: !1,
                    y: !1,
                    slope: !1
                },
                pos: {
                    x: b + f,
                    y: c + j
                },
                tile: {
                    x: 0,
                    y: 0
                }
            }
        }
    }
});
ig.baked = !0;
ig.module("impact.background-map").requires("impact.map", "impact.image").defines(function() {
    ig.BackgroundMap = ig.Map.extend({
        tiles: null,
        scroll: {
            x: 0,
            y: 0
        },
        distance: 1,
        repeat: !1,
        tilesetName: "",
        foreground: !1,
        enabled: !0,
        preRender: !1,
        preRenderedChunks: null,
        chunkSize: 512,
        debugChunks: !1,
        anims: {},
        init: function(b, c, d) {
            this.parent(b, c);
            this.setTileset(d)
        },
        setTileset: function(b) {
            this.tilesetName = b instanceof ig.Image ? b.path : b;
            this.tiles = new ig.Image(this.tilesetName);
            this.preRenderedChunks = null
        },
        setScreenPos: function(b,
            c) {
            this.scroll.x = b / this.distance;
            this.scroll.y = c / this.distance
        },
        preRenderMapToChunks: function() {
            var b = this.width * this.tilesize * ig.system.scale,
                c = this.height * this.tilesize * ig.system.scale;
            this.chunkSize = Math.min(Math.max(b, c), this.chunkSize);
            var d = Math.ceil(b / this.chunkSize),
                e = Math.ceil(c / this.chunkSize);
            this.preRenderedChunks = [];
            for (var f = 0; f < e; f++) {
                this.preRenderedChunks[f] = [];
                for (var j = 0; j < d; j++) this.preRenderedChunks[f][j] = this.preRenderChunk(j, f, j == d - 1 ? b - j * this.chunkSize : this.chunkSize, f == e - 1 ?
                    c - f * this.chunkSize : this.chunkSize)
            }
        },
        preRenderChunk: function(b, c, d, e) {
            var f = d / this.tilesize / ig.system.scale + 1,
                j = e / this.tilesize / ig.system.scale + 1,
                p = b * this.chunkSize / ig.system.scale % this.tilesize,
                m = c * this.chunkSize / ig.system.scale % this.tilesize;
            b = Math.floor(b * this.chunkSize / this.tilesize / ig.system.scale);
            c = Math.floor(c * this.chunkSize / this.tilesize / ig.system.scale);
            var s = ig.$new("canvas");
            s.width = d;
            s.height = e;
            s.retinaResolutionEnabled = !1;
            e = s.getContext("2d");
            ig.System.scaleMode(s, e);
            d = ig.system.context;
            ig.system.context = e;
            for (e = 0; e < f; e++)
                for (var v = 0; v < j; v++)
                    if (e + b < this.width && v + c < this.height) {
                        var A = this.data[v + c][e + b];
                        A && this.tiles.drawTile(e * this.tilesize - p, v * this.tilesize - m, A - 1, this.tilesize)
                    }
            ig.system.context = d;
            return s
        },
        draw: function() {
            this.tiles.loaded && this.enabled && (this.preRender ? this.drawPreRendered() : this.drawTiled())
        },
        drawPreRendered: function() {
            this.preRenderedChunks || this.preRenderMapToChunks();
            var b = ig.system.getDrawPos(this.scroll.x),
                c = ig.system.getDrawPos(this.scroll.y);
            if (this.repeat) var d =
                this.width * this.tilesize * ig.system.scale,
                b = (b % d + d) % d,
                d = this.height * this.tilesize * ig.system.scale,
                c = (c % d + d) % d;
            var d = Math.max(Math.floor(b / this.chunkSize), 0),
                e = Math.max(Math.floor(c / this.chunkSize), 0),
                f = Math.ceil((b + ig.system.realWidth) / this.chunkSize),
                j = Math.ceil((c + ig.system.realHeight) / this.chunkSize),
                p = this.preRenderedChunks[0].length,
                m = this.preRenderedChunks.length;
            this.repeat || (f = Math.min(f, p), j = Math.min(j, m));
            for (var s = 0; e < j; e++) {
                for (var v = 0, A = d; A < f; A++) {
                    var B = this.preRenderedChunks[e % m][A % p],
                        z = -b + A * this.chunkSize - v,
                        x = -c + e * this.chunkSize - s;
                    ig.system.context.drawImage(B, z, x);
                    ig.Image.drawCount++;
                    this.debugChunks && (ig.system.context.strokeStyle = "#f0f", ig.system.context.strokeRect(z, x, this.chunkSize, this.chunkSize));
                    this.repeat && B.width < this.chunkSize && z + B.width < ig.system.realWidth && (v += this.chunkSize - B.width, f++)
                }
                this.repeat && B.height < this.chunkSize && x + B.height < ig.system.realHeight && (s += this.chunkSize - B.height, j++)
            }
        },
        drawTiled: function() {
            for (var b = 0, c = null, d = (this.scroll.x / this.tilesize).toInt(),
                e = (this.scroll.y / this.tilesize).toInt(), f = this.scroll.x % this.tilesize, j = this.scroll.y % this.tilesize, p = -f - this.tilesize, f = ig.system.width + this.tilesize - f, m = ig.system.height + this.tilesize - j, s = -1, j = -j - this.tilesize; j < m; s++, j += this.tilesize) {
                var v = s + e;
                if (v >= this.height || 0 > v) {
                    if (!this.repeat) continue;
                    v = (v % this.height + this.height) % this.height
                }
                for (var A = -1, B = p; B < f; A++, B += this.tilesize) {
                    b = A + d;
                    if (b >= this.width || 0 > b) {
                        if (!this.repeat) continue;
                        b = (b % this.width + this.width) % this.width
                    }
                    if (b = this.data[v][b])(c = this.anims[b -
                        1]) ? c.draw(B, j) : this.tiles.drawTile(B, j, b - 1, this.tilesize)
                }
            }
        }
    })
});
ig.baked = !0;
ig.module("impact.game").requires("impact.impact", "impact.entity", "impact.collision-map", "impact.background-map").defines(function() {
    ig.Game = ig.Class.extend({
        clearColor: "#000000",
        gravity: 0,
        screen: {
            x: 0,
            y: 0
        },
        _rscreen: {
            x: 0,
            y: 0
        },
        entities: [],
        namedEntities: {},
        collisionMap: ig.CollisionMap.staticNoCollision,
        backgroundMaps: [],
        backgroundAnims: {},
        autoSort: !1,
        sortBy: null,
        cellSize: 64,
        _deferredKill: [],
        _levelToLoad: null,
        _doSortEntities: !1,
        staticInstantiate: function() {
            this.sortBy = this.sortBy || ig.Game.SORT.Z_INDEX;
            ig.game = this;
            return null
        },
        loadLevel: function(b) {
            this.screen = {
                x: 0,
                y: 0
            };
            this.entities = [];
            this.namedEntities = {};
            for (var c = 0; c < b.entities.length; c++) {
                var d = b.entities[c];
                this.spawnEntity(d.type, d.x, d.y, d.settings)
            }
            this.sortEntities();
            this.collisionMap = ig.CollisionMap.staticNoCollision;
            this.backgroundMaps = [];
            for (c = 0; c < b.layer.length; c++)
                if (d = b.layer[c], "collision" == d.name) this.collisionMap = new ig.CollisionMap(d.tilesize, d.data);
                else {
                    var e = new ig.BackgroundMap(d.tilesize, d.data, d.tilesetName);
                    e.anims = this.backgroundAnims[d.tilesetName] || {};
                    e.repeat = d.repeat;
                    e.distance = d.distance;
                    e.foreground = !!d.foreground;
                    e.preRender = !!d.preRender;
                    e.name = d.name;
                    this.backgroundMaps.push(e)
                }
            for (c = 0; c < this.entities.length; c++) this.entities[c].ready()
        },
        loadLevelDeferred: function(b) {
            this._levelToLoad = b
        },
        getMapByName: function(b) {
            if ("collision" == b) return this.collisionMap;
            for (var c = 0; c < this.backgroundMaps.length; c++)
                if (this.backgroundMaps[c].name == b) return this.backgroundMaps[c];
            return null
        },
        getEntityByName: function(b) {
            return this.namedEntities[b]
        },
        getEntitiesByType: function(b) {
            b =
                "string" === typeof b ? ig.global[b] : b;
            for (var c = [], d = 0; d < this.entities.length; d++) {
                var e = this.entities[d];
                e instanceof b && !e._killed && c.push(e)
            }
            return c
        },
        spawnEntity: function(b, c, d, e) {
            var f = "string" === typeof b ? ig.global[b] : b;
            if (!f) throw "Can't spawn entity of type " + b;
            b = new f(c, d, e || {});
            this.entities.push(b);
            b.name && (this.namedEntities[b.name] = b);
            return b
        },
        sortEntities: function() {
            this.entities.sort(this.sortBy)
        },
        sortEntitiesDeferred: function() {
            this._doSortEntities = !0
        },
        removeEntity: function(b) {
            b.name &&
                delete this.namedEntities[b.name];
            b._killed = !0;
            b.type = ig.Entity.TYPE.NONE;
            b.checkAgainst = ig.Entity.TYPE.NONE;
            b.collides = ig.Entity.COLLIDES.NEVER;
            this._deferredKill.push(b)
        },
        run: function() {
            this.update();
            this.draw()
        },
        update: function() {
            this._levelToLoad && (this.loadLevel(this._levelToLoad), this._levelToLoad = null);
            this.updateEntities();
            this.checkEntities();
            for (var b = 0; b < this._deferredKill.length; b++) this._deferredKill[b].erase(), this.entities.erase(this._deferredKill[b]);
            this._deferredKill = [];
            if (this._doSortEntities ||
                this.autoSort) this.sortEntities(), this._doSortEntities = !1;
            for (var c in this.backgroundAnims) {
                var b = this.backgroundAnims[c],
                    d;
                for (d in b) b[d].update()
            }
        },
        updateEntities: function() {
            for (var b = 0; b < this.entities.length; b++) {
                var c = this.entities[b];
                c._killed || c.update()
            }
        },
        draw: function() {
            this.clearColor && ig.system.clear(this.clearColor);
            this._rscreen.x = ig.system.getDrawPos(this.screen.x) / ig.system.scale;
            this._rscreen.y = ig.system.getDrawPos(this.screen.y) / ig.system.scale;
            var b;
            for (b = 0; b < this.backgroundMaps.length; b++) {
                var c =
                    this.backgroundMaps[b];
                if (c.foreground) break;
                c.setScreenPos(this.screen.x, this.screen.y);
                c.draw()
            }
            this.drawEntities();
            for (b; b < this.backgroundMaps.length; b++) c = this.backgroundMaps[b], c.setScreenPos(this.screen.x, this.screen.y), c.draw()
        },
        drawEntities: function() {
            for (var b = 0; b < this.entities.length; b++) this.entities[b].draw()
        },
        checkEntities: function() {
            for (var b = {}, c = 0; c < this.entities.length; c++) {
                var d = this.entities[c];
                if (!(d.type == ig.Entity.TYPE.NONE && d.checkAgainst == ig.Entity.TYPE.NONE && d.collides == ig.Entity.COLLIDES.NEVER))
                    for (var e = {}, f = Math.floor(d.pos.y / this.cellSize), j = Math.floor((d.pos.x + d.size.x) / this.cellSize) + 1, p = Math.floor((d.pos.y + d.size.y) / this.cellSize) + 1, m = Math.floor(d.pos.x / this.cellSize); m < j; m++)
                        for (var s = f; s < p; s++)
                            if (b[m])
                                if (b[m][s]) {
                                    for (var v = b[m][s], A = 0; A < v.length; A++) d.touches(v[A]) && !e[v[A].id] && (e[v[A].id] = !0, ig.Entity.checkPair(d, v[A]));
                                    v.push(d)
                                } else b[m][s] = [d];
                else b[m] = {}, b[m][s] = [d]
            }
        }
    });
    ig.Game.SORT = {
        Z_INDEX: function(b, c) {
            return b.zIndex - c.zIndex
        },
        POS_X: function(b, c) {
            return b.pos.x + b.size.x - (c.pos.x +
                c.size.x)
        },
        POS_Y: function(b, c) {
            return b.pos.y + b.size.y - (c.pos.y + c.size.y)
        }
    }
});
ig.baked = !0;
ig.module("impact.debug.menu").requires("dom.ready", "impact.system").defines(function() {
    ig.System.inject({
        run: function() {
            ig.debug.beforeRun();
            this.parent();
            ig.debug.afterRun()
        },
        setGameNow: function(b) {
            this.parent(b);
            ig.debug.ready()
        }
    });
    ig.Debug = ig.Class.extend({
        options: {},
        panels: {},
        numbers: {},
        container: null,
        panelMenu: null,
        activePanel: null,
        debugTime: 0,
        debugTickAvg: 0.016,
        debugRealTime: Date.now(),
        init: function() {
            var b = ig.$new("link");
            b.rel = "stylesheet";
            b.type = "text/css";
            b.href = ig.prefix + "lib/impact/debug/debug.css";
            ig.$("body")[0].appendChild(b);
            this.container = ig.$new("div");
            this.container.className = "ig_debug";
            ig.$("body")[0].appendChild(this.container);
            this.panelMenu = ig.$new("div");
            this.panelMenu.innerHTML = '<div class="ig_debug_head">Impact.Debug:</div>';
            this.panelMenu.className = "ig_debug_panel_menu";
            this.container.appendChild(this.panelMenu);
            this.numberContainer = ig.$new("div");
            this.numberContainer.className = "ig_debug_stats";
            this.panelMenu.appendChild(this.numberContainer);
            window.console && window.console.log &&
                window.console.assert && (ig.log = console.log.bind ? console.log.bind(console) : console.log, ig.assert = console.assert.bind ? console.assert.bind(console) : console.assert);
            ig.show = this.showNumber.bind(this)
        },
        addNumber: function(b) {
            var c = ig.$new("span");
            this.numberContainer.appendChild(c);
            this.numberContainer.appendChild(document.createTextNode(b));
            this.numbers[b] = c
        },
        showNumber: function(b, c, d) {
            this.numbers[b] || this.addNumber(b, d);
            this.numbers[b].textContent = c
        },
        addPanel: function(b) {
            var c = new b.type(b.name, b.label);
            if (b.options)
                for (var d = 0; d < b.options.length; d++) {
                    var e = b.options[d];
                    c.addOption(new ig.DebugOption(e.name, e.object, e.property))
                }
            this.panels[c.name] = c;
            c.container.style.display = "none";
            this.container.appendChild(c.container);
            b = ig.$new("div");
            b.className = "ig_debug_menu_item";
            b.textContent = c.label;
            b.addEventListener("click", function() {
                this.togglePanel(c)
            }.bind(this), !1);
            c.menuItem = b;
            e = !1;
            for (d = 1; d < this.panelMenu.childNodes.length; d++) {
                var f = this.panelMenu.childNodes[d];
                if (f.textContent > c.label) {
                    this.panelMenu.insertBefore(b,
                        f);
                    e = !0;
                    break
                }
            }
            e || this.panelMenu.appendChild(b)
        },
        showPanel: function(b) {
            this.togglePanel(this.panels[b])
        },
        togglePanel: function(b) {
            b != this.activePanel && this.activePanel && (this.activePanel.toggle(!1), this.activePanel.menuItem.className = "ig_debug_menu_item", this.activePanel = null);
            var c = "block" != b.container.style.display;
            b.toggle(c);
            b.menuItem.className = "ig_debug_menu_item" + (c ? " active" : "");
            c && (this.activePanel = b)
        },
        ready: function() {
            for (var b in this.panels) this.panels[b].ready()
        },
        beforeRun: function() {
            var b =
                Date.now();
            this.debugTickAvg = 0.8 * this.debugTickAvg + 0.2 * (b - this.debugRealTime);
            this.debugRealTime = b;
            this.activePanel && this.activePanel.beforeRun()
        },
        afterRun: function() {
            var b = Date.now() - this.debugRealTime;
            this.debugTime = 0.8 * this.debugTime + 0.2 * b;
            this.activePanel && this.activePanel.afterRun();
            this.showNumber("ms", this.debugTime.toFixed(2));
            this.showNumber("fps", Math.round(1E3 / this.debugTickAvg));
            this.showNumber("draws", ig.Image.drawCount);
            ig.game && ig.game.entities && this.showNumber("entities", ig.game.entities.length);
            ig.Image.drawCount = 0
        }
    });
    ig.DebugPanel = ig.Class.extend({
        active: !1,
        container: null,
        options: [],
        panels: [],
        label: "",
        name: "",
        init: function(b, c) {
            this.name = b;
            this.label = c;
            this.container = ig.$new("div");
            this.container.className = "ig_debug_panel " + this.name
        },
        toggle: function(b) {
            this.active = b;
            this.container.style.display = b ? "block" : "none"
        },
        addPanel: function(b) {
            this.panels.push(b);
            this.container.appendChild(b.container)
        },
        addOption: function(b) {
            this.options.push(b);
            this.container.appendChild(b.container)
        },
        ready: function() {},
        beforeRun: function() {},
        afterRun: function() {}
    });
    ig.DebugOption = ig.Class.extend({
        name: "",
        labelName: "",
        className: "ig_debug_option",
        label: null,
        mark: null,
        container: null,
        active: !1,
        colors: {
            enabled: "#fff",
            disabled: "#444"
        },
        init: function(b, c, d) {
            this.name = b;
            this.object = c;
            this.property = d;
            this.active = this.object[this.property];
            this.container = ig.$new("div");
            this.container.className = "ig_debug_option";
            this.label = ig.$new("span");
            this.label.className = "ig_debug_label";
            this.label.textContent = this.name;
            this.mark = ig.$new("span");
            this.mark.className = "ig_debug_label_mark";
            this.container.appendChild(this.mark);
            this.container.appendChild(this.label);
            this.container.addEventListener("click", this.click.bind(this), !1);
            this.setLabel()
        },
        setLabel: function() {
            this.mark.style.backgroundColor = this.active ? this.colors.enabled : this.colors.disabled
        },
        click: function(b) {
            this.active = !this.active;
            this.object[this.property] = this.active;
            this.setLabel();
            b.stopPropagation();
            b.preventDefault();
            return !1
        }
    });
    ig.debug = new ig.Debug
});
ig.baked = !0;
ig.module("impact.debug.entities-panel").requires("impact.debug.menu", "impact.entity").defines(function() {
    ig.Entity.inject({
        colors: {
            names: "#fff",
            velocities: "#0f0",
            boxes: "#f00"
        },
        draw: function() {
            this.parent();
            ig.Entity._debugShowBoxes && (ig.system.context.strokeStyle = this.colors.boxes, ig.system.context.lineWidth = 1, ig.system.context.strokeRect(ig.system.getDrawPos(this.pos.x.round() - ig.game.screen.x) - 0.5, ig.system.getDrawPos(this.pos.y.round() - ig.game.screen.y) - 0.5, this.size.x * ig.system.scale, this.size.y *
                ig.system.scale));
            if (ig.Entity._debugShowVelocities) {
                var b = this.pos.x + this.size.x / 2,
                    c = this.pos.y + this.size.y / 2;
                this._debugDrawLine(this.colors.velocities, b, c, b + this.vel.x, c + this.vel.y)
            }
            if (ig.Entity._debugShowNames && (this.name && (ig.system.context.fillStyle = this.colors.names, ig.system.context.fillText(this.name, ig.system.getDrawPos(this.pos.x - ig.game.screen.x), ig.system.getDrawPos(this.pos.y - ig.game.screen.y))), "object" == typeof this.target))
                for (var d in this.target)(b = ig.game.getEntityByName(this.target[d])) &&
                    this._debugDrawLine(this.colors.names, this.pos.x + this.size.x / 2, this.pos.y + this.size.y / 2, b.pos.x + b.size.x / 2, b.pos.y + b.size.y / 2)
        },
        _debugDrawLine: function(b, c, d, e, f) {
            ig.system.context.strokeStyle = b;
            ig.system.context.lineWidth = 1;
            ig.system.context.beginPath();
            ig.system.context.moveTo(ig.system.getDrawPos(c - ig.game.screen.x), ig.system.getDrawPos(d - ig.game.screen.y));
            ig.system.context.lineTo(ig.system.getDrawPos(e - ig.game.screen.x), ig.system.getDrawPos(f - ig.game.screen.y));
            ig.system.context.stroke();
            ig.system.context.closePath()
        }
    });
    ig.Entity._debugEnableChecks = !0;
    ig.Entity._debugShowBoxes = !1;
    ig.Entity._debugShowVelocities = !1;
    ig.Entity._debugShowNames = !1;
    ig.Entity.oldCheckPair = ig.Entity.checkPair;
    ig.Entity.checkPair = function(b, c) {
        ig.Entity._debugEnableChecks && ig.Entity.oldCheckPair(b, c)
    };
    ig.debug.addPanel({
        type: ig.DebugPanel,
        name: "entities",
        label: "Entities",
        options: [{
            name: "Checks & Collisions",
            object: ig.Entity,
            property: "_debugEnableChecks"
        }, {
            name: "Show Collision Boxes",
            object: ig.Entity,
            property: "_debugShowBoxes"
        }, {
            name: "Show Velocities",
            object: ig.Entity,
            property: "_debugShowVelocities"
        }, {
            name: "Show Names & Targets",
            object: ig.Entity,
            property: "_debugShowNames"
        }]
    })
});
ig.baked = !0;
ig.module("impact.debug.maps-panel").requires("impact.debug.menu", "impact.game", "impact.background-map").defines(function() {
    ig.Game.inject({
        loadLevel: function(b) {
            this.parent(b);
            ig.debug.panels.maps.load(this)
        }
    });
    ig.DebugMapsPanel = ig.DebugPanel.extend({
        maps: [],
        mapScreens: [],
        init: function(b, c) {
            this.parent(b, c);
            this.load()
        },
        load: function(b) {
            this.options = [];
            this.panels = [];
            if (!b || !b.backgroundMaps.length) this.container.innerHTML = "<em>No Maps Loaded</em>";
            else {
                this.maps = b.backgroundMaps;
                this.mapScreens = [];
                this.container.innerHTML = "";
                for (b = 0; b < this.maps.length; b++) {
                    var c = this.maps[b],
                        d = new ig.DebugPanel(b, "Layer " + b),
                        e = new ig.$new("strong");
                    e.textContent = b + ": " + c.tiles.path;
                    d.container.appendChild(e);
                    d.addOption(new ig.DebugOption("Enabled", c, "enabled"));
                    d.addOption(new ig.DebugOption("Pre Rendered", c, "preRender"));
                    d.addOption(new ig.DebugOption("Show Chunks", c, "debugChunks"));
                    this.generateMiniMap(d, c, b);
                    this.addPanel(d)
                }
            }
        },
        generateMiniMap: function(b, c, d) {
            var e = ig.system.scale,
                f = ig.$new("canvas"),
                j = f.getContext("2d"),
                p = c.tiles.width * e,
                m = c.tiles.height * e,
                s = p / c.tilesize,
                v = m / c.tilesize;
            f.width = s;
            f.height = v;
            j.drawImage(c.tiles.data, 0, 0, p, m, 0, 0, s, v);
            j = ig.$new("canvas");
            j.width = c.width * e;
            j.height = c.height * e;
            v = j.getContext("2d");
            ig.game.clearColor && (v.fillStyle = ig.game.clearColor, v.fillRect(0, 0, p, m));
            for (m = p = 0; m < c.width; m++)
                for (var A = 0; A < c.height; A++)(p = c.data[A][m]) && v.drawImage(f, Math.floor((p - 1) * e % s), Math.floor((p - 1) * e / s) * e, e, e, m * e, A * e, e, e);
            f = ig.$new("div");
            f.className = "ig_debug_map_container";
            f.style.width = c.width * e + "px";
            f.style.height = c.height * e + "px";
            s = ig.$new("div");
            s.className = "ig_debug_map_screen";
            s.style.width = ig.system.width / c.tilesize * e - 2 + "px";
            s.style.height = ig.system.height / c.tilesize * e - 2 + "px";
            this.mapScreens[d] = s;
            f.appendChild(j);
            f.appendChild(s);
            b.container.appendChild(f)
        },
        afterRun: function() {
            for (var b = ig.system.scale, c = 0; c < this.maps.length; c++) {
                var d = this.maps[c],
                    e = this.mapScreens[c];
                if (d && e) {
                    var f = d.scroll.x / d.tilesize,
                        j = d.scroll.y / d.tilesize;
                    d.repeat && (f %= d.width, j %= d.height);
                    e.style.left = f * b + "px";
                    e.style.top = j * b + "px"
                }
            }
        }
    });
    ig.debug.addPanel({
        type: ig.DebugMapsPanel,
        name: "maps",
        label: "Background Maps"
    })
});
ig.baked = !0;
ig.module("impact.debug.graph-panel").requires("impact.debug.menu", "impact.system", "impact.game", "impact.image").defines(function() {
    ig.Game.inject({
        draw: function() {
            ig.graph.beginClock("draw");
            this.parent();
            ig.graph.endClock("draw")
        },
        update: function() {
            ig.graph.beginClock("update");
            this.parent();
            ig.graph.endClock("update")
        },
        checkEntities: function() {
            ig.graph.beginClock("checks");
            this.parent();
            ig.graph.endClock("checks")
        }
    });
    ig.DebugGraphPanel = ig.DebugPanel.extend({
        clocks: {},
        marks: [],
        textY: 0,
        height: 128,
        ms: 64,
        timeBeforeRun: 0,
        init: function(b, c) {
            this.parent(b, c);
            this.mark16ms = (this.height - 16 * (this.height / this.ms)).round();
            this.mark33ms = (this.height - 33 * (this.height / this.ms)).round();
            this.msHeight = this.height / this.ms;
            this.graph = ig.$new("canvas");
            this.graph.width = window.innerWidth;
            this.graph.height = this.height;
            this.container.appendChild(this.graph);
            this.ctx = this.graph.getContext("2d");
            this.ctx.fillStyle = "#444";
            this.ctx.fillRect(0, this.mark16ms, this.graph.width, 1);
            this.ctx.fillRect(0, this.mark33ms, this.graph.width,
                1);
            this.addGraphMark("16ms", this.mark16ms);
            this.addGraphMark("33ms", this.mark33ms);
            this.addClock("draw", "Draw", "#13baff");
            this.addClock("update", "Entity Update", "#bb0fff");
            this.addClock("checks", "Entity Checks & Collisions", "#a2e908");
            this.addClock("lag", "System Lag", "#f26900");
            ig.mark = this.mark.bind(this);
            ig.graph = this
        },
        addGraphMark: function(b, c) {
            var d = ig.$new("span");
            d.className = "ig_debug_graph_mark";
            d.textContent = b;
            d.style.top = c.round() + "px";
            this.container.appendChild(d)
        },
        addClock: function(b, c,
            d) {
            var e = ig.$new("span");
            e.className = "ig_debug_legend_color";
            e.style.backgroundColor = d;
            var f = ig.$new("span");
            f.className = "ig_debug_legend_number";
            f.appendChild(document.createTextNode("0"));
            var j = ig.$new("span");
            j.className = "ig_debug_legend";
            j.appendChild(e);
            j.appendChild(document.createTextNode(c + " ("));
            j.appendChild(f);
            j.appendChild(document.createTextNode("ms)"));
            this.container.appendChild(j);
            this.clocks[b] = {
                description: c,
                color: d,
                current: 0,
                start: Date.now(),
                avg: 0,
                html: f
            }
        },
        beginClock: function(b,
            c) {
            this.clocks[b].start = Date.now() + (c || 0)
        },
        endClock: function(b) {
            b = this.clocks[b];
            b.current = Math.round(Date.now() - b.start);
            b.avg = 0.8 * b.avg + 0.2 * b.current
        },
        mark: function(b, c) {
            this.active && this.marks.push({
                msg: b,
                color: c || "#fff"
            })
        },
        beforeRun: function() {
            this.endClock("lag");
            this.timeBeforeRun = Date.now()
        },
        afterRun: function() {
            var b = Date.now() - this.timeBeforeRun;
            this.beginClock("lag", Math.max(1E3 / ig.system.fps - b, 0));
            var b = this.graph.width - 1,
                c = this.height;
            this.ctx.drawImage(this.graph, -1, 0);
            this.ctx.fillStyle =
                "#000";
            this.ctx.fillRect(b, 0, 1, this.height);
            this.ctx.fillStyle = "#444";
            this.ctx.fillRect(b, this.mark16ms, 1, 1);
            this.ctx.fillStyle = "#444";
            this.ctx.fillRect(b, this.mark33ms, 1, 1);
            for (var d in this.clocks) {
                var e = this.clocks[d];
                e.html.textContent = e.avg.toFixed(2);
                if (e.color && 0 < e.current) {
                    this.ctx.fillStyle = e.color;
                    var f = e.current * this.msHeight,
                        c = c - f;
                    this.ctx.fillRect(b, c, 1, f);
                    e.current = 0
                }
            }
            this.ctx.textAlign = "right";
            this.ctx.textBaseline = "top";
            this.ctx.globalAlpha = 0.5;
            for (d = 0; d < this.marks.length; d++) c = this.marks[d],
                this.ctx.fillStyle = c.color, this.ctx.fillRect(b, 0, 1, this.height), c.msg && (this.ctx.fillText(c.msg, b - 1, this.textY), this.textY = (this.textY + 8) % 32);
            this.ctx.globalAlpha = 1;
            this.marks = []
        }
    });
    ig.debug.addPanel({
        type: ig.DebugGraphPanel,
        name: "graph",
        label: "Performance"
    })
});
ig.baked = !0;
ig.module("impact.debug.debug").requires("impact.debug.entities-panel", "impact.debug.maps-panel", "impact.debug.graph-panel").defines(function() {});
ig.baked = !0;
ig.module("plugins.splash-loader").requires("impact.loader", "impact.animation").defines(function() {
    ig.SplashLoader = ig.Loader.extend({
        splash: new ig.Image("media/graphics/game/background/bg-level.png"),
        logo: new ig.Image("media/graphics/game/prop/logo.png"),
        loading: new ig.Image("media/graphics/game/background/load.png"),
        init: function(b, c) {
            this.parent(b, c);
            ig.ua.mobile 
//            && _SETTINGS.Ad.Mobile.Preroll.Enabled && MobileAdInGamePreroll.Initialize()
        },
        end: function() {
            this.parent();
            var b = 0 <= document.URL.indexOf("localhost") ?
                500 : 3E3;
            window.setTimeout("ig.system.setGame(MyGame)", b)
        },
        setupCustomAnimation: function() {
            this.customAnim = new ig.Animation(this.customAnim, 0.05, [0, 1, 2, 3, 4, 5]);
            this.customAnim.currentFrame = 0;
            ig.loadingScreen = this;
            ig.loadingScreen.animationTimer = window.setInterval("ig.loadingScreen.animate()", 100)
        },
        animate: function() {
            this.customAnim.currentFrame < this.customAnim.sequence.length ? this.customAnim.currentFrame++ : this.customAnim.currentFrame = 0;
            this.customAnim.gotoFrame(this.customAnim.currentFrame)
        },
        draw: function() {
            this._drawStatus +=
                (this.status - this._drawStatus) / 5;
            this.splash.draw(0, 0);
            this.logo.draw(ig.system.width / 2 - this.logo.width / 2, ig.system.height / 2 - this.logo.height / 2);
            var b = ig.system.context;
            b.drawImage(this.loading.data, 0, 0, this.loading.width, this.loading.height / 2, ig.system.width / 2 - this.loading.width / 2, ig.system.width / 2 + this.loading.height, this.loading.width, this.loading.height / 2);
            b.drawImage(this.loading.data, 0, this.loading.height / 2, this.loading.width, this.loading.height / 2, ig.system.width / 2 - this.loading.width / 2, ig.system.width /
                2 + this.loading.height + 1, this.loading.width * this._drawStatus, this.loading.height / 2);
            b.save();
            ig.system.context.font = "35px hole";
            ig.system.context.fillStyle = "#ffffff";
            ig.system.context.textAlign = "left";
            ig.system.context.fillText("Preload", ig.system.width, ig.system.height);
            b.restore()
        }
    })
});
ig.baked = !0;
ig.module("plugins.tween").requires("impact.entity").defines(function() {
    Array.prototype.indexOf || (Array.prototype.indexOf = function(b) {
        for (var c = 0; c < this.length; ++c)
            if (this[c] === b) return c;
        return -1
    });
    ig.Entity.prototype.tweens = [];
    ig.Entity.prototype._preTweenUpdate = ig.Entity.prototype.update;
    ig.Entity.prototype.update = function() {
        this._preTweenUpdate();
        if (0 < this.tweens.length) {
            for (var b = [], c = 0; c < this.tweens.length; c++) this.tweens[c].update(), this.tweens[c].complete || b.push(this.tweens[c]);
            this.tweens =
                b
        }
    };
    ig.Entity.prototype.tween = function(b, c, d) {
        b = new ig.Tween(this, b, c, d);
        this.tweens.push(b);
        return b
    };
    ig.Entity.prototype.pauseTweens = function() {
        for (var b = 0; b < this.tweens.length; b++) this.tweens[b].pause()
    };
    ig.Entity.prototype.resumeTweens = function() {
        for (var b = 0; b < this.tweens.length; b++) this.tweens[b].resume()
    };
    ig.Entity.prototype.stopTweens = function(b) {
        for (var c = 0; c < this.tweens.length; c++) this.tweens[c].stop(b)
    };
    ig.Tween = function(b, c, d, e) {
        var f = {},
            j = {},
            p = {},
            m = 0,
            s = !1,
            v = !1,
            A = !1;
        this.duration = d;
        this.paused =
            this.complete = !1;
        this.easing = ig.Tween.Easing.Linear.EaseNone;
        this.onComplete = !1;
        this.loop = this.delay = 0;
        this.loopCount = -1;
        ig.merge(this, e);
        this.loopNum = this.loopCount;
        this.chain = function(b) {
            A = b
        };
        this.initEnd = function(b, c, d) {
            if ("object" !== typeof c[b]) d[b] = c[b];
            else
                for (subprop in c[b]) d[b] || (d[b] = {}), this.initEnd(subprop, c[b], d[b])
        };
        this.initStart = function(b, c, d, e) {
            if ("object" !== typeof d[b]) "undefined" !== typeof c[b] && (e[b] = d[b]);
            else
                for (subprop in d[b]) e[b] || (e[b] = {}), "undefined" !== typeof c[b] && this.initStart(subprop,
                    c[b], d[b], e[b])
        };
        this.start = function() {
            this.paused = this.complete = !1;
            this.loopNum = this.loopCount;
            m = 0; - 1 == b.tweens.indexOf(this) && b.tweens.push(this);
            v = !0;
            s = new ig.Timer;
            for (var d in c) this.initEnd(d, c, j);
            for (d in j) this.initStart(d, j, b, f), this.initDelta(d, p, b, j)
        };
        this.initDelta = function(b, c, d, e) {
            if ("object" !== typeof e[b]) c[b] = e[b] - d[b];
            else
                for (subprop in e[b]) c[b] || (c[b] = {}), this.initDelta(subprop, c[b], d[b], e[b])
        };
        this.propUpdate = function(b, c, d, e, f) {
            if ("object" !== typeof d[b]) c[b] = "undefined" != typeof d[b] ?
                d[b] + e[b] * f : c[b];
            else
                for (subprop in d[b]) this.propUpdate(subprop, c[b], d[b], e[b], f)
        };
        this.propSet = function(b, c, d) {
            if ("object" !== typeof c[b]) d[b] = c[b];
            else
                for (subprop in c[b]) d[b] || (d[b] = {}), this.propSet(subprop, c[b], d[b])
        };
        this.update = function() {
            if (!v) return !1;
            if (this.delay) {
                if (s.delta() < this.delay) return;
                this.delay = 0;
                s.reset()
            }
            if (this.paused || this.complete) return !1;
            var c = (s.delta() + m) / this.duration,
                c = 1 < c ? 1 : c,
                d = this.easing(c);
            for (property in p) this.propUpdate(property, b, f, p, d);
            if (1 <= c) {
                if (0 == this.loopNum ||
                    !this.loop) {
                    this.complete = !0;
                    if (this.onComplete) this.onComplete();
                    A && A.start();
                    return !1
                }
                if (this.loop == ig.Tween.Loop.Revert) {
                    for (property in f) this.propSet(property, f, b);
                    m = 0;
                    s.reset(); - 1 != this.loopNum && this.loopNum--
                } else if (this.loop == ig.Tween.Loop.Reverse) {
                    c = {};
                    d = {};
                    ig.merge(c, j);
                    ig.merge(d, f);
                    ig.merge(f, c);
                    ig.merge(j, d);
                    for (property in j) this.initDelta(property, p, b, j);
                    m = 0;
                    s.reset(); - 1 != this.loopNum && this.loopNum--
                }
            }
        };
        this.pause = function() {
            this.paused = !0;
            m += s.delta()
        };
        this.resume = function() {
            this.paused = !1;
            s.reset()
        };
        this.stop = function(b) {
            b && (this.loop = this.complete = this.paused = !1, m += d, this.update());
            this.complete = !0
        }
    };
    ig.Tween.Loop = {
        Revert: 1,
        Reverse: 2
    };
    ig.Tween.Easing = {
        Linear: {},
        Quadratic: {},
        Cubic: {},
        Quartic: {},
        Quintic: {},
        Sinusoidal: {},
        Exponential: {},
        Circular: {},
        Elastic: {},
        Back: {},
        Bounce: {}
    };
    ig.Tween.Easing.Linear.EaseNone = function(b) {
        return b
    };
    ig.Tween.Easing.Quadratic.EaseIn = function(b) {
        return b * b
    };
    ig.Tween.Easing.Quadratic.EaseOut = function(b) {
        return -b * (b - 2)
    };
    ig.Tween.Easing.Quadratic.EaseInOut =
        function(b) {
            return 1 > (b *= 2) ? 0.5 * b * b : -0.5 * (--b * (b - 2) - 1)
        };
    ig.Tween.Easing.Cubic.EaseIn = function(b) {
        return b * b * b
    };
    ig.Tween.Easing.Cubic.EaseOut = function(b) {
        return --b * b * b + 1
    };
    ig.Tween.Easing.Cubic.EaseInOut = function(b) {
        return 1 > (b *= 2) ? 0.5 * b * b * b : 0.5 * ((b -= 2) * b * b + 2)
    };
    ig.Tween.Easing.Quartic.EaseIn = function(b) {
        return b * b * b * b
    };
    ig.Tween.Easing.Quartic.EaseOut = function(b) {
        return -(--b * b * b * b - 1)
    };
    ig.Tween.Easing.Quartic.EaseInOut = function(b) {
        return 1 > (b *= 2) ? 0.5 * b * b * b * b : -0.5 * ((b -= 2) * b * b * b - 2)
    };
    ig.Tween.Easing.Quintic.EaseIn =
        function(b) {
            return b * b * b * b * b
        };
    ig.Tween.Easing.Quintic.EaseOut = function(b) {
        return (b -= 1) * b * b * b * b + 1
    };
    ig.Tween.Easing.Quintic.EaseInOut = function(b) {
        return 1 > (b *= 2) ? 0.5 * b * b * b * b * b : 0.5 * ((b -= 2) * b * b * b * b + 2)
    };
    ig.Tween.Easing.Sinusoidal.EaseIn = function(b) {
        return -Math.cos(b * Math.PI / 2) + 1
    };
    ig.Tween.Easing.Sinusoidal.EaseOut = function(b) {
        return Math.sin(b * Math.PI / 2)
    };
    ig.Tween.Easing.Sinusoidal.EaseInOut = function(b) {
        return -0.5 * (Math.cos(Math.PI * b) - 1)
    };
    ig.Tween.Easing.Exponential.EaseIn = function(b) {
        return 0 == b ? 0 : Math.pow(2,
            10 * (b - 1))
    };
    ig.Tween.Easing.Exponential.EaseOut = function(b) {
        return 1 == b ? 1 : -Math.pow(2, -10 * b) + 1
    };
    ig.Tween.Easing.Exponential.EaseInOut = function(b) {
        return 0 == b ? 0 : 1 == b ? 1 : 1 > (b *= 2) ? 0.5 * Math.pow(2, 10 * (b - 1)) : 0.5 * (-Math.pow(2, -10 * (b - 1)) + 2)
    };
    ig.Tween.Easing.Circular.EaseIn = function(b) {
        return -(Math.sqrt(1 - b * b) - 1)
    };
    ig.Tween.Easing.Circular.EaseOut = function(b) {
        return Math.sqrt(1 - --b * b)
    };
    ig.Tween.Easing.Circular.EaseInOut = function(b) {
        return 1 > (b /= 0.5) ? -0.5 * (Math.sqrt(1 - b * b) - 1) : 0.5 * (Math.sqrt(1 - (b -= 2) * b) + 1)
    };
    ig.Tween.Easing.Elastic.EaseIn =
        function(b) {
            var c, d = 0.1,
                e = 0.4;
            if (0 == b) return 0;
            if (1 == b) return 1;
            e || (e = 0.3);
            !d || 1 > d ? (d = 1, c = e / 4) : c = e / (2 * Math.PI) * Math.asin(1 / d);
            return -(d * Math.pow(2, 10 * (b -= 1)) * Math.sin(2 * (b - c) * Math.PI / e))
        };
    ig.Tween.Easing.Elastic.EaseOut = function(b) {
        var c, d = 0.1,
            e = 0.4;
        if (0 == b) return 0;
        if (1 == b) return 1;
        e || (e = 0.3);
        !d || 1 > d ? (d = 1, c = e / 4) : c = e / (2 * Math.PI) * Math.asin(1 / d);
        return d * Math.pow(2, -10 * b) * Math.sin(2 * (b - c) * Math.PI / e) + 1
    };
    ig.Tween.Easing.Elastic.EaseInOut = function(b) {
        var c, d = 0.1,
            e = 0.4;
        if (0 == b) return 0;
        if (1 == b) return 1;
        e || (e = 0.3);
        !d || 1 > d ? (d = 1, c = e / 4) : c = e / (2 * Math.PI) * Math.asin(1 / d);
        return 1 > (b *= 2) ? -0.5 * d * Math.pow(2, 10 * (b -= 1)) * Math.sin(2 * (b - c) * Math.PI / e) : 0.5 * d * Math.pow(2, -10 * (b -= 1)) * Math.sin(2 * (b - c) * Math.PI / e) + 1
    };
    ig.Tween.Easing.Back.EaseIn = function(b) {
        return b * b * (2.70158 * b - 1.70158)
    };
    ig.Tween.Easing.Back.EaseOut = function(b) {
        return (b -= 1) * b * (2.70158 * b + 1.70158) + 1
    };
    ig.Tween.Easing.Back.EaseInOut = function(b) {
        return 1 > (b *= 2) ? 0.5 * b * b * (3.5949095 * b - 2.5949095) : 0.5 * ((b -= 2) * b * (3.5949095 * b + 2.5949095) + 2)
    };
    ig.Tween.Easing.Bounce.EaseIn =
        function(b) {
            return 1 - ig.Tween.Easing.Bounce.EaseOut(1 - b)
        };
    ig.Tween.Easing.Bounce.EaseOut = function(b) {
        return (b /= 1) < 1 / 2.75 ? 7.5625 * b * b : b < 2 / 2.75 ? 7.5625 * (b -= 1.5 / 2.75) * b + 0.75 : b < 2.5 / 2.75 ? 7.5625 * (b -= 2.25 / 2.75) * b + 0.9375 : 7.5625 * (b -= 2.625 / 2.75) * b + 0.984375
    };
    ig.Tween.Easing.Bounce.EaseInOut = function(b) {
        return 0.5 > b ? 0.5 * ig.Tween.Easing.Bounce.EaseIn(2 * b) : 0.5 * ig.Tween.Easing.Bounce.EaseOut(2 * b - 1) + 0.5
    }
});
ig.baked = !0;
ig.module("plugins.url-parameters").defines(function() {
    ig.UrlParameters = ig.Class.extend({
        init: function() {
            switch (getQueryVariable("iphone")) {
                case "true":
                    ig.ua.iPhone = !0, console.log("iPhone mode")
            }
            var b = getQueryVariable("webview");
            if (b) switch (b) {
                case "true":
                    ig.ua.is_uiwebview = !0, console.log("webview mode")
            }
            if (b = getQueryVariable("debug")) switch (b) {
                case "true":
                    ig.game.showDebugMenu(), console.log("debug mode")
            }
            switch (getQueryVariable("view")) {
                case "stats":
                    ig.game.resetPlayerStats(), ig.game.endGame()
            }
            getQueryVariable("ad")
        }
    })
});
ig.baked = !0;
ig.module("plugins.jukebox").defines(function() {
    ig.Jukebox = ig.Class.extend({
        init: function() {
            this.player = new jukebox.Player({
                resources: ["media/audio/game/bgm.mp3", "media/audio/game/bgm.ogg"],
                autoplay: !1,
                spritemap: {
                    music: {
                        start: 0,
                        end: 33.404,
                        loop: !0
                    }
                },
                timeout: 1E3
            })
        }
    })
});
ig.baked = !0;
ig.module("plugins.director").requires("impact.impact").defines(function() {
    ig.Director = ig.Class.extend({
        init: function(b, c) {
            this.game = b;
            this.levels = [];
            this.currentLevel = 0;
            this.append(c)
        },
        loadLevel: function(b) {
            for (key in dynamicClickableEntityDivs) ig.game.hideOverlay([key]);
            this.currentLevel = b;
            this.game.loadLevel(this.levels[b]);
            return !0
        },
        loadLevelWithoutEntities: function(b) {
            this.currentLevel = b;
            this.game.loadLevelWithoutEntities(this.levels[b]);
            return !0
        },
        append: function(b) {
            newLevels = [];
            return "object" ===
                typeof b ? (b.constructor === [].constructor ? newLevels = b : newLevels[0] = b, this.levels = this.levels.concat(newLevels), !0) : !1
        },
        nextLevel: function() {
            return this.currentLevel + 1 < this.levels.length ? this.loadLevel(this.currentLevel + 1) : !1
        },
        previousLevel: function() {
            return 0 <= this.currentLevel - 1 ? this.loadLevel(this.currentLevel - 1) : !1
        },
        jumpTo: function(b) {
            var c = null;
            for (i = 0; i < this.levels.length; i++) this.levels[i] == b && (c = i);
            return 0 <= c ? this.loadLevel(c) : !1
        },
        firstLevel: function() {
            return this.loadLevel(0)
        },
        lastLevel: function() {
            return this.loadLevel(this.levels.length -
                1)
        },
        reloadLevel: function() {
            return this.loadLevel(this.currentLevel)
        }
    })
});
ig.baked = !0;
ig.module("plugins.impact-storage").requires("impact.game").defines(function() {
    ig.Storage = ig.Class.extend({
        staticInstantiate: function() {
            return !ig.Storage.instance ? null : ig.Storage.instance
        },
        init: function() {
            ig.Storage.instance = this
        },
        isCapable: function() {
            return "undefined" !== typeof window.localStorage
        },
        isSet: function(b) {
            return null !== this.get(b)
        },
        initUnset: function(b, c) {
            null === this.get(b) && this.set(b, c)
        },
        get: function(b) {
            if (!this.isCapable()) return null;
            try {
                return JSON.parse(localStorage.getItem(b))
            } catch (c) {
                return window.localStorage.getItem(b)
            }
        },
        getInt: function(b) {
            return ~~this.get(b)
        },
        getFloat: function(b) {
            return parseFloat(this.get(b))
        },
        getBool: function(b) {
            return !!this.get(b)
        },
        key: function(b) {
            return this.isCapable() ? window.localStorage.key(b) : null
        },
        set: function(b, c) {
            if (!this.isCapable()) return null;
            try {
                window.localStorage.setItem(b, JSON.stringify(c))
            } catch (d) {
                console.log(d)
            }
        },
        setHighest: function(b, c) {
            c > this.getFloat(b) && this.set(b, c)
        },
        remove: function(b) {
            if (!this.isCapable()) return null;
            window.localStorage.removeItem(b)
        },
        clear: function() {
            if (!this.isCapable()) return null;
            window.localStorage.clear()
        }
    })
});
ig.baked = !0;
ig.module("plugins.scale").requires("impact.entity").defines(function() {
    ig.Entity.inject({
        scale: {
            x: 1,
            y: 1
        },
        _offset: {
            x: 0,
            y: 0
        },
        _scale: {
            x: 1,
            y: 1
        },
        _size: {
            x: 0,
            y: 0
        },
        init: function(b, c, d) {
            this.parent(b, c, d);
            this._offset.x = this.offset.x;
            this._offset.y = this.offset.y;
            this._size.x = this.size.x;
            this._size.y = this.size.y;
            this.setScale(this.scale.x, this.scale.y)
        },
        draw: function() {
            var b = ig.system.context;
            b.save();
            b.translate(ig.system.getDrawPos(this.pos.x.round() - this.offset.x - ig.game.screen.x), ig.system.getDrawPos(this.pos.y.round() -
                this.offset.y - ig.game.screen.y));
            b.scale(this._scale.x, this._scale.y);
            null != this.currentAnim && this.currentAnim.draw(0, 0);
            b.restore()
        },
        setScale: function(b, c) {
            var d = this.size.x,
                e = this.size.y;
            this.scale.x = b || this.scale.x;
            this.scale.y = c || this.scale.y;
            this._scale.x = this.scale.x / ig.system.scale;
            this._scale.y = this.scale.y / ig.system.scale;
            this.offset.x = this._offset.x * this._scale.x;
            this.offset.y = this._offset.y * this._scale.y;
            this.size.x = this._size.x * this._scale.x;
            this.size.y = this._size.y * this._scale.y;
            this.pos.x +=
                (d - this.size.x) / 2;
            this.pos.y += (e - this.size.y) / 2
        }
    })
});
this.START_BRANDING_SPLASH;
ig.baked = !0;
ig.module("plugins.branding.splash").requires("impact.impact", "impact.entity").defines(function() {
    ig.BrandingSplash = ig.Class.extend({
        init: function() {
            ig.game.spawnEntity(EntityBranding, 0, 0)
        }
    });
    EntityBranding = ig.Entity.extend({
        gravityFactor: 0,
        size: {
            x: 32,
            y: 32
        },
        splash: new ig.Image("branding/splash1.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            320 >= ig.system.width ? (this.size.x = 320, this.size.y = 200) : (this.size.x = 480, this.size.y = 240);
            this.pos.x = (ig.system.width - this.size.x) / 2;
            this.pos.y = -this.size.y - 200;
            this.endPosY = (ig.system.height - this.size.y) / 2;
            b = this.tween({
                pos: {
                    y: this.endPosY
                }
            }, 0.5, {
                easing: ig.Tween.Easing.Bounce.EaseIn
            });
            c = this.tween({}, 2.5, {
                onComplete: function() {
                    ig.game.director.loadLevel(ig.game.director.currentLevel)
                }
            });
            b.chain(c);
            b.start();
            this.currentAnim = this.anims.idle
        },
        createClickableLayer: function() {
            console.log("Build clickable layer");
            this.checkClickableLayer("branding-splash", _SETTINGS.Branding.Logo.Link, _SETTINGS.Branding.Logo.NewWindow)
        },
        doesClickableLayerExist: function(b) {
            for (k in dynamicClickableEntityDivs)
                if (k ==
                    b) return !0;
            return !1
        },
        checkClickableLayer: function(b, c, d) {
            "undefined" == typeof wm && (this.doesClickableLayerExist(b) ? (ig.game.showOverlay([b]), $("#" + b).find("[href]").attr("href", c)) : this.createClickableOutboundLayer(b, c, "media/graphics/misc/invisible.png", d))
        },
        createClickableOutboundLayer: function(b, c, d, e) {
            var f = ig.$new("div");
            f.id = b;
            document.body.appendChild(f);
            $("#" + f.id).css("float", "left");
            $("#" + f.id).css("position", "absolute");
            if (ig.ua.mobile) {
                var j = window.innerHeight / mobileHeight,
                    p = window.innerWidth /
                    mobileWidth;
                $("#" + f.id).css("left", this.pos.x * p);
                $("#" + f.id).css("top", this.pos.y * j);
                $("#" + f.id).css("width", this.size.x * p);
                $("#" + f.id).css("height", this.size.y * j)
            } else j = w / 2 - destW / 2, p = h / 2 - destH / 2, console.log(j, p), $("#" + f.id).css("left", j + this.pos.x * multiplier), $("#" + f.id).css("top", p + this.pos.y * multiplier), $("#" + f.id).css("width", this.size.x * multiplier), $("#" + f.id).css("height", this.size.y * multiplier);
            e ? $("#" + f.id).html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" +
                d + "'></a>") : $("#" + f.id).html("<a href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
            dynamicClickableEntityDivs[b] = {};
            dynamicClickableEntityDivs[b].width = this.size.x * multiplier;
            dynamicClickableEntityDivs[b].height = this.size.y * multiplier;
            dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
            dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y
        },
        draw: function() {
            ig.system.context.fillStyle = "#ffffff";
            ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height);
            ig.system.context.fillStyle =
                "#000";
            ig.system.context.font = "12px Arial";
            320 >= ig.system.width ? ig.system.context.fillText("powered by MarketJS.com", ig.system.width - 150, ig.system.height - 15) : ig.system.context.fillText("powered by MarketJS.com", ig.system.width - 160, ig.system.height - 15);
            this.parent();
            this.splash && ig.system.context.drawImage(this.splash.data, 0, 0, this.splash.data.width, this.splash.data.height, this.pos.x, this.pos.y, this.size.x, this.size.y)
        }
    })
});
this.END_BRANDING_SPLASH;
ig.baked = !0;
ig.module("game.entities.branding-logo-placeholder").requires("impact.entity").defines(function() {
    EntityBrandingLogoPlaceholder = ig.Entity.extend({
        gravityFactor: 0,
        size: {
            x: 32,
            y: 32
        },
        _wmDrawBox: !0,
        _wmBoxColor: "rgba(0, 0, 255, 0.7)",
        init: function(b, c, d) {
            this.parent(b, c, d);
            if (d) switch (console.log("settings found ... using that div layer name"), b = d.div_layer_name, console.log("settings.centralize:", d.centralize), d.centralize) {
                case "true":
                    console.log("centralize true");
                    centralize = !0;
                    break;
                case "false":
                    console.log("centralize false");
                    centralize = !1;
                    break;
                default:
                    console.log("default ... centralize false"), centralize = !1
            } else b = "branding-logo", centralize = !1;
            if ("undefined" == typeof wm) {
                if (_SETTINGS.Branding.Logo.Enabled) try {
                    ig.game.spawnEntity(EntityBrandingLogo, this.pos.x, this.pos.y, {
                        div_layer_name: b,
                        centralize: centralize
                    })
                } catch (e) {
                    console.log(e)
                }
                this.kill()
            }
        }
    })
});
this.START_BRANDING_LOGO;
ig.baked = !0;
ig.module("game.entities.branding-logo").requires("impact.entity").defines(function() {
    EntityBrandingLogo = ig.Entity.extend({
        gravityFactor: 0,
        logo: new ig.AnimationSheet("branding/logo.png", _SETTINGS.Branding.Logo.Width, _SETTINGS.Branding.Logo.Height),
        size: {
            x: 32,
            y: 32
        },
        zIndex: 10001,
        init: function(b, c, d) {
            this.parent(b, c, d);
            "undefined" == typeof wm && (_SETTINGS.Branding.Logo.Enabled ? (this.size.x = _SETTINGS.Branding.Logo.Width, this.size.y = _SETTINGS.Branding.Logo.Height, d && d.centralize && (this.pos.x = ig.system.width /
                2 - this.size.x / 2, console.log("centralize true ... centering branded logo ..."))) : this.kill());
            this.anims.idle = new ig.Animation(this.logo, 0, [0], !0);
            this.currentAnim = this.anims.idle;
            d ? (console.log("branding settings found ... using that div layer name"), b = d.div_layer_name) : b = "branding-logo";
            _SETTINGS.Branding.Logo.LinkEnabled && (console.log("logo link enabled"), this.checkClickableLayer(b, _SETTINGS.Branding.Logo.Link, _SETTINGS.Branding.Logo.NewWindow));
            console.log("branding logo spawed ...")
        },
        doesClickableLayerExist: function(b) {
            for (k in dynamicClickableEntityDivs)
                if (k ==
                    b) return !0;
            return !1
        },
        checkClickableLayer: function(b, c, d) {
            "undefined" == typeof wm && (this.doesClickableLayerExist(b) ? (ig.game.showOverlay([b]), $("#" + b).find("[href]").attr("href", c)) : this.createClickableOutboundLayer(b, c, "media/graphics/misc/invisible.png", d))
        },
        createClickableOutboundLayer: function(b, c, d, e) {
            var f = ig.$new("div");
            f.id = b;
            document.body.appendChild(f);
            $("#" + f.id).css("float", "left");
            $("#" + f.id).css("position", "absolute");
            if (ig.ua.mobile) {
                var j = window.innerHeight / mobileHeight,
                    p = window.innerWidth /
                    mobileWidth;
                $("#" + f.id).css("left", this.pos.x * p);
                $("#" + f.id).css("top", this.pos.y * j);
                $("#" + f.id).css("width", this.size.x * p);
                $("#" + f.id).css("height", this.size.y * j)
            } else j = w / 2 - destW / 2, p = h / 2 - destH / 2, console.log(j, p), $("#" + f.id).css("left", j + this.pos.x * multiplier), $("#" + f.id).css("top", p + this.pos.y * multiplier), $("#" + f.id).css("width", this.size.x * multiplier), $("#" + f.id).css("height", this.size.y * multiplier);
            e ? $("#" + f.id).html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" +
                d + "'></a>") : $("#" + f.id).html("<a href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
            dynamicClickableEntityDivs[b] = {};
            dynamicClickableEntityDivs[b].width = this.size.x * multiplier;
            dynamicClickableEntityDivs[b].height = this.size.y * multiplier;
            dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
            dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y
        }
    })
});
this.END_BRANDING_LOGO;
ig.baked = !0;
ig.module("game.entities.button-more-games").requires("impact.entity").defines(function() {
    EntityButtonMoreGames = ig.Entity.extend({
        size: {
            x: 282,
            y: 55
        },
        type: ig.Entity.TYPE.B,
        zIndex: 2E3,
        gravityFactor: 0,
        ignorePause: !0,
        btnStatus: 0,
        type: 1,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons-long.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            "undefined" == typeof wm && !_SETTINGS.MoreGames.Enabled && this.kill();
            ig.global.wm || this.tweenIn(b, c, d)
        },
        update: function() {
            this.parent();
            this.CheckTouch()
        },
        CheckTouch: function() {
            if (0 < ig.game.getEntitiesByType(EntityPointer).length) {
                var b = ig.game.getEntitiesByType(EntityPointer)[0];
                this.btnStatus = b.pos.x >= this.pos.x - 100 && b.pos.x <= this.pos.x + this.size.x - 100 && b.pos.y >= this.pos.y - 20 && b.pos.y <= this.pos.y + this.size.y - 20 ? 1 : 0
            }
        },
        tweenIn: function(b, c, d) {
            this.tween({
                pos: {
                    y: ig.system.height / 2 + 190
                }
            }, 1.6, {
                onComplete: function() {
                    var b;
                    d.div_layer_name ? (console.log("settings found ... using that div layer name"), b = d.div_layer_name) : b = "more-games";
                    console.log("div_layer_name:", b);
                    this.checkClickableLayer(b, _SETTINGS.MoreGames.Link, _SETTINGS.MoreGames.NewWindow)
                }.bind(this),
                easing: ig.Tween.Easing.Quartic.EaseOut,
                delay: 0
            }).start()
        },
        doesClickableLayerExist: function(b) {
            for (k in dynamicClickableEntityDivs)
                if (k == b) return console.log("clickable layer already exists ..."), !0;
            console.log("doesnt exist yet ...");
            return !1
        },
        checkClickableLayer: function(b, c, d) {
            "undefined" == typeof wm && (this.doesClickableLayerExist(b) ? (ig.game.showOverlay([b]), $("#" + b).find("[href]").attr("href",
                c)) : this.createClickableOutboundLayer(b, c, "media/graphics/misc/invisible.png", d))
        },
        createClickableOutboundLayer: function(b, c, d, e) {
            var f = ig.$new("div");
            f.id = b;
            document.body.appendChild(f);
            $("#" + f.id).css("float", "left");
            $("#" + f.id).css("position", "absolute");
            if (ig.ua.mobile) {
                var j = window.innerHeight / mobileHeight,
                    p = window.innerWidth / mobileWidth;
                $("#" + f.id).css("left", (this.pos.x - 75) * p);
                $("#" + f.id).css("top", (this.pos.y - 15) * j);
                $("#" + f.id).css("width", this.size.x * p);
                $("#" + f.id).css("height", this.size.y *
                    j)
            } else j = document.getElementById("game").offsetLeft, p = document.getElementById("game").offsetTop, $("#" + f.id).css("left", j + (this.pos.x - 75) * multiplier), $("#" + f.id).css("top", p + (this.pos.y - 15) * multiplier), $("#" + f.id).css("width", this.size.x * multiplier), $("#" + f.id).css("height", this.size.y * multiplier);
            f.addEventListener("mousemove", ig.input.mousemove.bind(ig.input), !1);
            e ? $("#" + f.id).html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>") : $("#" + f.id).html("<a href='" +
                c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
            dynamicClickableEntityDivs[b] = {};
            dynamicClickableEntityDivs[b].width = this.size.x * multiplier;
            dynamicClickableEntityDivs[b].height = this.size.y * multiplier;
            dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
            dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -=
                0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, this.tweenOut()));
            b.save();
            b.drawImage(this.btn.data, this.btnStatus * (this.size.x - 0.5), this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 90 * this.sizeOfButton.x + 10, this.pos.y - 25 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y);
            b.restore()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.opening-shield").requires("impact.entity").defines(function() {
    EntityOpeningShield = ig.Entity.extend({
        size: {
            x: 48,
            y: 48
        },
        move: 0,
        mIconAnim: 0,
        shieldAnim: 0,
        titleAnim: 0,
        shieldImage: new ig.Image("media/graphics/opening/shield.png"),
        mIconImage: new ig.Image("media/graphics/opening/m_icon.png"),
        titleImage: new ig.Image("media/graphics/opening/title.png"),
        init: function(b, c, d) {
            this.parent(b, c, d)
        },
        ready: function() {
            if (!ig.wm)
                if (_SETTINGS.DeveloperBranding.Splash.Enabled) {
                    this.initTimer = new ig.Timer(0.1);
                    try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.openingSound)
                    } catch (b) {
                        console.log(b)
                    }
                } else ig.game.director.nextLevel(), ig.system.context.globalAlpha = 1, this.kill()
        },
        update: function() {
            this.parent();
            this.updateOriginalShieldOpening()
        },
        draw: function() {
            this.parent();
            ig.global.wm || (this.nextLevelTimer && 0 > this.nextLevelTimer.delta() && (ig.system.context.globalAlpha = -this.nextLevelTimer.delta()), this.drawOriginalShieldOpening())
        },
        updateOriginalShieldOpening: function() {
            this.initTimer && 0 < this.initTimer.delta() &&
                (this.initTimer = null, this.sheildTimer = new ig.Timer(0.05));
            this.sheildTimer && 0 < this.sheildTimer.delta() && (3 > this.shieldAnim ? (this.shieldAnim++, this.sheildTimer.reset()) : (this.sheildTimer = null, this.moveTimer = new ig.Timer(0.0010), this.mIconTimer = new ig.Timer(0.05), this.titleTimer = new ig.Timer(0.15)));
            this.moveTimer && 0 < this.moveTimer.delta() && (this.move += 0.3, this.moveTimer.reset());
            this.mIconTimer && 0 < this.mIconTimer.delta() && (12 > this.mIconAnim ? (this.mIconAnim++, this.moveTimer.reset()) : this.mIconTimer =
                null);
            this.titleTimer && 0 < this.titleTimer.delta() && (11 > this.titleAnim ? (this.titleAnim++, this.titleTimer.reset()) : (this.titleTimer = null, this.nextLevelTimer = new ig.Timer(1)));
            this.nextLevelTimer && 0 < this.nextLevelTimer.delta() && (this.nextLevelTimer = null, ig.game.director.nextLevel(), ig.system.context.globalAlpha = 1)
        },
        drawOriginalShieldOpening: function() {
            if (this.moveTimer) {
                var b = ig.system.context;
                b.save();
                var c = ig.system.width / 2,
                    d = ig.system.height / 2;
                b.translate(c, d);
                b.rotate(this.move * Math.PI / 180);
                b.beginPath();
                b.moveTo(0, 0);
                for (var e = 0, f = 1; 48 >= f; f += 1) b.lineTo(0 + 800 * Math.cos(2 * f * Math.PI / 48), 0 + 800 * Math.sin(2 * f * Math.PI / 48)), e++, 2 == e && (e = 0, b.lineTo(0, 0));
                b.translate(-c, -d);
                c = b.createRadialGradient(c, d, 100, c, d, 250);
                c.addColorStop(0, "rgba(255,255,255,0.1)");
                c.addColorStop(1, "rgba(0,0,0,0)");
                b.fillStyle = c;
                b.fill();
                b.restore()
            }
            this.shieldImage.drawTile(ig.system.width / 2 - 91, 0 - (768 - ig.system.height) / 2, this.shieldAnim, 182, 768);
            this.moveTimer && (this.mIconImage.drawTile(ig.system.width / 2 - 96, ig.system.height / 2 - 70, this.mIconAnim,
                166, 160), this.titleImage.drawTile(ig.system.width / 2 - 204, ig.system.height / 2 + 100, this.titleAnim, 409, 76));
            ig.system.context.globalAlpha = 1
        }
    })
});
ig.baked = !0;
ig.module("game.entities.opening-kitty").requires("impact.entity").defines(function() {
    EntityOpeningKitty = ig.Entity.extend({
        size: {
            x: 48,
            y: 48
        },
        kittyAnim: -1,
        kittyImage: new ig.Image("media/graphics/opening/kitty.png"),
        kittyTitleImage: new ig.Image("media/graphics/opening/kittytitle.png"),
        init: function(b, c, d) {
            this.parent(b, c, d)
        },
        ready: function() {
            if (!ig.wm)
                if (_SETTINGS.DeveloperBranding.Splash.Enabled) {
                    this.initTimer = new ig.Timer(0.1);
                    try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.kittyopeningSound)
                    } catch (b) {
                        console.log(b)
                    }
                } else ig.game.director.nextLevel(),
                    ig.system.context.globalAlpha = 1, this.kill()
        },
        update: function() {
            this.parent();
            this.updateKittyOpening()
        },
        draw: function() {
            this.parent();
            ig.global.wm || (this.nextLevelTimer && 0 > this.nextLevelTimer.delta() && (ig.system.context.globalAlpha = -this.nextLevelTimer.delta()), this.drawKittyOpening())
        },
        updateKittyOpening: function() {
            this.initTimer && 0 < this.initTimer.delta() && (this.initTimer = null, this.kittyTimer = new ig.Timer(0.15));
            this.kittyTimer && 0 < this.kittyTimer.delta() && (7 > this.kittyAnim ? (this.kittyAnim++, this.kittyTimer.reset()) :
                (this.kittyTimer = null, this.nextLevelTimer = new ig.Timer(2)));
            this.nextLevelTimer && 0 < this.nextLevelTimer.delta() && (this.nextLevelTimer = null, ig.game.director.nextLevel(), ig.system.context.globalAlpha = 1)
        },
        drawKittyOpening: function() {
            var b = ig.system.context.createLinearGradient(0, 0, 0, ig.system.height);
            b.addColorStop(0, "#ffed94");
            b.addColorStop(1, "#ffcd85");
            ig.system.context.fillStyle = b;
            ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height);
            0 <= this.kittyAnim && (this.kittyImage.drawTile(ig.system.width /
                2 - this.kittyImage.width / 8, ig.system.height / 2 - this.kittyImage.height / 4, this.kittyAnim, 218, 325), this.kittyTitleImage.drawTile(ig.system.width / 2 - this.kittyTitleImage.width / 2, ig.system.height / 2 + this.kittyImage.height / 4 + 10, this.kittyAnim, 380, 37));
            ig.system.context.globalAlpha = 1
        }
    })
});
ig.baked = !0;
ig.module("game.entities.pointer").requires("impact.entity").defines(function() {
    EntityPointer = ig.Entity.extend({
        type: ig.Entity.TYPE.A,
        checkAgainst: ig.Entity.TYPE.B,
        isClicking: !1,
        isHovering: !1,
        firstClick: !1,
        isReleased: !1,
        hoveringItem: null,
        objectArray: [],
        ignorePause: !0,
        zIndex: 5E3,
        check: function(b) {
            this.objectArray.push(b)
        },
        clickObject: function(b) {
            this.isClicking && !this.firstClick && "function" == typeof b.clicked && (b.clicked(), this.firstClick = !0);
            this.firstClick && !this.isReleased && "function" == typeof b.clicking &&
                b.clicking();
            this.firstClick && this.isReleased && "function" == typeof b.released && (b.released(), this.firstClick = !1)
        },
        update: function() {
            if (ig.ua.mobile) {
                var b = window.innerHeight / mobileHeight;
                this.pos.x = ig.input.mouse.x / (window.innerWidth / mobileWidth) - this.size.x / 2 + ig.game.screen.x;
                this.pos.y = ig.input.mouse.y / b - this.size.y / 2
            } else this.pos.x = ig.input.mouse.x - this.size.x / 2, this.pos.y = ig.input.mouse.y - this.size.y / 2;
            var b = null,
                c = -1;
            for (a = this.objectArray.length - 1; - 1 < a; a--) this.objectArray[a].zIndex > c && (c = this.objectArray[a].zIndex,
                b = this.objectArray[a]);
            null != b ? ("close" == b.name && console.log(b), null != this.hoveringItem && "function" == typeof this.hoveringItem.idle && this.hoveringItem != b && this.hoveringItem.idle(), this.hoveringItem = b, this.clickObject(b), this.objectArray = []) : null != this.hoveringItem && "function" == typeof this.hoveringItem.idle && (this.hoveringItem.idle(), this.hoveringItem = null);
            this.isClicking = ig.input.pressed("click");
            this.isReleased = ig.input.released("click")
        }
    })
});
ig.baked = !0;
ig.module("game.entities.pointer-selector").requires("game.entities.pointer").defines(function() {
    EntityPointerSelector = EntityPointer.extend({
        zIndex: 1E3,
        _wmDrawBox: !0,
        _wmBoxColor: "rgba(0, 0, 255, 0.7)",
        size: {
            x: 20,
            y: 20
        },
        init: function(b, c, d) {
            this.parent(b, c, d)
        }
    })
});
ig.baked = !0;
ig.module("game.entities.select").requires("impact.entity").defines(function() {
    EntitySelect = ig.Entity.extend({
        type: ig.Entity.TYPE.B,
        checkAgainst: ig.Entity.TYPE.A,
        collides: ig.Entity.COLLIDES.NEVER,
        canSelect: !1,
        canSelectTimerDuration: 0.35,
        zIndex: 99999,
        isHovering: !1,
        isSelected: !1,
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.canSelectTimer = new ig.Timer(this.canSelectTimerDuration)
        },
        doesClickableLayerExist: function(b) {
            for (k in dynamicClickableEntityDivs)
                if (k == b) return !0;
            return !1
        },
        checkClickableLayer: function(b,
            c, d) {
            "undefined" == typeof wm && (this.doesClickableLayerExist(b) ? (ig.game.showOverlay([b]), $("#" + b).find("[href]").attr("href", c)) : this.createClickableOutboundLayer(b, c, "media/graphics/misc/invisible.png", d))
        },
        createClickableOutboundLayer: function(b, c, d, e) {
            var f = ig.$new("div");
            f.id = b;
            document.body.appendChild(f);
            $("#" + f.id).css("float", "left");
            $("#" + f.id).css("width", this.size.x * multiplier);
            $("#" + f.id).css("height", this.size.y * multiplier);
            $("#" + f.id).css("position", "absolute");
            var j = w / 2 - destW / 2,
                p = h /
                2 - destH / 2;
            w == mobileWidth ? ($("#" + f.id).css("left", this.pos.x), $("#" + f.id).css("top", this.pos.y)) : ($("#" + f.id).css("left", j + this.pos.x * multiplier), $("#" + f.id).css("top", p + this.pos.y * multiplier));
            e ? $("#" + f.id).html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>") : $("#" + f.id).html("<a href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
            dynamicClickableEntityDivs[b] = {};
            dynamicClickableEntityDivs[b].width = $("#" + f.id).width();
            dynamicClickableEntityDivs[b].height =
                $("#" + f.id).height();
            dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
            dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y
        },
        hovered: function() {
            this.isHovering = !0;
            this.dehoverOthers()
        },
        dehoverOthers: function() {
            var b = ig.game.getEntitiesByType(EntitySelect);
            for (i = 0; i < b.length; i++) b[i] != this && (b[i].isHovering = !1)
        },
        deselectOthers: function() {
            var b = ig.game.getEntitiesByType(EntitySelect);
            for (i = 0; i < b.length; i++) b[i] != this && (b[i].isSelected = !1)
        },
        update: function() {
            this.parent();
            this.canSelectTimer && 0 <
                this.canSelectTimer.delta() && (this.canSelect = !0, this.canSelectTimer = null)
        }
    })
});
ig.baked = !0;
ig.module("game.levels.opening").requires("impact.image", "game.entities.opening-kitty").defines(function() {
    LevelOpening = {
        entities: [{
            type: "EntityOpeningKitty",
            x: 520,
            y: 212
        }],
        layer: []
    }
});
ig.baked = !0;
ig.module("game.levels.test-desktop").requires("impact.image", "game.entities.branding-logo-placeholder", "game.entities.button-more-games", "game.entities.pointer").defines(function() {
    LevelTestDesktop = {
        entities: [{
            type: "EntityBrandingLogoPlaceholder",
            x: 296,
            y: 396,
            settings: {
                div_layer_name: "layer_mainmenu",
                centralize: "true"
            }
        }, {
            type: "EntityButtonMoreGames",
            x: 432,
            y: 284,
            settings: {
                div_layer_name: "layer_moregames_mainmenu"
            }
        }, {
            type: "EntityPointer",
            x: 608,
            y: 120
        }],
        layer: [{
            name: "background",
            width: 40,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/backgrounds/desktop/background.jpg",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
                    117, 118, 119, 120
                ],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320],
                [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360],
                [361, 362, 363, 364,
                    365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400
                ],
                [401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440],
                [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480],
                [481, 482, 483, 484, 485, 486, 487, 488,
                    489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520
                ],
                [521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560],
                [561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600],
                [601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
                    613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640
                ],
                [641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680],
                [681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720],
                [721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
                    737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760
                ],
                [761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800],
                [801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840],
                [841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
                    861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880
                ],
                [881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920],
                [921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960],
                [961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
                    985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1E3
                ],
                [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040],
                [1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080],
                [1081, 1082, 1083, 1084, 1085, 1086, 1087,
                    1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120
                ],
                [1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160],
                [1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
                    1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200
                ]
            ]
        }]
    };
    LevelTestDesktopResources = [new ig.Image("media/graphics/backgrounds/desktop/background.jpg")]
});
ig.baked = !0;
ig.module("game.levels.test-mobile").requires("impact.image", "game.entities.branding-logo-placeholder", "game.entities.button-more-games", "game.entities.pointer").defines(function() {
    LevelTestMobile = {
        entities: [{
            type: "EntityBrandingLogoPlaceholder",
            x: 216,
            y: 548,
            settings: {
                div_layer_name: "layer_mainmenu",
                centralize: "true"
            }
        }, {
            type: "EntityButtonMoreGames",
            x: 204,
            y: 372,
            settings: {
                div_layer_name: "layer_moregames_mainmenu"
            }
        }, {
            type: "EntityPointer",
            x: 444,
            y: 192
        }],
        layer: [{
            name: "background",
            width: 30,
            height: 40,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/backgrounds/mobile/background.jpg",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
                [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
                [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
                    117, 118, 119, 120
                ],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],
                [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210],
                [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270],
                [271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300],
                [301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330],
                [331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360],
                [361, 362, 363,
                    364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390
                ],
                [391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420],
                [421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450],
                [451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480],
                [481, 482, 483, 484, 485, 486, 487,
                    488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510
                ],
                [511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540],
                [541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570],
                [571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600],
                [601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
                    612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630
                ],
                [631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660],
                [661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690],
                [691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720],
                [721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
                    736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750
                ],
                [751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780],
                [781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810],
                [811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840],
                [841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
                    860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870
                ],
                [871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900],
                [901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930],
                [931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960],
                [961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
                    984, 985, 986, 987, 988, 989, 990
                ],
                [991, 992, 993, 994, 995, 996, 997, 998, 999, 1E3, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020],
                [1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050],
                [1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080],
                [1081, 1082, 1083, 1084, 1085,
                    1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110
                ],
                [1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140],
                [1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170],
                [1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
                    1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200
                ]
            ]
        }]
    };
    LevelTestMobileResources = [new ig.Image("media/graphics/backgrounds/mobile/background.jpg")]
});
ig.baked = !0;
ig.module("game.entities.common.main-menu").requires("impact.entity").defines(function() {
    EntityMainMenu = ig.Entity.extend({
        size: {
            x: 640,
            y: 257
        },
        zIndex: 1E3,
        gravityFactor: 0,
        animSheet: new ig.AnimationSheet("media/graphics/game/prop/main_anim.png", 640, 257),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("idle", 0.05, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-music").requires("impact.entity").defines(function() {
    EntityBtnMusic = ig.Entity.extend({
        size: {
            x: 65,
            y: 40
        },
        type: ig.Entity.TYPE.B,
        zIndex: 1600,
        gravityFactor: 0,
        btnStatus: 0,
        type: 3,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons.png"),
        init: function(b, c, d) {
            this.parent(b, c, d)
        },
        update: function() {
            this.parent();
            this.CheckTouch()
        },
        CheckTouch: function() {
            if (!ig.global.wm && !(0 >= ig.game.getEntitiesByType(EntityPointer).length)) {
                var b = ig.game.getEntitiesByType(EntityPointer)[0];
                if (b.pos.x >= this.pos.x && b.pos.x <= this.pos.x + this.size.x && b.pos.y >= this.pos.y && b.pos.y <= this.pos.y + this.size.y) {
                    if (!ig.game.gameEnd) {
                        ig.game.pointedButton = this;
                        if (ig.input.pressed("click")) try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                        } catch (c) {
                            console.log(c)
                        }
                        ig.input.released("click") && (this.isClicked = ig.game.btnClicked = !0);
                        this.btnStatus = 1
                    }
                } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0)
            }
        },
        draw: function() {
            this.parent();
            if (!ig.global.wm) {
                var b =
                    ig.system.context;
                !1 == ig.soundHandler.muted ? 3 != this.type && (this.type = 3) : 4 != this.type && (this.type = 4);
                this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, !1 == ig.soundHandler.muted ? (ig.game.storage && ig.game.storage.set("SOUND", "OFF"), ig.soundHandler.forceMuted = !0, ig.soundHandler.mute()) : (ig.game.storage && ig.game.storage.set("SOUND", "ON"), ig.soundHandler.forceMuted = !1, ig.soundHandler.unmute()), ig.game.btnClicked = !1));
                b.drawImage(this.btn.data, this.btnStatus * (this.size.x - 0.5), this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 10 * this.sizeOfButton.x + 10, this.pos.y - 10 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y)
            }
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-continue").requires("impact.entity").defines(function() {
    EntityBtnContinue = ig.Entity.extend({
        size: {
            x: 282,
            y: 55
        },
        type: ig.Entity.TYPE.B,
        zIndex: 2E3,
        gravityFactor: 0,
        ignorePause: !0,
        btnStatus: 0,
        type: 0,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons-long.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.global.wm || this.tweenIn();
            ig.game.spawnEntity(EntityButtonMoreGames, 250, 630)
        },
        update: function() {
            this.parent();
            0 == ig.game.getEntitiesByType(EntityPointer).length &&
                (this.pointer = ig.game.spawnEntity(EntityPointer, this.pos.x, this.pos.y));
            this.CheckTouch()
        },
        tweenIn: function() {
            this.tween({
                pos: {
                    y: ig.system.height / 2 + 50
                }
            }, 0.8, {
                onComplete: function() {}.bind(this),
                easing: ig.Tween.Easing.Quartic.EaseOut,
                delay: 0
            }).start()
        },
        tweenOut: function() {
            ig.game.storage && ig.game.storage.isSet("BABY-COW-LEVEL :") ? ig.game.director.loadLevel(ig.game.storage.getInt("BABY-COW-LEVEL :")) : ig.game.director.loadLevel(2);
            ig.game.btnClicked = !1
        },
        CheckTouch: function() {
            var b = ig.game.getEntitiesByType(EntityPointer)[0];
            if (b && b.pos.x >= this.pos.x - 80 && b.pos.x <= this.pos.x + this.size.x - 80 && b.pos.y >= this.pos.y - 20 && b.pos.y <= this.pos.y + this.size.y - 20) {
                if (!ig.game.gameEnd) {
                    if (ig.input.pressed("click")) try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                    } catch (c) {
                        console.log(c)
                    }
                    ig.input.released("click") && (this.isClicked = ig.game.btnClicked = !0);
                    this.btnStatus = 1
                }
            } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0)
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked &&
                !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, this.tweenOut()));
            b.drawImage(this.btn.data, this.btnStatus * (this.size.x - 0.5), this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 90 * this.sizeOfButton.x + 10, this.pos.y - 25 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x,
                this.size.y * this.sizeOfButton.y)
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-more").requires("impact.entity").defines(function() {
    EntityBtnMore = ig.Entity.extend({
        size: {
            x: 282,
            y: 55
        },
        type: ig.Entity.TYPE.B,
        zIndex: 2E3,
        gravityFactor: 0,
        ignorePause: !0,
        btnStatus: 0,
        type: 4,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons-long.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.global.wm || this.tweenIn()
        },
        update: function() {
            this.parent();
            this.CheckTouch()
        },
        tweenIn: function() {
            this.tween({
                pos: {
                    y: ig.system.height / 2 +
                        120
                }
            }, 0.8, {
                onComplete: function() {}.bind(this),
                easing: ig.Tween.Easing.Quartic.EaseOut,
                delay: 0
            }).start()
        },
        tweenOut: function() {
            ig.game.director.jumpTo(LevelSelectLevel);
            ig.game.btnClicked = !1
        },
        CheckTouch: function() {
            var b = ig.game.getEntitiesByType(EntityPointer)[0];
            if (b.pos.x >= this.pos.x - 80 && b.pos.x <= this.pos.x + this.size.x - 80 && b.pos.y >= this.pos.y - 20 && b.pos.y <= this.pos.y + this.size.y - 20) {
                if (!ig.game.gameEnd) {
                    if (ig.input.pressed("click")) try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                    } catch (c) {
                        console.log(c)
                    }
                    ig.input.released("click") &&
                        (this.isClicked = ig.game.btnClicked = !0);
                    this.btnStatus = 1
                }
            } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0)
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, this.tweenOut()));
            b.save();
            b.drawImage(this.btn.data, this.btnStatus * (this.size.x - 0.5), this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 90 * this.sizeOfButton.x + 10, this.pos.y - 25 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y);
            b.restore()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.common.logo").requires("impact.entity").defines(function() {
    EntityLogo = ig.Entity.extend({
        size: {
            x: 366,
            y: 161
        },
        sizeX: 366,
        sizeY: 151,
        zIndex: 2200,
        gravityFactor: 0,
        logo: new ig.Image("media/graphics/game/prop/logo.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.global.wm || this.tweenIn()
        },
        update: function() {
            this.parent()
        },
        tweenIn: function() {
            this.tween({
                pos: {
                    y: 70
                }
            }, 0.8, {
                onComplete: function() {}.bind(this),
                easing: ig.Tween.Easing.Quartic.EaseOut,
                delay: 0.1
            }).start()
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.sizeX > this.size.x - 10 && !this.zoomIN ? this.sizeX -= 0.2 : (this.zoomIN = !0) && this.sizeX < this.size.x ? this.sizeX += 0.2 : this.zoomIN = !1;
            this.sizeY < this.size.y && !this.zoomINY ? this.sizeY += 0.2 : (this.zoomINY = !0) && this.sizeY > this.size.y - 10 ? this.sizeY -= 0.2 : this.zoomINY = !1;
            b.drawImage(this.logo.data, 0, 0, this.logo.width, this.logo.height, this.pos.x - 100 * (this.sizeX / this.size.x) + 100, this.pos.y - 100 * (this.sizeY / this.size.y) + 100, this.logo.width * (this.sizeX / this.size.x), this.logo.height * (this.sizeY /
                this.size.y))
        }
    })
});
ig.baked = !0;
ig.module("game.levels.main").requires("impact.image", "game.entities.common.main-menu", "game.entities.buttons.btn-music", "game.entities.buttons.btn-continue", "game.entities.buttons.btn-more", "game.entities.common.logo").defines(function() {
    LevelMain = {
        entities: [{
            type: "EntityMainMenu",
            x: 0,
            y: 224
        }, {
            type: "EntityBtnMusic",
            x: 24,
            y: 12
        }, {
            type: "EntityBtnContinue",
            x: 250,
            y: 430
        }, {
            type: "EntityBtnMore",
            x: 250,
            y: 580
        }, {
            type: "EntityLogo",
            x: 137,
            y: -200
        }],
        layer: [{
            name: "new_layer_0",
            width: 32,
            height: 24,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-main.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 20,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32],
                [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64],
                [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96],
                [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
                    118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128
                ],
                [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192],
                [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224],
                [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
                    242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256
                ],
                [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288],
                [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320],
                [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352],
                [353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
                    366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384
                ],
                [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416],
                [417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448],
                [449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480],
                [481, 482, 483, 484, 485, 486, 487, 488, 489,
                    490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512
                ],
                [513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544],
                [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576],
                [577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608],
                [609, 610, 611, 612, 613,
                    614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640
                ],
                [641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672],
                [673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704],
                [705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736],
                [737,
                    738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768
                ]
            ]
        }]
    };
    LevelMainResources = [new ig.Image("media/graphics/game/background/bg-main.png")]
});
ig.baked = !0;
ig.module("game.entities.common.levels").requires("impact.entity").defines(function() {
    EntityLevels = ig.Entity.extend({
        size: {
            x: 253,
            y: 200
        },
        type: ig.Entity.TYPE.B,
        gravityFactor: 0,
        initLevel: 0,
        zIndex: 2200,
        scrollingDistance: 0,
        level: [],
        totalLevel: 20,
        EmptyMilk: new ig.Image("media/graphics/game/prop/empty-milk-small.png"),
        Milk: new ig.Image("media/graphics/game/prop/milk-small.png"),
        Lock: new ig.Image("media/graphics/game/prop/lock.png"),
        levels: new ig.Image("media/graphics/game/prop/levels.png"),
        init: function(b,
            c, d) {
            this.parent(b, c, d);
            ig.game.storage && ig.game.storage.isSet("BABY-COW-LEVEL :") && (this.scrollingDistance = this.initLevel = ig.game.storage.getInt("BABY-COW-LEVEL :") - 2)
        },
        update: function() {
            this.parent();
            this.scrollScreen()
        },
        scrollScreen: function() {
            0 >= ig.game.getEntitiesByType(EntityPointer).length || (this.pointer = ig.game.getEntitiesByType(EntityPointer)[0], this.pointer.update(), ig.input.pressed("click") && (this.clicking = !1, this.initX = this.initLevel, this.initMouseX = this.pointer.pos.x), ig.ua.mobile ? (ig.input.state("click") &&
                50 < this.pointer.pos.y ? (this.clicking = !0, 0 <= this.initLevel ? this.initLevel = this.initX - (this.pointer.pos.x - this.initMouseX) / 100 : this.initLevel < ig.game.director.levels.length - 4 && (this.initLevel = this.initX - (this.pointer.pos.x - this.initMouseX) / 100), 0 > this.initLevel ? this.initLevel = 0 : this.initLevel > ig.game.director.levels.length - 4 && (this.initLevel = ig.game.director.levels.length - 4)) : this.clicking = !1, ig.input.released("click") && !0 != this.clicking && 50 < this.pointer.pos.y && (this.pointer.pos.x > this.pos.x + this.size.x ?
                    this.initLevel < ig.game.director.levels.length - 4 && (this.initLevel += 1) : this.pointer.pos.x < this.pos.x && 0 < this.initLevel && (this.initLevel -= 1))) : ig.input.state("click") && (this.pointer.pos.x > ig.system.width / 1.25 && 50 < this.pointer.pos.y ? this.initLevel < ig.game.director.levels.length - 4 && this.scrollingDistance >= this.initLevel - 0.1 && this.scrollingDistance <= this.initLevel + 0.1 && (this.initLevel += 1) : this.pointer.pos.x < ig.system.width / 3 && 50 < this.pointer.pos.y && 0 < this.initLevel && (this.scrollingDistance >= this.initLevel -
                0.1 && this.scrollingDistance <= this.initLevel + 0.1) && (this.initLevel -= 1)), !1 == this.clicking && (this.initLevel = this.initLevel < Math.round(this.initLevel) ? this.initLevel + 0.1 : this.initLevel < Math.round(this.initLevel) ? this.initLevel - 0.1 : Math.round(this.initLevel)), this.scrollingDistance = this.scrollingDistance <= this.initLevel - 0.1 ? this.scrollingDistance + 0.1 : this.scrollingDistance >= this.initLevel + 0.1 ? this.scrollingDistance - 0.1 : this.initLevel)
        },
        draw: function() {
            this.parent();
            for (var b = 0; b < ig.game.director.levels.length -
                3; b++) {
                var c = ig.system.context,
                    d = this.pos.x + 300 * b - 300 * this.scrollingDistance,
                    e = this.size.x,
                    f = this.size.y,
                    j = d,
                    p = this.pos.y;
                if (ig.game.storage) var m = ig.game.storage.get("BABY-COW-STORAGE :");
                if (640 >= d && 0 <= d + this.size.x) {
                    if (this.pointer)
                        if (b == this.initLevel)
                            if (c.drawImage(this.levels.data, 0, b * (this.levels.height / this.totalLevel), this.levels.width, this.levels.height / this.totalLevel, this.pos.x + (this.size.x - this.levels.width) / this.totalLevel + 300 * b - 300 * this.scrollingDistance + 10, this.pos.y + (this.size.y - this.levels.height /
                                this.totalLevel) / 2, this.levels.width, this.levels.height / this.totalLevel), this.pointer.pos.x >= this.pos.x && this.pointer.pos.x <= this.pos.x + this.size.x && this.pointer.pos.y >= this.pos.y && this.pointer.pos.y <= this.pos.y + this.size.y) {
                                if (ig.input.pressed("click")) try {
                                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                                } catch (s) {
                                    console.log(s)
                                }
                                m && !0 == m[b].Completed && 0 != b ? ig.input.released("click") && ig.game.storage && ig.game.storage.isSet("BABY-COW-STORAGE :") && !0 == ig.game.storage.get("BABY-COW-STORAGE :")[this.initLevel].Completed &&
                                    ig.game.director.loadLevel(this.initLevel + 2) : 0 == b ? ig.input.released("click") && ig.game.director.loadLevel(2) : (c.save(), c.globalAlpha = 0.3, c.beginPath(), c.rect(this.pos.x + this.size.x / 12 + 300 * b - 300 * this.scrollingDistance - 10, this.pos.y + 10, e / 1.1, f / 1.1), c.fillStyle = "#000000", c.fill(), c.restore())
                            } else c.save(), c.globalAlpha = 0.3, c.beginPath(), c.rect(this.pos.x + this.size.x / 12 + 300 * b - 300 * this.scrollingDistance - 10, this.pos.y + 10, e / 1.1, f / 1.1), c.fillStyle = "#000000", c.fill(), c.restore();
                    else c.drawImage(this.levels.data,
                            0, b * (this.levels.height / this.totalLevel), this.levels.width, this.levels.height / this.totalLevel, this.pos.x + (this.size.x - this.levels.width) / this.totalLevel + 300 * b - 300 * this.scrollingDistance + this.size.x / 6 + 10, this.pos.y + (this.size.y - this.levels.height / this.totalLevel) / 2 + this.size.y / 6, this.levels.width / 1.6, this.levels.height / this.totalLevel / 1.6), c.save(), c.globalAlpha = 0.3, c.beginPath(), c.rect(this.pos.x + this.size.x / 5 + 300 * b - 300 * this.scrollingDistance, this.pos.y + this.size.y / 5, e / 1.7, f / 1.7), c.fillStyle = !0 ==
                        this.clicking && this.pos.x + this.size.x / 5 + 300 * b - 300 * this.scrollingDistance > ig.system.width / 3 && this.pos.x + this.size.x / 5 + 300 * b - 300 * this.scrollingDistance + this.size.x / 1.5 < ig.system.width / 1.25 ? "brown" : !0 != this.clicking && this.pointer.pos.x >= this.pos.x + this.size.x / 5 + 300 * b - 300 * this.scrollingDistance && this.pointer.pos.x <= this.pos.x + this.size.x / 5 + 300 * b - 300 * this.scrollingDistance + this.size.x / 1.5 ? "brown" : "#000000", c.fill(), c.restore(); if (m && !0 == m[b].Completed)
                        if (b == this.initLevel) {
                            if (c.drawImage(this.EmptyMilk.data,
                                0, 0, this.EmptyMilk.width, this.EmptyMilk.height, this.pos.x + this.size.x / 2 - this.EmptyMilk.width / 2 + 300 * b - 300 * this.scrollingDistance, this.pos.y + 15, this.EmptyMilk.width, this.EmptyMilk.height), m && 0 < m[b].Score)
                                for (d = 0; d < m[b].Score; d++) c.drawImage(this.Milk.data, 0, 0, this.Milk.width, this.Milk.height, this.pos.x + this.size.x / 2 - this.Milk.width / 2 + 300 * b - 300 * this.scrollingDistance - 26 + 26 * d, this.pos.y + 18, this.Milk.width, this.Milk.height)
                        } else if (c.drawImage(this.EmptyMilk.data, 0, 0, this.EmptyMilk.width, this.EmptyMilk.height,
                        this.pos.x + this.size.x / 2 - this.EmptyMilk.width / 2 + 300 * b - 300 * this.scrollingDistance + this.size.x / 12, this.pos.y + 15 + this.size.y / 6, this.EmptyMilk.width / 1.5, this.EmptyMilk.height / 1.5), m && 0 < m[b].Score)
                        for (d = 0; d < m[b].Score; d++) c.drawImage(this.Milk.data, 0, 0, this.Milk.width, this.Milk.height, this.pos.x + this.size.x / 2 - this.Milk.width / 2 + 300 * b - 300 * this.scrollingDistance - 17 + 17 * d + 6.5, this.pos.y + 18 + this.size.y / 6, this.Milk.width / 1.5, this.Milk.height / 1.5);
                    c.save();
                    c.lineJoin = "round";
                    c.lineWidth = 10;
                    c.strokeStyle = "#ffffff";
                    b == this.initLevel ? c.strokeRect(j + 10, p + 10, e - 20, f - 20) : c.strokeRect(j + 10 + this.size.x / 6, p + 10 + this.size.y / 6, e / 1.5 - 20, f / 1.5 - 20);
                    c.restore();
                    c.save();
                    e = this.pos.x + (this.size.x - 10) + 300 * b - 300 * this.scrollingDistance;
                    f = this.pos.y + (this.size.y - 10);
                    c.beginPath();
                    b == this.initLevel ? c.arc(e, f, 35, 0, 2 * Math.PI, !1) : c.arc(e - this.size.x / 6, f - this.size.y / 6, 25, 0, 2 * Math.PI, !1);
                    c.fillStyle = "#b46923";
                    c.fill();
                    c.restore();
                    c.save();
                    ig.system.context.font = b == this.initLevel ? "40px hole" : "30px hole";
                    ig.system.context.fillStyle = "#ffffff";
                    ig.system.context.textAlign = "center";
                    d = this.pos.x + (this.size.x - 10) + 300 * b - 300 * this.scrollingDistance;
                    e = this.pos.y + this.size.y;
                    b == this.initLevel ? ig.system.context.fillText(b + 1, d, e + 2) : ig.system.context.fillText(b + 1, d - this.size.x / 6, e - this.size.y / 5.8);
                    c.restore();
                    0 != b && m && !0 != m[b].Completed ? b == this.initLevel ? c.drawImage(this.Lock.data, 0, 0, this.Lock.width, this.Lock.height, this.pos.x + this.size.x / 2 - this.Lock.width / 2 + 300 * b - 300 * this.scrollingDistance, this.pos.y + 50, this.Lock.width, this.Lock.height) : c.drawImage(this.Lock.data,
                        0, 0, this.Lock.width, this.Lock.height, this.pos.x + this.size.x / 2 - this.Lock.width / 2 + 300 * b - 300 * this.scrollingDistance + this.size.x / 20, this.pos.y + 50 + this.size.y / 12, this.Lock.width / 1.5, this.Lock.height / 1.5) : !ig.game.storage && 0 != b && (b == this.initLevel ? c.drawImage(this.Lock.data, 0, 0, this.Lock.width, this.Lock.height, this.pos.x + this.size.x / 2 - this.Lock.width / 2 + 300 * b - 300 * this.scrollingDistance, this.pos.y + 50, this.Lock.width, this.Lock.height) : c.drawImage(this.Lock.data, 0, 0, this.Lock.width, this.Lock.height, this.pos.x +
                        this.size.x / 2 - this.Lock.width / 2 + 300 * b - 300 * this.scrollingDistance + this.size.x / 20, this.pos.y + 50 + this.size.y / 12, this.Lock.width / 1.5, this.Lock.height / 1.5))
                }
            }
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-return").requires("impact.entity").defines(function() {
    EntityBtnReturn = ig.Entity.extend({
        size: {
            x: 65,
            y: 40
        },
        type: ig.Entity.TYPE.B,
        zIndex: 3010,
        gravityFactor: 0,
        btnStatus: 0,
        type: 2,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        rotation: 0,
        btn: new ig.Image("media/graphics/game/buttons/buttons.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.global.wm || (ig.game.sortEntities(), this.pointer = ig.game.spawnEntity(EntityPointer, 0, 0))
        },
        update: function() {
            this.parent();
            this.CheckTouch()
        },
        CheckTouch: function() {
            if (this.pointer) {
                var b = this.pointer;
                if (b.pos.x >= this.pos.x && b.pos.x <= this.pos.x + this.size.x && b.pos.y >= this.pos.y && b.pos.y <= this.pos.y + this.size.y) {
                    ig.game.pointedButton = this;
                    if (ig.input.pressed("click")) try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                    } catch (c) {
                        console.log(c)
                    }
                    ig.input.pressed("click") && (this.isClicked = ig.game.btnClicked = !0);
                    this.btnStatus = 1
                } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0);
                ig.game.paused &&
                    (this.btnStatus = 1)
            }
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, ig.game.director.jumpTo(LevelMain), ig.game.pointedButton == this && (ig.game.pointedButton = null), ig.game.btnClicked = !1));
            b.save();
            b.translate(this.pos.x + this.size.x / 2, this.pos.y + this.size.y / 2);
            b.rotate(this.rotation);
            b.drawImage(this.btn.data, this.btnStatus * (this.size.x - 0.5), this.type * this.size.y, this.size.x, this.size.y, 0 - this.size.x / 2, 0 - this.size.y / 2, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y);
            b.restore()
        }
    })
});
ig.baked = !0;
ig.module("game.levels.select-level").requires("impact.image", "game.entities.buttons.btn-music", "game.entities.common.levels", "game.entities.buttons.btn-return").defines(function() {
    LevelSelectLevel = {
        entities: [{
            type: "EntityBtnMusic",
            x: 104,
            y: 16
        }, {
            type: "EntityLevels",
            x: 188,
            y: 164
        }, {
            type: "EntityBtnReturn",
            x: 16,
            y: 16
        }],
        layer: [{
            name: "new_layer_0",
            width: 32,
            height: 24,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-level.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 20,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32],
                [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64],
                [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96],
                [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128],
                [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
                    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160
                ],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192],
                [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224],
                [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256],
                [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
                    274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288
                ],
                [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320],
                [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352],
                [353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384],
                [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
                    398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416
                ],
                [417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448],
                [449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480],
                [481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512],
                [513, 514, 515, 516, 517, 518, 519, 520, 521,
                    522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544
                ],
                [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576],
                [577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608],
                [609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640],
                [641, 642, 643, 644, 645,
                    646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672
                ],
                [673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704],
                [705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736],
                [737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768]
            ]
        }]
    };
    LevelSelectLevelResources = [new ig.Image("media/graphics/game/background/bg-level.png")]
});
var Box2D = {
    SCALE: 0.1
};
(function(b, c) {
    function d() {}!(Object.prototype.defineProperty instanceof Function) && Object.prototype.__defineGetter__ instanceof Function && Object.prototype.__defineSetter__ instanceof Function && (Object.defineProperty = function(b, c, d) {
        d.get instanceof Function && b.__defineGetter__(c, d.get);
        d.set instanceof Function && b.__defineSetter__(c, d.set)
    });
    b.inherit = function(b, c) {
        d.prototype = c.prototype;
        b.prototype = new d;
        b.prototype.constructor = b
    };
    b.generateCallback = function(b, c) {
        return function() {
            c.apply(b, arguments)
        }
    };
    b.NVector = function(b) {
        b === c && (b = 0);
        for (var d = Array(b || 0), j = 0; j < b; ++j) d[j] = 0;
        return d
    };
    b.is = function(b, d) {
        return null === b ? !1 : d instanceof Function && b instanceof d || b.constructor.__implements != c && b.constructor.__implements[d] ? !0 : !1
    };
    b.parseUInt = function(b) {
        return Math.abs(parseInt(b))
    }
})(Box2D);
var Vector = Array,
    Vector_a2j_Number = Box2D.NVector;
"undefined" === typeof Box2D && (Box2D = {});
"undefined" === typeof Box2D.Collision && (Box2D.Collision = {});
"undefined" === typeof Box2D.Collision.Shapes && (Box2D.Collision.Shapes = {});
"undefined" === typeof Box2D.Common && (Box2D.Common = {});
"undefined" === typeof Box2D.Common.Math && (Box2D.Common.Math = {});
"undefined" === typeof Box2D.Dynamics && (Box2D.Dynamics = {});
"undefined" === typeof Box2D.Dynamics.Contacts && (Box2D.Dynamics.Contacts = {});
"undefined" === typeof Box2D.Dynamics.Controllers && (Box2D.Dynamics.Controllers = {});
"undefined" === typeof Box2D.Dynamics.Joints && (Box2D.Dynamics.Joints = {});
(function() {
    function b() {
        b.b2AABB.apply(this, arguments)
    }

    function c() {
        c.b2Bound.apply(this, arguments)
    }

    function d() {
        d.b2BoundValues.apply(this, arguments);
        this.constructor === d && this.b2BoundValues.apply(this, arguments)
    }

    function e() {
        e.b2Collision.apply(this, arguments)
    }

    function f() {
        f.b2ContactID.apply(this, arguments);
        this.constructor === f && this.b2ContactID.apply(this, arguments)
    }

    function j() {
        j.b2ContactPoint.apply(this, arguments)
    }

    function p() {
        p.b2Distance.apply(this, arguments)
    }

    function m() {
        m.b2DistanceInput.apply(this,
            arguments)
    }

    function s() {
        s.b2DistanceOutput.apply(this, arguments)
    }

    function v() {
        v.b2DistanceProxy.apply(this, arguments)
    }

    function A() {
        A.b2DynamicTree.apply(this, arguments);
        this.constructor === A && this.b2DynamicTree.apply(this, arguments)
    }

    function B() {
        B.b2DynamicTreeBroadPhase.apply(this, arguments)
    }

    function z() {
        z.b2DynamicTreeNode.apply(this, arguments)
    }

    function x() {
        x.b2DynamicTreePair.apply(this, arguments)
    }

    function I() {
        I.b2Manifold.apply(this, arguments);
        this.constructor === I && this.b2Manifold.apply(this, arguments)
    }

    function E() {
        E.b2ManifoldPoint.apply(this, arguments);
        this.constructor === E && this.b2ManifoldPoint.apply(this, arguments)
    }

    function t() {
        t.b2Point.apply(this, arguments)
    }

    function H() {
        H.b2RayCastInput.apply(this, arguments);
        this.constructor === H && this.b2RayCastInput.apply(this, arguments)
    }

    function L() {
        L.b2RayCastOutput.apply(this, arguments)
    }

    function Q() {
        Q.b2Segment.apply(this, arguments)
    }

    function M() {
        M.b2SeparationFunction.apply(this, arguments)
    }

    function P() {
        P.b2Simplex.apply(this, arguments);
        this.constructor ===
            P && this.b2Simplex.apply(this, arguments)
    }

    function C() {
        C.b2SimplexCache.apply(this, arguments)
    }

    function S() {
        S.b2SimplexVertex.apply(this, arguments)
    }

    function N() {
        N.b2TimeOfImpact.apply(this, arguments)
    }

    function O() {
        O.b2TOIInput.apply(this, arguments)
    }

    function Z() {
        Z.b2WorldManifold.apply(this, arguments);
        this.constructor === Z && this.b2WorldManifold.apply(this, arguments)
    }

    function T() {
        T.ClipVertex.apply(this, arguments)
    }

    function n() {
        n.Features.apply(this, arguments)
    }

    function y() {
        y.b2CircleShape.apply(this, arguments);
        this.constructor === y && this.b2CircleShape.apply(this, arguments)
    }

    function F() {
        F.b2EdgeChainDef.apply(this, arguments);
        this.constructor === F && this.b2EdgeChainDef.apply(this, arguments)
    }

    function u() {
        u.b2EdgeShape.apply(this, arguments);
        this.constructor === u && this.b2EdgeShape.apply(this, arguments)
    }

    function G() {
        G.b2MassData.apply(this, arguments)
    }

    function J() {
        J.b2PolygonShape.apply(this, arguments);
        this.constructor === J && this.b2PolygonShape.apply(this, arguments)
    }

    function W() {
        W.b2Shape.apply(this, arguments);
        this.constructor ===
            W && this.b2Shape.apply(this, arguments)
    }

    function g() {
        g.b2Color.apply(this, arguments);
        this.constructor === g && this.b2Color.apply(this, arguments)
    }

    function r() {
        r.b2Settings.apply(this, arguments)
    }

    function K() {
        K.b2Mat22.apply(this, arguments);
        this.constructor === K && this.b2Mat22.apply(this, arguments)
    }

    function q() {
        q.b2Mat33.apply(this, arguments);
        this.constructor === q && this.b2Mat33.apply(this, arguments)
    }

    function D() {
        D.b2Math.apply(this, arguments)
    }

    function R() {
        R.b2Sweep.apply(this, arguments)
    }

    function U() {
        U.b2Transform.apply(this,
            arguments);
        this.constructor === U && this.b2Transform.apply(this, arguments)
    }

    function ga() {
        ga.b2Vec2.apply(this, arguments);
        this.constructor === ga && this.b2Vec2.apply(this, arguments)
    }

    function ja() {
        ja.b2Vec3.apply(this, arguments);
        this.constructor === ja && this.b2Vec3.apply(this, arguments)
    }

    function l() {
        l.b2Body.apply(this, arguments);
        this.constructor === l && this.b2Body.apply(this, arguments)
    }

    function ba() {
        ba.b2BodyDef.apply(this, arguments);
        this.constructor === ba && this.b2BodyDef.apply(this, arguments)
    }

    function Ka() {
        Ka.b2ContactFilter.apply(this,
            arguments)
    }

    function pa() {
        pa.b2ContactImpulse.apply(this, arguments)
    }

    function yb() {
        yb.b2ContactListener.apply(this, arguments)
    }

    function ab() {
        ab.b2ContactManager.apply(this, arguments);
        this.constructor === ab && this.b2ContactManager.apply(this, arguments)
    }

    function La() {
        La.b2DebugDraw.apply(this, arguments);
        this.constructor === La && this.b2DebugDraw.apply(this, arguments)
    }

    function zb() {
        zb.b2DestructionListener.apply(this, arguments)
    }

    function Ab() {
        Ab.b2FilterData.apply(this, arguments)
    }

    function bb() {
        bb.b2Fixture.apply(this,
            arguments);
        this.constructor === bb && this.b2Fixture.apply(this, arguments)
    }

    function cb() {
        cb.b2FixtureDef.apply(this, arguments);
        this.constructor === cb && this.b2FixtureDef.apply(this, arguments)
    }

    function db() {
        db.b2Island.apply(this, arguments);
        this.constructor === db && this.b2Island.apply(this, arguments)
    }

    function Bb() {
        Bb.b2TimeStep.apply(this, arguments)
    }

    function eb() {
        eb.b2World.apply(this, arguments);
        this.constructor === eb && this.b2World.apply(this, arguments)
    }

    function Ba() {
        Ba.b2CircleContact.apply(this, arguments)
    }

    function Ma() {
        Ma.b2Contact.apply(this, arguments);
        this.constructor === Ma && this.b2Contact.apply(this, arguments)
    }

    function Na() {
        Na.b2ContactConstraint.apply(this, arguments);
        this.constructor === Na && this.b2ContactConstraint.apply(this, arguments)
    }

    function Cb() {
        Cb.b2ContactConstraintPoint.apply(this, arguments)
    }

    function Oa() {
        Oa.b2ContactEdge.apply(this, arguments)
    }

    function da() {
        da.b2ContactFactory.apply(this, arguments);
        this.constructor === da && this.b2ContactFactory.apply(this, arguments)
    }

    function Ca() {
        Ca.b2ContactRegister.apply(this,
            arguments)
    }

    function qa() {
        qa.b2ContactResult.apply(this, arguments)
    }

    function va() {
        va.b2ContactSolver.apply(this, arguments);
        this.constructor === va && this.b2ContactSolver.apply(this, arguments)
    }

    function Da() {
        Da.b2EdgeAndCircleContact.apply(this, arguments)
    }

    function fa() {
        fa.b2NullContact.apply(this, arguments);
        this.constructor === fa && this.b2NullContact.apply(this, arguments)
    }

    function ra() {
        ra.b2PolyAndCircleContact.apply(this, arguments)
    }

    function Ea() {
        Ea.b2PolyAndEdgeContact.apply(this, arguments)
    }

    function Pa() {
        Pa.b2PolygonContact.apply(this,
            arguments)
    }

    function ta() {
        ta.b2PositionSolverManifold.apply(this, arguments);
        this.constructor === ta && this.b2PositionSolverManifold.apply(this, arguments)
    }

    function fb() {
        fb.b2BuoyancyController.apply(this, arguments)
    }

    function aa() {
        aa.b2ConstantAccelController.apply(this, arguments)
    }

    function Qb() {
        Qb.b2ConstantForceController.apply(this, arguments)
    }

    function ub() {
        ub.b2Controller.apply(this, arguments)
    }

    function tb() {
        tb.b2ControllerEdge.apply(this, arguments)
    }

    function la() {
        la.b2GravityController.apply(this, arguments)
    }

    function gb() {
        gb.b2TensorDampingController.apply(this, arguments)
    }

    function Qa() {
        Qa.b2DistanceJoint.apply(this, arguments);
        this.constructor === Qa && this.b2DistanceJoint.apply(this, arguments)
    }

    function Ra() {
        Ra.b2DistanceJointDef.apply(this, arguments);
        this.constructor === Ra && this.b2DistanceJointDef.apply(this, arguments)
    }

    function hb() {
        hb.b2FrictionJoint.apply(this, arguments);
        this.constructor === hb && this.b2FrictionJoint.apply(this, arguments)
    }

    function ib() {
        ib.b2FrictionJointDef.apply(this, arguments);
        this.constructor ===
            ib && this.b2FrictionJointDef.apply(this, arguments)
    }

    function jb() {
        jb.b2GearJoint.apply(this, arguments);
        this.constructor === jb && this.b2GearJoint.apply(this, arguments)
    }

    function kb() {
        kb.b2GearJointDef.apply(this, arguments);
        this.constructor === kb && this.b2GearJointDef.apply(this, arguments)
    }

    function lb() {
        lb.b2Jacobian.apply(this, arguments)
    }

    function Sa() {
        Sa.b2Joint.apply(this, arguments);
        this.constructor === Sa && this.b2Joint.apply(this, arguments)
    }

    function Fa() {
        Fa.b2JointDef.apply(this, arguments);
        this.constructor ===
            Fa && this.b2JointDef.apply(this, arguments)
    }

    function mb() {
        mb.b2JointEdge.apply(this, arguments)
    }

    function nb() {
        nb.b2LineJoint.apply(this, arguments);
        this.constructor === nb && this.b2LineJoint.apply(this, arguments)
    }

    function ob() {
        ob.b2LineJointDef.apply(this, arguments);
        this.constructor === ob && this.b2LineJointDef.apply(this, arguments)
    }

    function pb() {
        pb.b2MouseJoint.apply(this, arguments);
        this.constructor === pb && this.b2MouseJoint.apply(this, arguments)
    }

    function Ta() {
        Ta.b2MouseJointDef.apply(this, arguments);
        this.constructor ===
            Ta && this.b2MouseJointDef.apply(this, arguments)
    }

    function Ua() {
        Ua.b2PrismaticJoint.apply(this, arguments);
        this.constructor === Ua && this.b2PrismaticJoint.apply(this, arguments)
    }

    function qb() {
        qb.b2PrismaticJointDef.apply(this, arguments);
        this.constructor === qb && this.b2PrismaticJointDef.apply(this, arguments)
    }

    function Y() {
        Y.b2PulleyJoint.apply(this, arguments);
        this.constructor === Y && this.b2PulleyJoint.apply(this, arguments)
    }

    function ua() {
        ua.b2PulleyJointDef.apply(this, arguments);
        this.constructor === ua && this.b2PulleyJointDef.apply(this,
            arguments)
    }

    function Xa() {
        Xa.b2RevoluteJoint.apply(this, arguments);
        this.constructor === Xa && this.b2RevoluteJoint.apply(this, arguments)
    }

    function oa() {
        oa.b2RevoluteJointDef.apply(this, arguments);
        this.constructor === oa && this.b2RevoluteJointDef.apply(this, arguments)
    }

    function wa() {
        wa.b2WeldJoint.apply(this, arguments);
        this.constructor === wa && this.b2WeldJoint.apply(this, arguments)
    }

    function xa() {
        xa.b2WeldJointDef.apply(this, arguments);
        this.constructor === xa && this.b2WeldJointDef.apply(this, arguments)
    }
    Box2D.Collision.IBroadPhase =
        "Box2D.Collision.IBroadPhase";
    Box2D.Collision.b2AABB = b;
    Box2D.Collision.b2Bound = c;
    Box2D.Collision.b2BoundValues = d;
    Box2D.Collision.b2Collision = e;
    Box2D.Collision.b2ContactID = f;
    Box2D.Collision.b2ContactPoint = j;
    Box2D.Collision.b2Distance = p;
    Box2D.Collision.b2DistanceInput = m;
    Box2D.Collision.b2DistanceOutput = s;
    Box2D.Collision.b2DistanceProxy = v;
    Box2D.Collision.b2DynamicTree = A;
    Box2D.Collision.b2DynamicTreeBroadPhase = B;
    Box2D.Collision.b2DynamicTreeNode = z;
    Box2D.Collision.b2DynamicTreePair = x;
    Box2D.Collision.b2Manifold =
        I;
    Box2D.Collision.b2ManifoldPoint = E;
    Box2D.Collision.b2Point = t;
    Box2D.Collision.b2RayCastInput = H;
    Box2D.Collision.b2RayCastOutput = L;
    Box2D.Collision.b2Segment = Q;
    Box2D.Collision.b2SeparationFunction = M;
    Box2D.Collision.b2Simplex = P;
    Box2D.Collision.b2SimplexCache = C;
    Box2D.Collision.b2SimplexVertex = S;
    Box2D.Collision.b2TimeOfImpact = N;
    Box2D.Collision.b2TOIInput = O;
    Box2D.Collision.b2WorldManifold = Z;
    Box2D.Collision.ClipVertex = T;
    Box2D.Collision.Features = n;
    Box2D.Collision.Shapes.b2CircleShape = y;
    Box2D.Collision.Shapes.b2EdgeChainDef =
        F;
    Box2D.Collision.Shapes.b2EdgeShape = u;
    Box2D.Collision.Shapes.b2MassData = G;
    Box2D.Collision.Shapes.b2PolygonShape = J;
    Box2D.Collision.Shapes.b2Shape = W;
    Box2D.Common.b2internal = "Box2D.Common.b2internal";
    Box2D.Common.b2Color = g;
    Box2D.Common.b2Settings = r;
    Box2D.Common.Math.b2Mat22 = K;
    Box2D.Common.Math.b2Mat33 = q;
    Box2D.Common.Math.b2Math = D;
    Box2D.Common.Math.b2Sweep = R;
    Box2D.Common.Math.b2Transform = U;
    Box2D.Common.Math.b2Vec2 = ga;
    Box2D.Common.Math.b2Vec3 = ja;
    Box2D.Dynamics.b2Body = l;
    Box2D.Dynamics.b2BodyDef = ba;
    Box2D.Dynamics.b2ContactFilter =
        Ka;
    Box2D.Dynamics.b2ContactImpulse = pa;
    Box2D.Dynamics.b2ContactListener = yb;
    Box2D.Dynamics.b2ContactManager = ab;
    Box2D.Dynamics.b2DebugDraw = La;
    Box2D.Dynamics.b2DestructionListener = zb;
    Box2D.Dynamics.b2FilterData = Ab;
    Box2D.Dynamics.b2Fixture = bb;
    Box2D.Dynamics.b2FixtureDef = cb;
    Box2D.Dynamics.b2Island = db;
    Box2D.Dynamics.b2TimeStep = Bb;
    Box2D.Dynamics.b2World = eb;
    Box2D.Dynamics.Contacts.b2CircleContact = Ba;
    Box2D.Dynamics.Contacts.b2Contact = Ma;
    Box2D.Dynamics.Contacts.b2ContactConstraint = Na;
    Box2D.Dynamics.Contacts.b2ContactConstraintPoint =
        Cb;
    Box2D.Dynamics.Contacts.b2ContactEdge = Oa;
    Box2D.Dynamics.Contacts.b2ContactFactory = da;
    Box2D.Dynamics.Contacts.b2ContactRegister = Ca;
    Box2D.Dynamics.Contacts.b2ContactResult = qa;
    Box2D.Dynamics.Contacts.b2ContactSolver = va;
    Box2D.Dynamics.Contacts.b2EdgeAndCircleContact = Da;
    Box2D.Dynamics.Contacts.b2NullContact = fa;
    Box2D.Dynamics.Contacts.b2PolyAndCircleContact = ra;
    Box2D.Dynamics.Contacts.b2PolyAndEdgeContact = Ea;
    Box2D.Dynamics.Contacts.b2PolygonContact = Pa;
    Box2D.Dynamics.Contacts.b2PositionSolverManifold =
        ta;
    Box2D.Dynamics.Controllers.b2BuoyancyController = fb;
    Box2D.Dynamics.Controllers.b2ConstantAccelController = aa;
    Box2D.Dynamics.Controllers.b2ConstantForceController = Qb;
    Box2D.Dynamics.Controllers.b2Controller = ub;
    Box2D.Dynamics.Controllers.b2ControllerEdge = tb;
    Box2D.Dynamics.Controllers.b2GravityController = la;
    Box2D.Dynamics.Controllers.b2TensorDampingController = gb;
    Box2D.Dynamics.Joints.b2DistanceJoint = Qa;
    Box2D.Dynamics.Joints.b2DistanceJointDef = Ra;
    Box2D.Dynamics.Joints.b2FrictionJoint = hb;
    Box2D.Dynamics.Joints.b2FrictionJointDef =
        ib;
    Box2D.Dynamics.Joints.b2GearJoint = jb;
    Box2D.Dynamics.Joints.b2GearJointDef = kb;
    Box2D.Dynamics.Joints.b2Jacobian = lb;
    Box2D.Dynamics.Joints.b2Joint = Sa;
    Box2D.Dynamics.Joints.b2JointDef = Fa;
    Box2D.Dynamics.Joints.b2JointEdge = mb;
    Box2D.Dynamics.Joints.b2LineJoint = nb;
    Box2D.Dynamics.Joints.b2LineJointDef = ob;
    Box2D.Dynamics.Joints.b2MouseJoint = pb;
    Box2D.Dynamics.Joints.b2MouseJointDef = Ta;
    Box2D.Dynamics.Joints.b2PrismaticJoint = Ua;
    Box2D.Dynamics.Joints.b2PrismaticJointDef = qb;
    Box2D.Dynamics.Joints.b2PulleyJoint =
        Y;
    Box2D.Dynamics.Joints.b2PulleyJointDef = ua;
    Box2D.Dynamics.Joints.b2RevoluteJoint = Xa;
    Box2D.Dynamics.Joints.b2RevoluteJointDef = oa;
    Box2D.Dynamics.Joints.b2WeldJoint = wa;
    Box2D.Dynamics.Joints.b2WeldJointDef = xa
})();
Box2D.postDefs = [];
(function() {
    var b = Box2D.Collision.Shapes.b2CircleShape,
        c = Box2D.Collision.Shapes.b2PolygonShape,
        d = Box2D.Collision.Shapes.b2Shape,
        e = Box2D.Common.b2Settings,
        f = Box2D.Common.Math.b2Math,
        j = Box2D.Common.Math.b2Sweep,
        p = Box2D.Common.Math.b2Transform,
        m = Box2D.Common.Math.b2Vec2,
        s = Box2D.Collision.b2AABB,
        v = Box2D.Collision.b2Bound,
        A = Box2D.Collision.b2BoundValues,
        B = Box2D.Collision.b2Collision,
        z = Box2D.Collision.b2ContactID,
        x = Box2D.Collision.b2ContactPoint,
        I = Box2D.Collision.b2Distance,
        E = Box2D.Collision.b2DistanceInput,
        t = Box2D.Collision.b2DistanceOutput,
        H = Box2D.Collision.b2DistanceProxy,
        L = Box2D.Collision.b2DynamicTree,
        Q = Box2D.Collision.b2DynamicTreeBroadPhase,
        M = Box2D.Collision.b2DynamicTreeNode,
        P = Box2D.Collision.b2DynamicTreePair,
        C = Box2D.Collision.b2Manifold,
        S = Box2D.Collision.b2ManifoldPoint,
        N = Box2D.Collision.b2Point,
        O = Box2D.Collision.b2RayCastInput,
        Z = Box2D.Collision.b2RayCastOutput,
        T = Box2D.Collision.b2Segment,
        n = Box2D.Collision.b2SeparationFunction,
        y = Box2D.Collision.b2Simplex,
        F = Box2D.Collision.b2SimplexCache,
        u =
        Box2D.Collision.b2SimplexVertex,
        G = Box2D.Collision.b2TimeOfImpact,
        J = Box2D.Collision.b2TOIInput,
        W = Box2D.Collision.b2WorldManifold,
        g = Box2D.Collision.ClipVertex,
        r = Box2D.Collision.Features,
        K = Box2D.Collision.IBroadPhase;
    s.b2AABB = function() {
        this.lowerBound = new m;
        this.upperBound = new m
    };
    s.prototype.IsValid = function() {
        var b = this.upperBound.y - this.lowerBound.y;
        return 0 <= this.upperBound.x - this.lowerBound.x && 0 <= b && this.lowerBound.IsValid() && this.upperBound.IsValid()
    };
    s.prototype.GetCenter = function() {
        return new m((this.lowerBound.x +
            this.upperBound.x) / 2, (this.lowerBound.y + this.upperBound.y) / 2)
    };
    s.prototype.GetExtents = function() {
        return new m((this.upperBound.x - this.lowerBound.x) / 2, (this.upperBound.y - this.lowerBound.y) / 2)
    };
    s.prototype.Contains = function(b) {
        return this.lowerBound.x <= b.lowerBound.x && this.lowerBound.y <= b.lowerBound.y && b.upperBound.x <= this.upperBound.x && b.upperBound.y <= this.upperBound.y
    };
    s.prototype.RayCast = function(b, c) {
        var g = -Number.MAX_VALUE,
            d = Number.MAX_VALUE,
            e = c.p1.x,
            n = c.p1.y,
            l = c.p2.x - c.p1.x,
            f = c.p2.y - c.p1.y,
            r =
            Math.abs(f),
            m = b.normal,
            j = 0,
            u = 0,
            y = 0;
        if (Math.abs(l) < Number.MIN_VALUE) {
            if (e < this.lowerBound.x || this.upperBound.x < e) return !1
        } else if (j = 1 / l, u = (this.lowerBound.x - e) * j, j *= this.upperBound.x - e, y = -1, u > j && (y = u, u = j, j = y, y = 1), u > g && (m.x = y, m.y = 0, g = u), d = Math.min(d, j), g > d) return !1;
        if (r < Number.MIN_VALUE) {
            if (n < this.lowerBound.y || this.upperBound.y < n) return !1
        } else if (j = 1 / f, u = (this.lowerBound.y - n) * j, j *= this.upperBound.y - n, y = -1, u > j && (y = u, u = j, j = y, y = 1), u > g && (m.y = y, m.x = 0, g = u), d = Math.min(d, j), g > d) return !1;
        b.fraction = g;
        return !0
    };
    s.prototype.TestOverlap = function(b) {
        var c = b.lowerBound.y - this.upperBound.y,
            g = this.lowerBound.y - b.upperBound.y;
        return 0 < b.lowerBound.x - this.upperBound.x || 0 < c || 0 < this.lowerBound.x - b.upperBound.x || 0 < g ? !1 : !0
    };
    s.Combine = function(b, c) {
        var g = new s;
        g.Combine(b, c);
        return g
    };
    s.prototype.Combine = function(b, c) {
        this.lowerBound.x = Math.min(b.lowerBound.x, c.lowerBound.x);
        this.lowerBound.y = Math.min(b.lowerBound.y, c.lowerBound.y);
        this.upperBound.x = Math.max(b.upperBound.x, c.upperBound.x);
        this.upperBound.y = Math.max(b.upperBound.y,
            c.upperBound.y)
    };
    v.b2Bound = function() {};
    v.prototype.IsLower = function() {
        return 0 == (this.value & 1)
    };
    v.prototype.IsUpper = function() {
        return 1 == (this.value & 1)
    };
    v.prototype.Swap = function(b) {
        var c = this.value,
            g = this.proxy,
            d = this.stabbingCount;
        this.value = b.value;
        this.proxy = b.proxy;
        this.stabbingCount = b.stabbingCount;
        b.value = c;
        b.proxy = g;
        b.stabbingCount = d
    };
    A.b2BoundValues = function() {};
    A.prototype.b2BoundValues = function() {
        this.lowerValues = new Vector_a2j_Number;
        this.lowerValues[0] = 0;
        this.lowerValues[1] = 0;
        this.upperValues =
            new Vector_a2j_Number;
        this.upperValues[0] = 0;
        this.upperValues[1] = 0
    };
    B.b2Collision = function() {};
    B.ClipSegmentToLine = function(b, c, g, d) {
        void 0 === d && (d = 0);
        var e, n = 0;
        e = c[0];
        var l = e.v;
        e = c[1];
        var f = e.v,
            r = g.x * l.x + g.y * l.y - d;
        e = g.x * f.x + g.y * f.y - d;
        0 >= r && b[n++].Set(c[0]);
        0 >= e && b[n++].Set(c[1]);
        0 > r * e && (g = r / (r - e), e = b[n], e = e.v, e.x = l.x + g * (f.x - l.x), e.y = l.y + g * (f.y - l.y), e = b[n], e.id = (0 < r ? c[0] : c[1]).id, ++n);
        return n
    };
    B.EdgeSeparation = function(b, c, g, d, e) {
        void 0 === g && (g = 0);
        parseInt(b.m_vertexCount);
        var n = b.m_vertices;
        b = b.m_normals;
        var l = parseInt(d.m_vertexCount),
            f = d.m_vertices,
            r, m;
        r = c.R;
        m = b[g];
        b = r.col1.x * m.x + r.col2.x * m.y;
        d = r.col1.y * m.x + r.col2.y * m.y;
        r = e.R;
        var j = r.col1.x * b + r.col1.y * d;
        r = r.col2.x * b + r.col2.y * d;
        for (var u = 0, y = Number.MAX_VALUE, K = 0; K < l; ++K) m = f[K], m = m.x * j + m.y * r, m < y && (y = m, u = K);
        m = n[g];
        r = c.R;
        g = c.position.x + (r.col1.x * m.x + r.col2.x * m.y);
        c = c.position.y + (r.col1.y * m.x + r.col2.y * m.y);
        m = f[u];
        r = e.R;
        n = e.position.x + (r.col1.x * m.x + r.col2.x * m.y);
        e = e.position.y + (r.col1.y * m.x + r.col2.y * m.y);
        return (n - g) * b + (e - c) * d
    };
    B.FindMaxSeparation = function(b,
        c, g, d, e) {
        var n = parseInt(c.m_vertexCount),
            l = c.m_normals,
            f, r;
        r = e.R;
        f = d.m_centroid;
        var m = e.position.x + (r.col1.x * f.x + r.col2.x * f.y),
            j = e.position.y + (r.col1.y * f.x + r.col2.y * f.y);
        r = g.R;
        f = c.m_centroid;
        m -= g.position.x + (r.col1.x * f.x + r.col2.x * f.y);
        j -= g.position.y + (r.col1.y * f.x + r.col2.y * f.y);
        r = m * g.R.col1.x + j * g.R.col1.y;
        for (var j = m * g.R.col2.x + j * g.R.col2.y, m = 0, u = -Number.MAX_VALUE, y = 0; y < n; ++y) f = l[y], f = f.x * r + f.y * j, f > u && (u = f, m = y);
        l = B.EdgeSeparation(c, g, m, d, e);
        f = parseInt(0 <= m - 1 ? m - 1 : n - 1);
        r = B.EdgeSeparation(c, g, f, d, e);
        var j = parseInt(m + 1 < n ? m + 1 : 0),
            u = B.EdgeSeparation(c, g, j, d, e),
            K = 0,
            t = 0;
        if (r > l && r > u) t = -1, y = f, K = r;
        else if (u > l) t = 1, y = j, K = u;
        else return b[0] = m, l;
        for (;;)
            if (m = -1 == t ? 0 <= y - 1 ? y - 1 : n - 1 : y + 1 < n ? y + 1 : 0, l = B.EdgeSeparation(c, g, m, d, e), l > K) y = m, K = l;
            else break;
        b[0] = y;
        return K
    };
    B.FindIncidentEdge = function(b, c, g, d, e, n) {
        void 0 === d && (d = 0);
        parseInt(c.m_vertexCount);
        var l = c.m_normals,
            f = parseInt(e.m_vertexCount);
        c = e.m_vertices;
        e = e.m_normals;
        var r;
        r = g.R;
        g = l[d];
        var l = r.col1.x * g.x + r.col2.x * g.y,
            m = r.col1.y * g.x + r.col2.y * g.y;
        r = n.R;
        g = r.col1.x *
            l + r.col1.y * m;
        m = r.col2.x * l + r.col2.y * m;
        l = g;
        r = 0;
        for (var j = Number.MAX_VALUE, u = 0; u < f; ++u) g = e[u], g = l * g.x + m * g.y, g < j && (j = g, r = u);
        e = parseInt(r);
        l = parseInt(e + 1 < f ? e + 1 : 0);
        f = b[0];
        g = c[e];
        r = n.R;
        f.v.x = n.position.x + (r.col1.x * g.x + r.col2.x * g.y);
        f.v.y = n.position.y + (r.col1.y * g.x + r.col2.y * g.y);
        f.id.features.referenceEdge = d;
        f.id.features.incidentEdge = e;
        f.id.features.incidentVertex = 0;
        f = b[1];
        g = c[l];
        r = n.R;
        f.v.x = n.position.x + (r.col1.x * g.x + r.col2.x * g.y);
        f.v.y = n.position.y + (r.col1.y * g.x + r.col2.y * g.y);
        f.id.features.referenceEdge =
            d;
        f.id.features.incidentEdge = l;
        f.id.features.incidentVertex = 1
    };
    B.MakeClipPointVector = function() {
        var b = new Vector(2);
        b[0] = new g;
        b[1] = new g;
        return b
    };
    B.CollidePolygons = function(b, c, g, d, f) {
        var n;
        b.m_pointCount = 0;
        var l = c.m_radius + d.m_radius;
        B.s_edgeAO[0] = 0;
        var r = B.FindMaxSeparation(B.s_edgeAO, c, g, d, f);
        n = B.s_edgeAO[0];
        if (!(r > l)) {
            var m;
            B.s_edgeBO[0] = 0;
            var j = B.FindMaxSeparation(B.s_edgeBO, d, f, c, g);
            m = B.s_edgeBO[0];
            if (!(j > l)) {
                var u = 0,
                    y = 0;
                j > 0.98 * r + 0.0010 ? (r = d, d = c, c = f, u = m, b.m_type = C.e_faceB, y = 1) : (r = c, c = g, g =
                    f, u = n, b.m_type = C.e_faceA, y = 0);
                n = B.s_incidentEdge;
                B.FindIncidentEdge(n, r, c, u, d, g);
                m = parseInt(r.m_vertexCount);
                f = r.m_vertices;
                var r = f[u],
                    K;
                K = u + 1 < m ? f[parseInt(u + 1)] : f[0];
                u = B.s_localTangent;
                u.Set(K.x - r.x, K.y - r.y);
                u.Normalize();
                f = B.s_localNormal;
                f.x = u.y;
                f.y = -u.x;
                d = B.s_planePoint;
                d.Set(0.5 * (r.x + K.x), 0.5 * (r.y + K.y));
                j = B.s_tangent;
                m = c.R;
                j.x = m.col1.x * u.x + m.col2.x * u.y;
                j.y = m.col1.y * u.x + m.col2.y * u.y;
                var t = B.s_tangent2;
                t.x = -j.x;
                t.y = -j.y;
                u = B.s_normal;
                u.x = j.y;
                u.y = -j.x;
                var F = B.s_v11,
                    G = B.s_v12;
                F.x = c.position.x + (m.col1.x *
                    r.x + m.col2.x * r.y);
                F.y = c.position.y + (m.col1.y * r.x + m.col2.y * r.y);
                G.x = c.position.x + (m.col1.x * K.x + m.col2.x * K.y);
                G.y = c.position.y + (m.col1.y * K.x + m.col2.y * K.y);
                c = u.x * F.x + u.y * F.y;
                m = j.x * G.x + j.y * G.y + l;
                K = B.s_clipPoints1;
                r = B.s_clipPoints2;
                G = B.ClipSegmentToLine(K, n, t, -j.x * F.x - j.y * F.y + l);
                if (!(2 > G) && (G = B.ClipSegmentToLine(r, K, j, m), !(2 > G))) {
                    b.m_localPlaneNormal.SetV(f);
                    b.m_localPoint.SetV(d);
                    for (d = f = 0; d < e.b2_maxManifoldPoints; ++d) n = r[d], u.x * n.v.x + u.y * n.v.y - c <= l && (j = b.m_points[f], m = g.R, t = n.v.x - g.position.x, F = n.v.y -
                        g.position.y, j.m_localPoint.x = t * m.col1.x + F * m.col1.y, j.m_localPoint.y = t * m.col2.x + F * m.col2.y, j.m_id.Set(n.id), j.m_id.features.flip = y, ++f);
                    b.m_pointCount = f
                }
            }
        }
    };
    B.CollideCircles = function(b, c, g, d, e) {
        b.m_pointCount = 0;
        var f, l;
        f = g.R;
        l = c.m_p;
        var n = g.position.x + (f.col1.x * l.x + f.col2.x * l.y);
        g = g.position.y + (f.col1.y * l.x + f.col2.y * l.y);
        f = e.R;
        l = d.m_p;
        n = e.position.x + (f.col1.x * l.x + f.col2.x * l.y) - n;
        e = e.position.y + (f.col1.y * l.x + f.col2.y * l.y) - g;
        f = c.m_radius + d.m_radius;
        n * n + e * e > f * f || (b.m_type = C.e_circles, b.m_localPoint.SetV(c.m_p),
            b.m_localPlaneNormal.SetZero(), b.m_pointCount = 1, b.m_points[0].m_localPoint.SetV(d.m_p), b.m_points[0].m_id.key = 0)
    };
    B.CollidePolygonAndCircle = function(b, c, g, d, e) {
        var f = b.m_pointCount = 0,
            l = 0,
            n, r;
        r = e.R;
        n = d.m_p;
        var m = e.position.y + (r.col1.y * n.x + r.col2.y * n.y),
            f = e.position.x + (r.col1.x * n.x + r.col2.x * n.y) - g.position.x,
            l = m - g.position.y;
        r = g.R;
        g = f * r.col1.x + l * r.col1.y;
        r = f * r.col2.x + l * r.col2.y;
        var j = 0,
            m = -Number.MAX_VALUE;
        e = c.m_radius + d.m_radius;
        var u = parseInt(c.m_vertexCount),
            y = c.m_vertices;
        c = c.m_normals;
        for (var K =
            0; K < u; ++K) {
            n = y[K];
            f = g - n.x;
            l = r - n.y;
            n = c[K];
            f = n.x * f + n.y * l;
            if (f > e) return;
            f > m && (m = f, j = K)
        }
        f = parseInt(j);
        l = parseInt(f + 1 < u ? f + 1 : 0);
        n = y[f];
        y = y[l];
        if (m < Number.MIN_VALUE) b.m_pointCount = 1, b.m_type = C.e_faceA, b.m_localPlaneNormal.SetV(c[j]), b.m_localPoint.x = 0.5 * (n.x + y.x), b.m_localPoint.y = 0.5 * (n.y + y.y);
        else if (m = (g - y.x) * (n.x - y.x) + (r - y.y) * (n.y - y.y), 0 >= (g - n.x) * (y.x - n.x) + (r - n.y) * (y.y - n.y)) {
            if ((g - n.x) * (g - n.x) + (r - n.y) * (r - n.y) > e * e) return;
            b.m_pointCount = 1;
            b.m_type = C.e_faceA;
            b.m_localPlaneNormal.x = g - n.x;
            b.m_localPlaneNormal.y =
                r - n.y;
            b.m_localPlaneNormal.Normalize();
            b.m_localPoint.SetV(n)
        } else if (0 >= m) {
            if ((g - y.x) * (g - y.x) + (r - y.y) * (r - y.y) > e * e) return;
            b.m_pointCount = 1;
            b.m_type = C.e_faceA;
            b.m_localPlaneNormal.x = g - y.x;
            b.m_localPlaneNormal.y = r - y.y;
            b.m_localPlaneNormal.Normalize();
            b.m_localPoint.SetV(y)
        } else {
            j = 0.5 * (n.x + y.x);
            n = 0.5 * (n.y + y.y);
            m = (g - j) * c[f].x + (r - n) * c[f].y;
            if (m > e) return;
            b.m_pointCount = 1;
            b.m_type = C.e_faceA;
            b.m_localPlaneNormal.x = c[f].x;
            b.m_localPlaneNormal.y = c[f].y;
            b.m_localPlaneNormal.Normalize();
            b.m_localPoint.Set(j,
                n)
        }
        b.m_points[0].m_localPoint.SetV(d.m_p);
        b.m_points[0].m_id.key = 0
    };
    B.TestOverlap = function(b, c) {
        var g = c.lowerBound,
            d = b.upperBound,
            e = g.x - d.x,
            f = g.y - d.y,
            g = b.lowerBound,
            d = c.upperBound,
            n = g.y - d.y;
        return 0 < e || 0 < f || 0 < g.x - d.x || 0 < n ? !1 : !0
    };
    Box2D.postDefs.push(function() {
        Box2D.Collision.b2Collision.s_incidentEdge = B.MakeClipPointVector();
        Box2D.Collision.b2Collision.s_clipPoints1 = B.MakeClipPointVector();
        Box2D.Collision.b2Collision.s_clipPoints2 = B.MakeClipPointVector();
        Box2D.Collision.b2Collision.s_edgeAO = new Vector_a2j_Number(1);
        Box2D.Collision.b2Collision.s_edgeBO = new Vector_a2j_Number(1);
        Box2D.Collision.b2Collision.s_localTangent = new m;
        Box2D.Collision.b2Collision.s_localNormal = new m;
        Box2D.Collision.b2Collision.s_planePoint = new m;
        Box2D.Collision.b2Collision.s_normal = new m;
        Box2D.Collision.b2Collision.s_tangent = new m;
        Box2D.Collision.b2Collision.s_tangent2 = new m;
        Box2D.Collision.b2Collision.s_v11 = new m;
        Box2D.Collision.b2Collision.s_v12 = new m;
        Box2D.Collision.b2Collision.b2CollidePolyTempVec = new m;
        Box2D.Collision.b2Collision.b2_nullFeature =
            255
    });
    z.b2ContactID = function() {
        this.features = new r
    };
    z.prototype.b2ContactID = function() {
        this.features._m_id = this
    };
    z.prototype.Set = function(b) {
        this.key = b._key
    };
    z.prototype.Copy = function() {
        var b = new z;
        b.key = this.key;
        return b
    };
    Object.defineProperty(z.prototype, "key", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return this._key
        }
    });
    Object.defineProperty(z.prototype, "key", {
        enumerable: !1,
        configurable: !0,
        set: function(b) {
            void 0 === b && (b = 0);
            this._key = b;
            this.features._referenceEdge = this._key & 255;
            this.features._incidentEdge =
                (this._key & 65280) >> 8 & 255;
            this.features._incidentVertex = (this._key & 16711680) >> 16 & 255;
            this.features._flip = (this._key & 4278190080) >> 24 & 255
        }
    });
    x.b2ContactPoint = function() {
        this.position = new m;
        this.velocity = new m;
        this.normal = new m;
        this.id = new z
    };
    I.b2Distance = function() {};
    I.Distance = function(b, c, g) {
        ++I.b2_gjkCalls;
        var d = g.proxyA,
            n = g.proxyB,
            r = g.transformA,
            l = g.transformB,
            j = I.s_simplex;
        j.ReadCache(c, d, r, n, l);
        var u = j.m_vertices,
            y = I.s_saveA,
            K = I.s_saveB,
            t = 0;
        j.GetClosestPoint().LengthSquared();
        for (var F = 0, G, W = 0; 20 >
            W;) {
            t = j.m_count;
            for (F = 0; F < t; F++) y[F] = u[F].indexA, K[F] = u[F].indexB;
            switch (j.m_count) {
                case 1:
                    break;
                case 2:
                    j.Solve2();
                    break;
                case 3:
                    j.Solve3();
                    break;
                default:
                    e.b2Assert(!1)
            }
            if (3 == j.m_count) break;
            G = j.GetClosestPoint();
            G.LengthSquared();
            F = j.GetSearchDirection();
            if (F.LengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE) break;
            G = u[j.m_count];
            G.indexA = d.GetSupport(f.MulTMV(r.R, F.GetNegative()));
            G.wA = f.MulX(r, d.GetVertex(G.indexA));
            G.indexB = n.GetSupport(f.MulTMV(l.R, F));
            G.wB = f.MulX(l, n.GetVertex(G.indexB));
            G.w =
                f.SubtractVV(G.wB, G.wA);
            ++W;
            ++I.b2_gjkIters;
            for (var J = !1, F = 0; F < t; F++)
                if (G.indexA == y[F] && G.indexB == K[F]) {
                    J = !0;
                    break
                }
            if (J) break;
            ++j.m_count
        }
        I.b2_gjkMaxIters = f.Max(I.b2_gjkMaxIters, W);
        j.GetWitnessPoints(b.pointA, b.pointB);
        b.distance = f.SubtractVV(b.pointA, b.pointB).Length();
        b.iterations = W;
        j.WriteCache(c);
        g.useRadii && (c = d.m_radius, n = n.m_radius, b.distance > c + n && b.distance > Number.MIN_VALUE ? (b.distance -= c + n, g = f.SubtractVV(b.pointB, b.pointA), g.Normalize(), b.pointA.x += c * g.x, b.pointA.y += c * g.y, b.pointB.x -= n * g.x,
            b.pointB.y -= n * g.y) : (G = new m, G.x = 0.5 * (b.pointA.x + b.pointB.x), G.y = 0.5 * (b.pointA.y + b.pointB.y), b.pointA.x = b.pointB.x = G.x, b.pointA.y = b.pointB.y = G.y, b.distance = 0))
    };
    Box2D.postDefs.push(function() {
        Box2D.Collision.b2Distance.s_simplex = new y;
        Box2D.Collision.b2Distance.s_saveA = new Vector_a2j_Number(3);
        Box2D.Collision.b2Distance.s_saveB = new Vector_a2j_Number(3)
    });
    E.b2DistanceInput = function() {};
    t.b2DistanceOutput = function() {
        this.pointA = new m;
        this.pointB = new m
    };
    H.b2DistanceProxy = function() {};
    H.prototype.Set =
        function(g) {
            switch (g.GetType()) {
                case d.e_circleShape:
                    g = g instanceof b ? g : null;
                    this.m_vertices = new Vector(1, !0);
                    this.m_vertices[0] = g.m_p;
                    this.m_count = 1;
                    this.m_radius = g.m_radius;
                    break;
                case d.e_polygonShape:
                    g = g instanceof c ? g : null;
                    this.m_vertices = g.m_vertices;
                    this.m_count = g.m_vertexCount;
                    this.m_radius = g.m_radius;
                    break;
                default:
                    e.b2Assert(!1)
            }
        };
    H.prototype.GetSupport = function(b) {
        for (var c = 0, g = this.m_vertices[0].x * b.x + this.m_vertices[0].y * b.y, d = 1; d < this.m_count; ++d) {
            var e = this.m_vertices[d].x * b.x + this.m_vertices[d].y *
                b.y;
            e > g && (c = d, g = e)
        }
        return c
    };
    H.prototype.GetSupportVertex = function(b) {
        for (var c = 0, g = this.m_vertices[0].x * b.x + this.m_vertices[0].y * b.y, d = 1; d < this.m_count; ++d) {
            var e = this.m_vertices[d].x * b.x + this.m_vertices[d].y * b.y;
            e > g && (c = d, g = e)
        }
        return this.m_vertices[c]
    };
    H.prototype.GetVertexCount = function() {
        return this.m_count
    };
    H.prototype.GetVertex = function(b) {
        void 0 === b && (b = 0);
        e.b2Assert(0 <= b && b < this.m_count);
        return this.m_vertices[b]
    };
    L.b2DynamicTree = function() {};
    L.prototype.b2DynamicTree = function() {
        this.m_freeList =
            this.m_root = null;
        this.m_insertionCount = this.m_path = 0
    };
    L.prototype.CreateProxy = function(b, c) {
        var g = this.AllocateNode(),
            d = e.b2_aabbExtension,
            n = e.b2_aabbExtension;
        g.aabb.lowerBound.x = b.lowerBound.x - d;
        g.aabb.lowerBound.y = b.lowerBound.y - n;
        g.aabb.upperBound.x = b.upperBound.x + d;
        g.aabb.upperBound.y = b.upperBound.y + n;
        g.userData = c;
        this.InsertLeaf(g);
        return g
    };
    L.prototype.DestroyProxy = function(b) {
        this.RemoveLeaf(b);
        this.FreeNode(b)
    };
    L.prototype.MoveProxy = function(b, c, g) {
        e.b2Assert(b.IsLeaf());
        if (b.aabb.Contains(c)) return !1;
        this.RemoveLeaf(b);
        var d = e.b2_aabbExtension + e.b2_aabbMultiplier * (0 < g.x ? g.x : -g.x);
        g = e.b2_aabbExtension + e.b2_aabbMultiplier * (0 < g.y ? g.y : -g.y);
        b.aabb.lowerBound.x = c.lowerBound.x - d;
        b.aabb.lowerBound.y = c.lowerBound.y - g;
        b.aabb.upperBound.x = c.upperBound.x + d;
        b.aabb.upperBound.y = c.upperBound.y + g;
        this.InsertLeaf(b);
        return !0
    };
    L.prototype.Rebalance = function(b) {
        void 0 === b && (b = 0);
        if (null != this.m_root)
            for (var c = 0; c < b; c++) {
                for (var g = this.m_root, d = 0; !1 == g.IsLeaf();) g = this.m_path >> d & 1 ? g.child2 : g.child1, d = d + 1 & 31;
                ++this.m_path;
                this.RemoveLeaf(g);
                this.InsertLeaf(g)
            }
    };
    L.prototype.GetFatAABB = function(b) {
        return b.aabb
    };
    L.prototype.GetUserData = function(b) {
        return b.userData
    };
    L.prototype.Query = function(b, c) {
        if (null != this.m_root) {
            var g = new Vector,
                d = 0;
            for (g[d++] = this.m_root; 0 < d;) {
                var e = g[--d];
                if (e.aabb.TestOverlap(c))
                    if (e.IsLeaf()) {
                        if (!b(e)) break
                    } else g[d++] = e.child1, g[d++] = e.child2
            }
        }
    };
    L.prototype.RayCast = function(b, c) {
        if (null != this.m_root) {
            var g = c.p1,
                d = c.p2,
                e = f.SubtractVV(g, d);
            e.Normalize();
            var e = f.CrossFV(1, e),
                n = f.AbsV(e),
                l = c.maxFraction,
                r = new s,
                m = 0,
                j = 0,
                m = g.x + l * (d.x - g.x),
                j = g.y + l * (d.y - g.y);
            r.lowerBound.x = Math.min(g.x, m);
            r.lowerBound.y = Math.min(g.y, j);
            r.upperBound.x = Math.max(g.x, m);
            r.upperBound.y = Math.max(g.y, j);
            var u = new Vector,
                y = 0;
            for (u[y++] = this.m_root; 0 < y;)
                if (l = u[--y], !1 != l.aabb.TestOverlap(r) && (m = l.aabb.GetCenter(), j = l.aabb.GetExtents(), !(0 < Math.abs(e.x * (g.x - m.x) + e.y * (g.y - m.y)) - n.x * j.x - n.y * j.y)))
                    if (l.IsLeaf()) {
                        m = new O;
                        m.p1 = c.p1;
                        m.p2 = c.p2;
                        m.maxFraction = c.maxFraction;
                        l = b(m, l);
                        if (0 == l) break;
                        0 < l && (m = g.x + l * (d.x - g.x), j = g.y + l * (d.y - g.y),
                            r.lowerBound.x = Math.min(g.x, m), r.lowerBound.y = Math.min(g.y, j), r.upperBound.x = Math.max(g.x, m), r.upperBound.y = Math.max(g.y, j))
                    } else u[y++] = l.child1, u[y++] = l.child2
        }
    };
    L.prototype.AllocateNode = function() {
        if (this.m_freeList) {
            var b = this.m_freeList;
            this.m_freeList = b.parent;
            b.parent = null;
            b.child1 = null;
            b.child2 = null;
            return b
        }
        return new M
    };
    L.prototype.FreeNode = function(b) {
        b.parent = this.m_freeList;
        this.m_freeList = b
    };
    L.prototype.InsertLeaf = function(b) {
        ++this.m_insertionCount;
        if (null == this.m_root) this.m_root =
            b, this.m_root.parent = null;
        else {
            var c = b.aabb.GetCenter(),
                g = this.m_root;
            if (!1 == g.IsLeaf()) {
                do var d = g.child1,
                    g = g.child2,
                    g = Math.abs((d.aabb.lowerBound.x + d.aabb.upperBound.x) / 2 - c.x) + Math.abs((d.aabb.lowerBound.y + d.aabb.upperBound.y) / 2 - c.y) < Math.abs((g.aabb.lowerBound.x + g.aabb.upperBound.x) / 2 - c.x) + Math.abs((g.aabb.lowerBound.y + g.aabb.upperBound.y) / 2 - c.y) ? d : g; while (!1 == g.IsLeaf())
            }
            c = g.parent;
            d = this.AllocateNode();
            d.parent = c;
            d.userData = null;
            d.aabb.Combine(b.aabb, g.aabb);
            if (c) {
                g.parent.child1 == g ? c.child1 =
                    d : c.child2 = d;
                d.child1 = g;
                d.child2 = b;
                g.parent = d;
                b.parent = d;
                do {
                    if (c.aabb.Contains(d.aabb)) break;
                    c.aabb.Combine(c.child1.aabb, c.child2.aabb);
                    d = c;
                    c = c.parent
                } while (c)
            } else d.child1 = g, d.child2 = b, g.parent = d, this.m_root = b.parent = d
        }
    };
    L.prototype.RemoveLeaf = function(b) {
        if (b == this.m_root) this.m_root = null;
        else {
            var c = b.parent,
                g = c.parent;
            b = c.child1 == b ? c.child2 : c.child1;
            if (g) {
                g.child1 == c ? g.child1 = b : g.child2 = b;
                b.parent = g;
                for (this.FreeNode(c); g;) {
                    c = g.aabb;
                    g.aabb = s.Combine(g.child1.aabb, g.child2.aabb);
                    if (c.Contains(g.aabb)) break;
                    g = g.parent
                }
            } else this.m_root = b, b.parent = null, this.FreeNode(c)
        }
    };
    Q.b2DynamicTreeBroadPhase = function() {
        this.m_tree = new L;
        this.m_moveBuffer = new Vector;
        this.m_pairBuffer = new Vector;
        this.m_pairCount = 0
    };
    Q.prototype.CreateProxy = function(b, c) {
        var g = this.m_tree.CreateProxy(b, c);
        ++this.m_proxyCount;
        this.BufferMove(g);
        return g
    };
    Q.prototype.DestroyProxy = function(b) {
        this.UnBufferMove(b);
        --this.m_proxyCount;
        this.m_tree.DestroyProxy(b)
    };
    Q.prototype.MoveProxy = function(b, c, g) {
        this.m_tree.MoveProxy(b, c, g) && this.BufferMove(b)
    };
    Q.prototype.TestOverlap = function(b, c) {
        var g = this.m_tree.GetFatAABB(b),
            d = this.m_tree.GetFatAABB(c);
        return g.TestOverlap(d)
    };
    Q.prototype.GetUserData = function(b) {
        return this.m_tree.GetUserData(b)
    };
    Q.prototype.GetFatAABB = function(b) {
        return this.m_tree.GetFatAABB(b)
    };
    Q.prototype.GetProxyCount = function() {
        return this.m_proxyCount
    };
    Q.prototype.UpdatePairs = function(b) {
        for (var c = this, g = c.m_pairCount = 0, d, g = 0; g < c.m_moveBuffer.length; ++g) {
            d = c.m_moveBuffer[g];
            var e = c.m_tree.GetFatAABB(d);
            c.m_tree.Query(function(b) {
                if (b ==
                    d) return !0;
                c.m_pairCount == c.m_pairBuffer.length && (c.m_pairBuffer[c.m_pairCount] = new P);
                var g = c.m_pairBuffer[c.m_pairCount];
                g.proxyA = b < d ? b : d;
                g.proxyB = b >= d ? b : d;
                ++c.m_pairCount;
                return !0
            }, e)
        }
        for (g = c.m_moveBuffer.length = 0; g < c.m_pairCount;) {
            var e = c.m_pairBuffer[g],
                n = c.m_tree.GetUserData(e.proxyA),
                f = c.m_tree.GetUserData(e.proxyB);
            b(n, f);
            for (++g; g < c.m_pairCount;) {
                n = c.m_pairBuffer[g];
                if (n.proxyA != e.proxyA || n.proxyB != e.proxyB) break;
                ++g
            }
        }
    };
    Q.prototype.Query = function(b, c) {
        this.m_tree.Query(b, c)
    };
    Q.prototype.RayCast =
        function(b, c) {
            this.m_tree.RayCast(b, c)
        };
    Q.prototype.Validate = function() {};
    Q.prototype.Rebalance = function(b) {
        void 0 === b && (b = 0);
        this.m_tree.Rebalance(b)
    };
    Q.prototype.BufferMove = function(b) {
        this.m_moveBuffer[this.m_moveBuffer.length] = b
    };
    Q.prototype.UnBufferMove = function(b) {
        this.m_moveBuffer.splice(parseInt(this.m_moveBuffer.indexOf(b)), 1)
    };
    Q.prototype.ComparePairs = function() {
        return 0
    };
    Q.__implements = {};
    Q.__implements[K] = !0;
    M.b2DynamicTreeNode = function() {
        this.aabb = new s
    };
    M.prototype.IsLeaf = function() {
        return null ==
            this.child1
    };
    P.b2DynamicTreePair = function() {};
    C.b2Manifold = function() {
        this.m_pointCount = 0
    };
    C.prototype.b2Manifold = function() {
        this.m_points = new Vector(e.b2_maxManifoldPoints);
        for (var b = 0; b < e.b2_maxManifoldPoints; b++) this.m_points[b] = new S;
        this.m_localPlaneNormal = new m;
        this.m_localPoint = new m
    };
    C.prototype.Reset = function() {
        for (var b = 0; b < e.b2_maxManifoldPoints; b++)(this.m_points[b] instanceof S ? this.m_points[b] : null).Reset();
        this.m_localPlaneNormal.SetZero();
        this.m_localPoint.SetZero();
        this.m_pointCount =
            this.m_type = 0
    };
    C.prototype.Set = function(b) {
        this.m_pointCount = b.m_pointCount;
        for (var c = 0; c < e.b2_maxManifoldPoints; c++)(this.m_points[c] instanceof S ? this.m_points[c] : null).Set(b.m_points[c]);
        this.m_localPlaneNormal.SetV(b.m_localPlaneNormal);
        this.m_localPoint.SetV(b.m_localPoint);
        this.m_type = b.m_type
    };
    C.prototype.Copy = function() {
        var b = new C;
        b.Set(this);
        return b
    };
    Box2D.postDefs.push(function() {
        Box2D.Collision.b2Manifold.e_circles = 1;
        Box2D.Collision.b2Manifold.e_faceA = 2;
        Box2D.Collision.b2Manifold.e_faceB =
            4
    });
    S.b2ManifoldPoint = function() {
        this.m_localPoint = new m;
        this.m_id = new z
    };
    S.prototype.b2ManifoldPoint = function() {
        this.Reset()
    };
    S.prototype.Reset = function() {
        this.m_localPoint.SetZero();
        this.m_tangentImpulse = this.m_normalImpulse = 0;
        this.m_id.key = 0
    };
    S.prototype.Set = function(b) {
        this.m_localPoint.SetV(b.m_localPoint);
        this.m_normalImpulse = b.m_normalImpulse;
        this.m_tangentImpulse = b.m_tangentImpulse;
        this.m_id.Set(b.m_id)
    };
    N.b2Point = function() {
        this.p = new m
    };
    N.prototype.Support = function() {
        return this.p
    };
    N.prototype.GetFirstVertex =
        function() {
            return this.p
        };
    O.b2RayCastInput = function() {
        this.p1 = new m;
        this.p2 = new m
    };
    O.prototype.b2RayCastInput = function(b, c, g) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        void 0 === g && (g = 1);
        b && this.p1.SetV(b);
        c && this.p2.SetV(c);
        this.maxFraction = g
    };
    Z.b2RayCastOutput = function() {
        this.normal = new m
    };
    T.b2Segment = function() {
        this.p1 = new m;
        this.p2 = new m
    };
    T.prototype.TestSegment = function(b, c, g, d) {
        void 0 === d && (d = 0);
        var e = g.p1,
            n = g.p2.x - e.x,
            f = g.p2.y - e.y;
        g = this.p2.y - this.p1.y;
        var r = -(this.p2.x - this.p1.x),
            m = 100 * Number.MIN_VALUE,
            j = -(n * g + f * r);
        if (j > m) {
            var u = e.x - this.p1.x,
                y = e.y - this.p1.y,
                e = u * g + y * r;
            if (0 <= e && e <= d * j && (d = -n * y + f * u, -m * j <= d && d <= j * (1 + m))) return e /= j, d = Math.sqrt(g * g + r * r), b[0] = e, c.Set(g / d, r / d), !0
        }
        return !1
    };
    T.prototype.Extend = function(b) {
        this.ExtendForward(b);
        this.ExtendBackward(b)
    };
    T.prototype.ExtendForward = function(b) {
        var c = this.p2.x - this.p1.x,
            g = this.p2.y - this.p1.y;
        b = Math.min(0 < c ? (b.upperBound.x - this.p1.x) / c : 0 > c ? (b.lowerBound.x - this.p1.x) / c : Number.POSITIVE_INFINITY, 0 < g ? (b.upperBound.y - this.p1.y) / g : 0 > g ? (b.lowerBound.y -
            this.p1.y) / g : Number.POSITIVE_INFINITY);
        this.p2.x = this.p1.x + c * b;
        this.p2.y = this.p1.y + g * b
    };
    T.prototype.ExtendBackward = function(b) {
        var c = -this.p2.x + this.p1.x,
            g = -this.p2.y + this.p1.y;
        b = Math.min(0 < c ? (b.upperBound.x - this.p2.x) / c : 0 > c ? (b.lowerBound.x - this.p2.x) / c : Number.POSITIVE_INFINITY, 0 < g ? (b.upperBound.y - this.p2.y) / g : 0 > g ? (b.lowerBound.y - this.p2.y) / g : Number.POSITIVE_INFINITY);
        this.p1.x = this.p2.x + c * b;
        this.p1.y = this.p2.y + g * b
    };
    n.b2SeparationFunction = function() {
        this.m_localPoint = new m;
        this.m_axis = new m
    };
    n.prototype.Initialize =
        function(b, c, g, d, r) {
            this.m_proxyA = c;
            this.m_proxyB = d;
            var j = parseInt(b.count);
            e.b2Assert(0 < j && 3 > j);
            var l, u, y, K, t = 0,
                F = 0;
            1 == j ? (this.m_type = n.e_points, l = this.m_proxyA.GetVertex(b.indexA[0]), u = this.m_proxyB.GetVertex(b.indexB[0]), j = l, b = g.R, c = g.position.x + (b.col1.x * j.x + b.col2.x * j.y), d = g.position.y + (b.col1.y * j.x + b.col2.y * j.y), j = u, b = r.R, y = r.position.x + (b.col1.x * j.x + b.col2.x * j.y), K = r.position.y + (b.col1.y * j.x + b.col2.y * j.y), this.m_axis.x = y - c, this.m_axis.y = K - d, this.m_axis.Normalize()) : (b.indexB[0] == b.indexB[1] ?
                (this.m_type = n.e_faceA, c = this.m_proxyA.GetVertex(b.indexA[0]), d = this.m_proxyA.GetVertex(b.indexA[1]), u = this.m_proxyB.GetVertex(b.indexB[0]), this.m_localPoint.x = 0.5 * (c.x + d.x), this.m_localPoint.y = 0.5 * (c.y + d.y), this.m_axis = f.CrossVF(f.SubtractVV(d, c), 1), this.m_axis.Normalize(), j = this.m_axis, b = g.R, t = b.col1.x * j.x + b.col2.x * j.y, F = b.col1.y * j.x + b.col2.y * j.y, j = this.m_localPoint, b = g.R, c = g.position.x + (b.col1.x * j.x + b.col2.x * j.y), d = g.position.y + (b.col1.y * j.x + b.col2.y * j.y), j = u, b = r.R, y = r.position.x + (b.col1.x * j.x +
                    b.col2.x * j.y), K = r.position.y + (b.col1.y * j.x + b.col2.y * j.y), t = (y - c) * t + (K - d) * F) : b.indexA[0] == b.indexA[0] ? (this.m_type = n.e_faceB, y = this.m_proxyB.GetVertex(b.indexB[0]), K = this.m_proxyB.GetVertex(b.indexB[1]), l = this.m_proxyA.GetVertex(b.indexA[0]), this.m_localPoint.x = 0.5 * (y.x + K.x), this.m_localPoint.y = 0.5 * (y.y + K.y), this.m_axis = f.CrossVF(f.SubtractVV(K, y), 1), this.m_axis.Normalize(), j = this.m_axis, b = r.R, t = b.col1.x * j.x + b.col2.x * j.y, F = b.col1.y * j.x + b.col2.y * j.y, j = this.m_localPoint, b = r.R, y = r.position.x + (b.col1.x *
                    j.x + b.col2.x * j.y), K = r.position.y + (b.col1.y * j.x + b.col2.y * j.y), j = l, b = g.R, c = g.position.x + (b.col1.x * j.x + b.col2.x * j.y), d = g.position.y + (b.col1.y * j.x + b.col2.y * j.y), t = (c - y) * t + (d - K) * F) : (c = this.m_proxyA.GetVertex(b.indexA[0]), d = this.m_proxyA.GetVertex(b.indexA[1]), y = this.m_proxyB.GetVertex(b.indexB[0]), K = this.m_proxyB.GetVertex(b.indexB[1]), f.MulX(g, l), l = f.MulMV(g.R, f.SubtractVV(d, c)), f.MulX(r, u), t = f.MulMV(r.R, f.SubtractVV(K, y)), r = l.x * l.x + l.y * l.y, u = t.x * t.x + t.y * t.y, b = f.SubtractVV(t, l), g = l.x * b.x + l.y * b.y, b = t.x *
                    b.x + t.y * b.y, l = l.x * t.x + l.y * t.y, F = r * u - l * l, t = 0, 0 != F && (t = f.Clamp((l * b - g * u) / F, 0, 1)), 0 > (l * t + b) / u && (t = f.Clamp((l - g) / r, 0, 1)), l = new m, l.x = c.x + t * (d.x - c.x), l.y = c.y + t * (d.y - c.y), u = new m, u.x = y.x + t * (K.x - y.x), u.y = y.y + t * (K.y - y.y), 0 == t || 1 == t ? (this.m_type = n.e_faceB, this.m_axis = f.CrossVF(f.SubtractVV(K, y), 1), this.m_axis.Normalize(), this.m_localPoint = u) : (this.m_type = n.e_faceA, this.m_axis = f.CrossVF(f.SubtractVV(d, c), 1), this.m_localPoint = l)), 0 > t && this.m_axis.NegativeSelf())
        };
    n.prototype.Evaluate = function(b, c) {
        var g, d, r =
            0;
        switch (this.m_type) {
            case n.e_points:
                return g = f.MulTMV(b.R, this.m_axis), d = f.MulTMV(c.R, this.m_axis.GetNegative()), g = this.m_proxyA.GetSupportVertex(g), d = this.m_proxyB.GetSupportVertex(d), g = f.MulX(b, g), d = f.MulX(c, d), (d.x - g.x) * this.m_axis.x + (d.y - g.y) * this.m_axis.y;
            case n.e_faceA:
                return r = f.MulMV(b.R, this.m_axis), g = f.MulX(b, this.m_localPoint), d = f.MulTMV(c.R, r.GetNegative()), d = this.m_proxyB.GetSupportVertex(d), d = f.MulX(c, d), (d.x - g.x) * r.x + (d.y - g.y) * r.y;
            case n.e_faceB:
                return r = f.MulMV(c.R, this.m_axis),
                    d = f.MulX(c, this.m_localPoint), g = f.MulTMV(b.R, r.GetNegative()), g = this.m_proxyA.GetSupportVertex(g), g = f.MulX(b, g), (g.x - d.x) * r.x + (g.y - d.y) * r.y;
            default:
                return e.b2Assert(!1), 0
        }
    };
    Box2D.postDefs.push(function() {
        Box2D.Collision.b2SeparationFunction.e_points = 1;
        Box2D.Collision.b2SeparationFunction.e_faceA = 2;
        Box2D.Collision.b2SeparationFunction.e_faceB = 4
    });
    y.b2Simplex = function() {
        this.m_v1 = new u;
        this.m_v2 = new u;
        this.m_v3 = new u;
        this.m_vertices = new Vector(3)
    };
    y.prototype.b2Simplex = function() {
        this.m_vertices[0] =
            this.m_v1;
        this.m_vertices[1] = this.m_v2;
        this.m_vertices[2] = this.m_v3
    };
    y.prototype.ReadCache = function(b, c, g, d, n) {
        e.b2Assert(0 <= b.count && 3 >= b.count);
        var r, l;
        this.m_count = b.count;
        for (var j = this.m_vertices, m = 0; m < this.m_count; m++) {
            var u = j[m];
            u.indexA = b.indexA[m];
            u.indexB = b.indexB[m];
            r = c.GetVertex(u.indexA);
            l = d.GetVertex(u.indexB);
            u.wA = f.MulX(g, r);
            u.wB = f.MulX(n, l);
            u.w = f.SubtractVV(u.wB, u.wA);
            u.a = 0
        }
        if (1 < this.m_count && (b = b.metric, r = this.GetMetric(), r < 0.5 * b || 2 * b < r || r < Number.MIN_VALUE)) this.m_count = 0;
        0 == this.m_count &&
            (u = j[0], u.indexA = 0, u.indexB = 0, r = c.GetVertex(0), l = d.GetVertex(0), u.wA = f.MulX(g, r), u.wB = f.MulX(n, l), u.w = f.SubtractVV(u.wB, u.wA), this.m_count = 1)
    };
    y.prototype.WriteCache = function(b) {
        b.metric = this.GetMetric();
        b.count = Box2D.parseUInt(this.m_count);
        for (var c = this.m_vertices, g = 0; g < this.m_count; g++) b.indexA[g] = Box2D.parseUInt(c[g].indexA), b.indexB[g] = Box2D.parseUInt(c[g].indexB)
    };
    y.prototype.GetSearchDirection = function() {
        switch (this.m_count) {
            case 1:
                return this.m_v1.w.GetNegative();
            case 2:
                var b = f.SubtractVV(this.m_v2.w,
                    this.m_v1.w);
                return 0 < f.CrossVV(b, this.m_v1.w.GetNegative()) ? f.CrossFV(1, b) : f.CrossVF(b, 1);
            default:
                return e.b2Assert(!1), new m
        }
    };
    y.prototype.GetClosestPoint = function() {
        switch (this.m_count) {
            case 0:
                return e.b2Assert(!1), new m;
            case 1:
                return this.m_v1.w;
            case 2:
                return new m(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
            default:
                return e.b2Assert(!1), new m
        }
    };
    y.prototype.GetWitnessPoints = function(b, c) {
        switch (this.m_count) {
            case 0:
                e.b2Assert(!1);
                break;
            case 1:
                b.SetV(this.m_v1.wA);
                c.SetV(this.m_v1.wB);
                break;
            case 2:
                b.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
                b.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
                c.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
                c.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
                break;
            case 3:
                c.x = b.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
                c.y = b.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
                break;
            default:
                e.b2Assert(!1)
        }
    };
    y.prototype.GetMetric = function() {
        switch (this.m_count) {
            case 0:
                return e.b2Assert(!1), 0;
            case 1:
                return 0;
            case 2:
                return f.SubtractVV(this.m_v1.w, this.m_v2.w).Length();
            case 3:
                return f.CrossVV(f.SubtractVV(this.m_v2.w, this.m_v1.w), f.SubtractVV(this.m_v3.w, this.m_v1.w));
            default:
                return e.b2Assert(!1), 0
        }
    };
    y.prototype.Solve2 = function() {
        var b = this.m_v1.w,
            c = this.m_v2.w,
            g = f.SubtractVV(c, b),
            b = -(b.x * g.x + b.y * g.y);
        0 >= b ? this.m_count = this.m_v1.a = 1 : (c = c.x * g.x + c.y * g.y, 0 >= c ? (this.m_count = this.m_v2.a = 1, this.m_v1.Set(this.m_v2)) :
            (g = 1 / (c + b), this.m_v1.a = c * g, this.m_v2.a = b * g, this.m_count = 2))
    };
    y.prototype.Solve3 = function() {
        var b = this.m_v1.w,
            c = this.m_v2.w,
            g = this.m_v3.w,
            d = f.SubtractVV(c, b),
            e = f.Dot(b, d),
            n = f.Dot(c, d),
            e = -e,
            l = f.SubtractVV(g, b),
            r = f.Dot(b, l),
            j = f.Dot(g, l),
            r = -r,
            m = f.SubtractVV(g, c),
            u = f.Dot(c, m),
            m = f.Dot(g, m),
            u = -u,
            l = f.CrossVV(d, l),
            d = l * f.CrossVV(c, g),
            g = l * f.CrossVV(g, b),
            b = l * f.CrossVV(b, c);
        0 >= e && 0 >= r ? this.m_count = this.m_v1.a = 1 : 0 < n && 0 < e && 0 >= b ? (j = 1 / (n + e), this.m_v1.a = n * j, this.m_v2.a = e * j, this.m_count = 2) : 0 < j && 0 < r && 0 >= g ? (n = 1 / (j + r),
            this.m_v1.a = j * n, this.m_v3.a = r * n, this.m_count = 2, this.m_v2.Set(this.m_v3)) : 0 >= n && 0 >= u ? (this.m_count = this.m_v2.a = 1, this.m_v1.Set(this.m_v2)) : 0 >= j && 0 >= m ? (this.m_count = this.m_v3.a = 1, this.m_v1.Set(this.m_v3)) : 0 < m && 0 < u && 0 >= d ? (n = 1 / (m + u), this.m_v2.a = m * n, this.m_v3.a = u * n, this.m_count = 2, this.m_v1.Set(this.m_v3)) : (n = 1 / (d + g + b), this.m_v1.a = d * n, this.m_v2.a = g * n, this.m_v3.a = b * n, this.m_count = 3)
    };
    F.b2SimplexCache = function() {
        this.indexA = new Vector_a2j_Number(3);
        this.indexB = new Vector_a2j_Number(3)
    };
    u.b2SimplexVertex =
        function() {};
    u.prototype.Set = function(b) {
        this.wA.SetV(b.wA);
        this.wB.SetV(b.wB);
        this.w.SetV(b.w);
        this.a = b.a;
        this.indexA = b.indexA;
        this.indexB = b.indexB
    };
    G.b2TimeOfImpact = function() {};
    G.TimeOfImpact = function(b) {
        ++G.b2_toiCalls;
        var c = b.proxyA,
            g = b.proxyB,
            d = b.sweepA,
            n = b.sweepB;
        e.b2Assert(d.t0 == n.t0);
        e.b2Assert(1 - d.t0 > Number.MIN_VALUE);
        var r = c.m_radius + g.m_radius;
        b = b.tolerance;
        var l = 0,
            j = 0,
            m = 0;
        G.s_cache.count = 0;
        for (G.s_distanceInput.useRadii = !1;;) {
            d.GetTransform(G.s_xfA, l);
            n.GetTransform(G.s_xfB, l);
            G.s_distanceInput.proxyA =
                c;
            G.s_distanceInput.proxyB = g;
            G.s_distanceInput.transformA = G.s_xfA;
            G.s_distanceInput.transformB = G.s_xfB;
            I.Distance(G.s_distanceOutput, G.s_cache, G.s_distanceInput);
            if (0 >= G.s_distanceOutput.distance) {
                l = 1;
                break
            }
            G.s_fcn.Initialize(G.s_cache, c, G.s_xfA, g, G.s_xfB);
            var u = G.s_fcn.Evaluate(G.s_xfA, G.s_xfB);
            if (0 >= u) {
                l = 1;
                break
            }
            0 == j && (m = u > r ? f.Max(r - b, 0.75 * r) : f.Max(u - b, 0.02 * r));
            if (u - m < 0.5 * b) {
                if (0 == j) {
                    l = 1;
                    break
                }
                break
            }
            var y = l,
                K = l,
                t = 1;
            d.GetTransform(G.s_xfA, t);
            n.GetTransform(G.s_xfB, t);
            var F = G.s_fcn.Evaluate(G.s_xfA,
                G.s_xfB);
            if (F >= m) {
                l = 1;
                break
            }
            for (var W = 0;;) {
                var J = 0,
                    J = W & 1 ? K + (m - u) * (t - K) / (F - u) : 0.5 * (K + t);
                d.GetTransform(G.s_xfA, J);
                n.GetTransform(G.s_xfB, J);
                var s = G.s_fcn.Evaluate(G.s_xfA, G.s_xfB);
                if (f.Abs(s - m) < 0.025 * b) {
                    y = J;
                    break
                }
                s > m ? (K = J, u = s) : (t = J, F = s);
                ++W;
                ++G.b2_toiRootIters;
                if (50 == W) break
            }
            G.b2_toiMaxRootIters = f.Max(G.b2_toiMaxRootIters, W);
            if (y < (1 + 100 * Number.MIN_VALUE) * l) break;
            l = y;
            j++;
            ++G.b2_toiIters;
            if (1E3 == j) break
        }
        G.b2_toiMaxIters = f.Max(G.b2_toiMaxIters, j);
        return l
    };
    Box2D.postDefs.push(function() {
        Box2D.Collision.b2TimeOfImpact.b2_toiCalls =
            0;
        Box2D.Collision.b2TimeOfImpact.b2_toiIters = 0;
        Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = 0;
        Box2D.Collision.b2TimeOfImpact.b2_toiRootIters = 0;
        Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = 0;
        Box2D.Collision.b2TimeOfImpact.s_cache = new F;
        Box2D.Collision.b2TimeOfImpact.s_distanceInput = new E;
        Box2D.Collision.b2TimeOfImpact.s_xfA = new p;
        Box2D.Collision.b2TimeOfImpact.s_xfB = new p;
        Box2D.Collision.b2TimeOfImpact.s_fcn = new n;
        Box2D.Collision.b2TimeOfImpact.s_distanceOutput = new t
    });
    J.b2TOIInput = function() {
        this.proxyA =
            new H;
        this.proxyB = new H;
        this.sweepA = new j;
        this.sweepB = new j
    };
    W.b2WorldManifold = function() {
        this.m_normal = new m
    };
    W.prototype.b2WorldManifold = function() {
        this.m_points = new Vector(e.b2_maxManifoldPoints);
        for (var b = 0; b < e.b2_maxManifoldPoints; b++) this.m_points[b] = new m
    };
    W.prototype.Initialize = function(b, c, g, d, e) {
        void 0 === g && (g = 0);
        void 0 === e && (e = 0);
        if (0 != b.m_pointCount) {
            var n = 0,
                f, r, j = 0,
                m = 0,
                u = 0,
                y = 0,
                K = 0;
            switch (b.m_type) {
                case C.e_circles:
                    r = c.R;
                    f = b.m_localPoint;
                    n = c.position.x + r.col1.x * f.x + r.col2.x * f.y;
                    c = c.position.y +
                        r.col1.y * f.x + r.col2.y * f.y;
                    r = d.R;
                    f = b.m_points[0].m_localPoint;
                    b = d.position.x + r.col1.x * f.x + r.col2.x * f.y;
                    d = d.position.y + r.col1.y * f.x + r.col2.y * f.y;
                    f = b - n;
                    r = d - c;
                    j = f * f + r * r;
                    j > Number.MIN_VALUE * Number.MIN_VALUE ? (j = Math.sqrt(j), this.m_normal.x = f / j, this.m_normal.y = r / j) : (this.m_normal.x = 1, this.m_normal.y = 0);
                    f = c + g * this.m_normal.y;
                    d -= e * this.m_normal.y;
                    this.m_points[0].x = 0.5 * (n + g * this.m_normal.x + (b - e * this.m_normal.x));
                    this.m_points[0].y = 0.5 * (f + d);
                    break;
                case C.e_faceA:
                    r = c.R;
                    f = b.m_localPlaneNormal;
                    j = r.col1.x * f.x + r.col2.x *
                        f.y;
                    m = r.col1.y * f.x + r.col2.y * f.y;
                    r = c.R;
                    f = b.m_localPoint;
                    u = c.position.x + r.col1.x * f.x + r.col2.x * f.y;
                    y = c.position.y + r.col1.y * f.x + r.col2.y * f.y;
                    this.m_normal.x = j;
                    this.m_normal.y = m;
                    for (n = 0; n < b.m_pointCount; n++) r = d.R, f = b.m_points[n].m_localPoint, K = d.position.x + r.col1.x * f.x + r.col2.x * f.y, f = d.position.y + r.col1.y * f.x + r.col2.y * f.y, this.m_points[n].x = K + 0.5 * (g - (K - u) * j - (f - y) * m - e) * j, this.m_points[n].y = f + 0.5 * (g - (K - u) * j - (f - y) * m - e) * m;
                    break;
                case C.e_faceB:
                    r = d.R;
                    f = b.m_localPlaneNormal;
                    j = r.col1.x * f.x + r.col2.x * f.y;
                    m = r.col1.y *
                        f.x + r.col2.y * f.y;
                    r = d.R;
                    f = b.m_localPoint;
                    u = d.position.x + r.col1.x * f.x + r.col2.x * f.y;
                    y = d.position.y + r.col1.y * f.x + r.col2.y * f.y;
                    this.m_normal.x = -j;
                    this.m_normal.y = -m;
                    for (n = 0; n < b.m_pointCount; n++) r = c.R, f = b.m_points[n].m_localPoint, K = c.position.x + r.col1.x * f.x + r.col2.x * f.y, f = c.position.y + r.col1.y * f.x + r.col2.y * f.y, this.m_points[n].x = K + 0.5 * (e - (K - u) * j - (f - y) * m - g) * j, this.m_points[n].y = f + 0.5 * (e - (K - u) * j - (f - y) * m - g) * m
            }
        }
    };
    g.ClipVertex = function() {
        this.v = new m;
        this.id = new z
    };
    g.prototype.Set = function(b) {
        this.v.SetV(b.v);
        this.id.Set(b.id)
    };
    r.Features = function() {};
    Object.defineProperty(r.prototype, "referenceEdge", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return this._referenceEdge
        }
    });
    Object.defineProperty(r.prototype, "referenceEdge", {
        enumerable: !1,
        configurable: !0,
        set: function(b) {
            void 0 === b && (b = 0);
            this._referenceEdge = b;
            this._m_id._key = this._m_id._key & 4294967040 | this._referenceEdge & 255
        }
    });
    Object.defineProperty(r.prototype, "incidentEdge", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return this._incidentEdge
        }
    });
    Object.defineProperty(r.prototype,
        "incidentEdge", {
            enumerable: !1,
            configurable: !0,
            set: function(b) {
                void 0 === b && (b = 0);
                this._incidentEdge = b;
                this._m_id._key = this._m_id._key & 4294902015 | this._incidentEdge << 8 & 65280
            }
        });
    Object.defineProperty(r.prototype, "incidentVertex", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return this._incidentVertex
        }
    });
    Object.defineProperty(r.prototype, "incidentVertex", {
        enumerable: !1,
        configurable: !0,
        set: function(b) {
            void 0 === b && (b = 0);
            this._incidentVertex = b;
            this._m_id._key = this._m_id._key & 4278255615 | this._incidentVertex <<
                16 & 16711680
        }
    });
    Object.defineProperty(r.prototype, "flip", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return this._flip
        }
    });
    Object.defineProperty(r.prototype, "flip", {
        enumerable: !1,
        configurable: !0,
        set: function(b) {
            void 0 === b && (b = 0);
            this._flip = b;
            this._m_id._key = this._m_id._key & 16777215 | this._flip << 24 & 4278190080
        }
    })
})();
(function() {
    var b = Box2D.Common.b2Settings,
        c = Box2D.Collision.Shapes.b2CircleShape,
        d = Box2D.Collision.Shapes.b2EdgeChainDef,
        e = Box2D.Collision.Shapes.b2EdgeShape,
        f = Box2D.Collision.Shapes.b2MassData,
        j = Box2D.Collision.Shapes.b2PolygonShape,
        p = Box2D.Collision.Shapes.b2Shape,
        m = Box2D.Common.Math.b2Mat22,
        s = Box2D.Common.Math.b2Math,
        v = Box2D.Common.Math.b2Transform,
        A = Box2D.Common.Math.b2Vec2,
        B = Box2D.Collision.b2Distance,
        z = Box2D.Collision.b2DistanceInput,
        x = Box2D.Collision.b2DistanceOutput,
        I = Box2D.Collision.b2DistanceProxy,
        E = Box2D.Collision.b2SimplexCache;
    Box2D.inherit(c, Box2D.Collision.Shapes.b2Shape);
    c.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
    c.b2CircleShape = function() {
        Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
        this.m_p = new A
    };
    c.prototype.Copy = function() {
        var b = new c;
        b.Set(this);
        return b
    };
    c.prototype.Set = function(b) {
        this.__super.Set.call(this, b);
        Box2D.is(b, c) && this.m_p.SetV((b instanceof c ? b : null).m_p)
    };
    c.prototype.TestPoint = function(b, c) {
        var d = b.R,
            e = b.position.x + (d.col1.x * this.m_p.x +
                d.col2.x * this.m_p.y),
            d = b.position.y + (d.col1.y * this.m_p.x + d.col2.y * this.m_p.y),
            e = c.x - e,
            d = c.y - d;
        return e * e + d * d <= this.m_radius * this.m_radius
    };
    c.prototype.RayCast = function(b, c, d) {
        var e = d.R,
            f = c.p1.x - (d.position.x + (e.col1.x * this.m_p.x + e.col2.x * this.m_p.y));
        d = c.p1.y - (d.position.y + (e.col1.y * this.m_p.x + e.col2.y * this.m_p.y));
        var e = c.p2.x - c.p1.x,
            j = c.p2.y - c.p1.y,
            m = f * e + d * j,
            s = e * e + j * j,
            p = m * m - s * (f * f + d * d - this.m_radius * this.m_radius);
        if (0 > p || s < Number.MIN_VALUE) return !1;
        m = -(m + Math.sqrt(p));
        return 0 <= m && m <= c.maxFraction *
            s ? (m /= s, b.fraction = m, b.normal.x = f + m * e, b.normal.y = d + m * j, b.normal.Normalize(), !0) : !1
    };
    c.prototype.ComputeAABB = function(b, c) {
        var d = c.R,
            e = c.position.x + (d.col1.x * this.m_p.x + d.col2.x * this.m_p.y),
            d = c.position.y + (d.col1.y * this.m_p.x + d.col2.y * this.m_p.y);
        b.lowerBound.Set(e - this.m_radius, d - this.m_radius);
        b.upperBound.Set(e + this.m_radius, d + this.m_radius)
    };
    c.prototype.ComputeMass = function(c, d) {
        void 0 === d && (d = 0);
        c.mass = d * b.b2_pi * this.m_radius * this.m_radius;
        c.center.SetV(this.m_p);
        c.I = c.mass * (0.5 * this.m_radius *
            this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y))
    };
    c.prototype.ComputeSubmergedArea = function(b, c, d, e) {
        void 0 === c && (c = 0);
        d = s.MulX(d, this.m_p);
        var f = -(s.Dot(b, d) - c);
        if (f < -this.m_radius + Number.MIN_VALUE) return 0;
        if (f > this.m_radius) return e.SetV(d), Math.PI * this.m_radius * this.m_radius;
        c = this.m_radius * this.m_radius;
        var j = f * f,
            f = c * (Math.asin(f / this.m_radius) + Math.PI / 2) + f * Math.sqrt(c - j);
        c = -2 / 3 * Math.pow(c - j, 1.5) / f;
        e.x = d.x + b.x * c;
        e.y = d.y + b.y * c;
        return f
    };
    c.prototype.GetLocalPosition = function() {
        return this.m_p
    };
    c.prototype.SetLocalPosition = function(b) {
        this.m_p.SetV(b)
    };
    c.prototype.GetRadius = function() {
        return this.m_radius
    };
    c.prototype.SetRadius = function(b) {
        void 0 === b && (b = 0);
        this.m_radius = b
    };
    c.prototype.b2CircleShape = function(b) {
        void 0 === b && (b = 0);
        this.__super.b2Shape.call(this);
        this.m_type = p.e_circleShape;
        this.m_radius = b
    };
    d.b2EdgeChainDef = function() {};
    d.prototype.b2EdgeChainDef = function() {
        this.vertexCount = 0;
        this.isALoop = !0;
        this.vertices = []
    };
    Box2D.inherit(e, Box2D.Collision.Shapes.b2Shape);
    e.prototype.__super =
        Box2D.Collision.Shapes.b2Shape.prototype;
    e.b2EdgeShape = function() {
        Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
        this.s_supportVec = new A;
        this.m_v1 = new A;
        this.m_v2 = new A;
        this.m_coreV1 = new A;
        this.m_coreV2 = new A;
        this.m_normal = new A;
        this.m_direction = new A;
        this.m_cornerDir1 = new A;
        this.m_cornerDir2 = new A
    };
    e.prototype.TestPoint = function() {
        return !1
    };
    e.prototype.RayCast = function(b, c, d) {
        var e, f = c.p2.x - c.p1.x,
            j = c.p2.y - c.p1.y;
        e = d.R;
        var m = d.position.x + (e.col1.x * this.m_v1.x + e.col2.x * this.m_v1.y),
            s = d.position.y + (e.col1.y * this.m_v1.x + e.col2.y * this.m_v1.y),
            p = d.position.y + (e.col1.y * this.m_v2.x + e.col2.y * this.m_v2.y) - s;
        d = -(d.position.x + (e.col1.x * this.m_v2.x + e.col2.x * this.m_v2.y) - m);
        e = 100 * Number.MIN_VALUE;
        var v = -(f * p + j * d);
        if (v > e) {
            var m = c.p1.x - m,
                x = c.p1.y - s,
                s = m * p + x * d;
            if (0 <= s && s <= c.maxFraction * v && (c = -f * x + j * m, -e * v <= c && c <= v * (1 + e))) return b.fraction = s / v, c = Math.sqrt(p * p + d * d), b.normal.x = p / c, b.normal.y = d / c, !0
        }
        return !1
    };
    e.prototype.ComputeAABB = function(b, c) {
        var d = c.R,
            e = c.position.x + (d.col1.x * this.m_v1.x +
                d.col2.x * this.m_v1.y),
            f = c.position.y + (d.col1.y * this.m_v1.x + d.col2.y * this.m_v1.y),
            j = c.position.x + (d.col1.x * this.m_v2.x + d.col2.x * this.m_v2.y),
            d = c.position.y + (d.col1.y * this.m_v2.x + d.col2.y * this.m_v2.y);
        e < j ? (b.lowerBound.x = e, b.upperBound.x = j) : (b.lowerBound.x = j, b.upperBound.x = e);
        f < d ? (b.lowerBound.y = f, b.upperBound.y = d) : (b.lowerBound.y = d, b.upperBound.y = f)
    };
    e.prototype.ComputeMass = function(b) {
        b.mass = 0;
        b.center.SetV(this.m_v1);
        b.I = 0
    };
    e.prototype.ComputeSubmergedArea = function(b, c, d, e) {
        void 0 === c && (c = 0);
        var f =
            new A(b.x * c, b.y * c),
            j = s.MulX(d, this.m_v1);
        d = s.MulX(d, this.m_v2);
        var m = s.Dot(b, j) - c;
        b = s.Dot(b, d) - c;
        if (0 < m) {
            if (0 < b) return 0;
            j.x = -b / (m - b) * j.x + m / (m - b) * d.x;
            j.y = -b / (m - b) * j.y + m / (m - b) * d.y
        } else 0 < b && (d.x = -b / (m - b) * j.x + m / (m - b) * d.x, d.y = -b / (m - b) * j.y + m / (m - b) * d.y);
        e.x = (f.x + j.x + d.x) / 3;
        e.y = (f.y + j.y + d.y) / 3;
        return 0.5 * ((j.x - f.x) * (d.y - f.y) - (j.y - f.y) * (d.x - f.x))
    };
    e.prototype.GetLength = function() {
        return this.m_length
    };
    e.prototype.GetVertex1 = function() {
        return this.m_v1
    };
    e.prototype.GetVertex2 = function() {
        return this.m_v2
    };
    e.prototype.GetCoreVertex1 = function() {
        return this.m_coreV1
    };
    e.prototype.GetCoreVertex2 = function() {
        return this.m_coreV2
    };
    e.prototype.GetNormalVector = function() {
        return this.m_normal
    };
    e.prototype.GetDirectionVector = function() {
        return this.m_direction
    };
    e.prototype.GetCorner1Vector = function() {
        return this.m_cornerDir1
    };
    e.prototype.GetCorner2Vector = function() {
        return this.m_cornerDir2
    };
    e.prototype.Corner1IsConvex = function() {
        return this.m_cornerConvex1
    };
    e.prototype.Corner2IsConvex = function() {
        return this.m_cornerConvex2
    };
    e.prototype.GetFirstVertex = function(b) {
        var c = b.R;
        return new A(b.position.x + (c.col1.x * this.m_coreV1.x + c.col2.x * this.m_coreV1.y), b.position.y + (c.col1.y * this.m_coreV1.x + c.col2.y * this.m_coreV1.y))
    };
    e.prototype.GetNextEdge = function() {
        return this.m_nextEdge
    };
    e.prototype.GetPrevEdge = function() {
        return this.m_prevEdge
    };
    e.prototype.Support = function(b, c, d) {
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        var e = b.R,
            f = b.position.x + (e.col1.x * this.m_coreV1.x + e.col2.x * this.m_coreV1.y),
            j = b.position.y + (e.col1.y * this.m_coreV1.x +
                e.col2.y * this.m_coreV1.y),
            m = b.position.x + (e.col1.x * this.m_coreV2.x + e.col2.x * this.m_coreV2.y);
        b = b.position.y + (e.col1.y * this.m_coreV2.x + e.col2.y * this.m_coreV2.y);
        f * c + j * d > m * c + b * d ? (this.s_supportVec.x = f, this.s_supportVec.y = j) : (this.s_supportVec.x = m, this.s_supportVec.y = b);
        return this.s_supportVec
    };
    e.prototype.b2EdgeShape = function(c, d) {
        this.__super.b2Shape.call(this);
        this.m_type = p.e_edgeShape;
        this.m_nextEdge = this.m_prevEdge = null;
        this.m_v1 = c;
        this.m_v2 = d;
        this.m_direction.Set(this.m_v2.x - this.m_v1.x, this.m_v2.y -
            this.m_v1.y);
        this.m_length = this.m_direction.Normalize();
        this.m_normal.Set(this.m_direction.y, -this.m_direction.x);
        this.m_coreV1.Set(-b.b2_toiSlop * (this.m_normal.x - this.m_direction.x) + this.m_v1.x, -b.b2_toiSlop * (this.m_normal.y - this.m_direction.y) + this.m_v1.y);
        this.m_coreV2.Set(-b.b2_toiSlop * (this.m_normal.x + this.m_direction.x) + this.m_v2.x, -b.b2_toiSlop * (this.m_normal.y + this.m_direction.y) + this.m_v2.y);
        this.m_cornerDir1 = this.m_normal;
        this.m_cornerDir2.Set(-this.m_normal.x, -this.m_normal.y)
    };
    e.prototype.SetPrevEdge =
        function(b, c, d, e) {
            this.m_prevEdge = b;
            this.m_coreV1 = c;
            this.m_cornerDir1 = d;
            this.m_cornerConvex1 = e
        };
    e.prototype.SetNextEdge = function(b, c, d, e) {
        this.m_nextEdge = b;
        this.m_coreV2 = c;
        this.m_cornerDir2 = d;
        this.m_cornerConvex2 = e
    };
    f.b2MassData = function() {
        this.mass = 0;
        this.center = new A(0, 0);
        this.I = 0
    };
    Box2D.inherit(j, Box2D.Collision.Shapes.b2Shape);
    j.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
    j.b2PolygonShape = function() {
        Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments)
    };
    j.prototype.Copy =
        function() {
            var b = new j;
            b.Set(this);
            return b
        };
    j.prototype.Set = function(b) {
        this.__super.Set.call(this, b);
        if (Box2D.is(b, j)) {
            b = b instanceof j ? b : null;
            this.m_centroid.SetV(b.m_centroid);
            this.m_vertexCount = b.m_vertexCount;
            this.Reserve(this.m_vertexCount);
            for (var c = 0; c < this.m_vertexCount; c++) this.m_vertices[c].SetV(b.m_vertices[c]), this.m_normals[c].SetV(b.m_normals[c])
        }
    };
    j.prototype.SetAsArray = function(b, c) {
        void 0 === c && (c = 0);
        for (var d = new Vector, e = 0, f, e = 0; e < b.length; ++e) f = b[e], d.push(f);
        this.SetAsVector(d,
            c)
    };
    j.AsArray = function(b, c) {
        void 0 === c && (c = 0);
        var d = new j;
        d.SetAsArray(b, c);
        return d
    };
    j.prototype.SetAsVector = function(c, d) {
        void 0 === d && (d = 0);
        0 == d && (d = c.length);
        b.b2Assert(2 <= d);
        this.m_vertexCount = d;
        this.Reserve(d);
        for (var e = 0, e = 0; e < this.m_vertexCount; e++) this.m_vertices[e].SetV(c[e]);
        for (e = 0; e < this.m_vertexCount; ++e) {
            var f = parseInt(e),
                m = parseInt(e + 1 < this.m_vertexCount ? e + 1 : 0),
                f = s.SubtractVV(this.m_vertices[m], this.m_vertices[f]);
            b.b2Assert(f.LengthSquared() > Number.MIN_VALUE);
            this.m_normals[e].SetV(s.CrossVF(f,
                1));
            this.m_normals[e].Normalize()
        }
        this.m_centroid = j.ComputeCentroid(this.m_vertices, this.m_vertexCount)
    };
    j.AsVector = function(b, c) {
        void 0 === c && (c = 0);
        var d = new j;
        d.SetAsVector(b, c);
        return d
    };
    j.prototype.SetAsBox = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        this.m_vertexCount = 4;
        this.Reserve(4);
        this.m_vertices[0].Set(-b, -c);
        this.m_vertices[1].Set(b, -c);
        this.m_vertices[2].Set(b, c);
        this.m_vertices[3].Set(-b, c);
        this.m_normals[0].Set(0, -1);
        this.m_normals[1].Set(1, 0);
        this.m_normals[2].Set(0, 1);
        this.m_normals[3].Set(-1,
            0);
        this.m_centroid.SetZero()
    };
    j.AsBox = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        var d = new j;
        d.SetAsBox(b, c);
        return d
    };
    j.prototype.SetAsOrientedBox = function(b, c, d, e) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        void 0 === d && (d = null);
        void 0 === e && (e = 0);
        this.m_vertexCount = 4;
        this.Reserve(4);
        this.m_vertices[0].Set(-b, -c);
        this.m_vertices[1].Set(b, -c);
        this.m_vertices[2].Set(b, c);
        this.m_vertices[3].Set(-b, c);
        this.m_normals[0].Set(0, -1);
        this.m_normals[1].Set(1, 0);
        this.m_normals[2].Set(0, 1);
        this.m_normals[3].Set(-1,
            0);
        this.m_centroid = d;
        b = new v;
        b.position = d;
        b.R.Set(e);
        for (d = 0; d < this.m_vertexCount; ++d) this.m_vertices[d] = s.MulX(b, this.m_vertices[d]), this.m_normals[d] = s.MulMV(b.R, this.m_normals[d])
    };
    j.AsOrientedBox = function(b, c, d, e) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        void 0 === d && (d = null);
        void 0 === e && (e = 0);
        var f = new j;
        f.SetAsOrientedBox(b, c, d, e);
        return f
    };
    j.prototype.SetAsEdge = function(b, c) {
        this.m_vertexCount = 2;
        this.Reserve(2);
        this.m_vertices[0].SetV(b);
        this.m_vertices[1].SetV(c);
        this.m_centroid.x = 0.5 * (b.x + c.x);
        this.m_centroid.y = 0.5 * (b.y + c.y);
        this.m_normals[0] = s.CrossVF(s.SubtractVV(c, b), 1);
        this.m_normals[0].Normalize();
        this.m_normals[1].x = -this.m_normals[0].x;
        this.m_normals[1].y = -this.m_normals[0].y
    };
    j.AsEdge = function(b, c) {
        var d = new j;
        d.SetAsEdge(b, c);
        return d
    };
    j.prototype.TestPoint = function(b, c) {
        var d;
        d = b.R;
        for (var e = c.x - b.position.x, f = c.y - b.position.y, j = e * d.col1.x + f * d.col1.y, m = e * d.col2.x + f * d.col2.y, s = 0; s < this.m_vertexCount; ++s)
            if (d = this.m_vertices[s], e = j - d.x, f = m - d.y, d = this.m_normals[s], 0 < d.x * e + d.y * f) return !1;
        return !0
    };
    j.prototype.RayCast = function(b, c, d) {
        var e = 0,
            f = c.maxFraction,
            j = 0,
            m = 0,
            s, p, j = c.p1.x - d.position.x,
            m = c.p1.y - d.position.y;
        s = d.R;
        var v = j * s.col1.x + m * s.col1.y,
            x = j * s.col2.x + m * s.col2.y,
            j = c.p2.x - d.position.x,
            m = c.p2.y - d.position.y;
        s = d.R;
        c = j * s.col1.x + m * s.col1.y - v;
        s = j * s.col2.x + m * s.col2.y - x;
        for (var z = -1, n = 0; n < this.m_vertexCount; ++n) {
            p = this.m_vertices[n];
            j = p.x - v;
            m = p.y - x;
            p = this.m_normals[n];
            j = p.x * j + p.y * m;
            m = p.x * c + p.y * s;
            if (0 == m) {
                if (0 > j) return !1
            } else 0 > m && j < e * m ? (e = j / m, z = n) : 0 < m && j < f * m && (f = j / m); if (f < e - Number.MIN_VALUE) return !1
        }
        return 0 <=
            z ? (b.fraction = e, s = d.R, p = this.m_normals[z], b.normal.x = s.col1.x * p.x + s.col2.x * p.y, b.normal.y = s.col1.y * p.x + s.col2.y * p.y, !0) : !1
    };
    j.prototype.ComputeAABB = function(b, c) {
        for (var d = c.R, e = this.m_vertices[0], f = c.position.x + (d.col1.x * e.x + d.col2.x * e.y), j = c.position.y + (d.col1.y * e.x + d.col2.y * e.y), m = f, s = j, p = 1; p < this.m_vertexCount; ++p) var e = this.m_vertices[p],
            v = c.position.x + (d.col1.x * e.x + d.col2.x * e.y),
            e = c.position.y + (d.col1.y * e.x + d.col2.y * e.y),
            f = f < v ? f : v,
            j = j < e ? j : e,
            m = m > v ? m : v,
            s = s > e ? s : e;
        b.lowerBound.x = f - this.m_radius;
        b.lowerBound.y = j - this.m_radius;
        b.upperBound.x = m + this.m_radius;
        b.upperBound.y = s + this.m_radius
    };
    j.prototype.ComputeMass = function(b, c) {
        void 0 === c && (c = 0);
        if (2 == this.m_vertexCount) b.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x), b.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y), b.mass = 0, b.I = 0;
        else {
            for (var d = 0, e = 0, f = 0, j = 0, m = 1 / 3, s = 0; s < this.m_vertexCount; ++s) var p = this.m_vertices[s],
                v = s + 1 < this.m_vertexCount ? this.m_vertices[parseInt(s + 1)] : this.m_vertices[0],
                x = p.x - 0,
                z = p.y - 0,
                n = v.x - 0,
                y = v.y -
                0,
                F = x * y - z * n,
                u = 0.5 * F,
                f = f + u,
                d = d + u * m * (0 + p.x + v.x),
                e = e + u * m * (0 + p.y + v.y),
                p = x,
                j = j + F * (m * (0.25 * (p * p + n * p + n * n) + (0 * p + 0 * n)) + 0 + (m * (0.25 * (z * z + y * z + y * y) + (0 * z + 0 * y)) + 0));
            b.mass = c * f;
            b.center.Set(d * (1 / f), e * (1 / f));
            b.I = c * j
        }
    };
    j.prototype.ComputeSubmergedArea = function(b, c, d, e) {
        void 0 === c && (c = 0);
        var j = s.MulTMV(d.R, b),
            m = c - s.Dot(b, d.position),
            p = new Vector_a2j_Number,
            v = 0,
            x = -1;
        c = -1;
        var z = !1;
        for (b = b = 0; b < this.m_vertexCount; ++b) {
            p[b] = s.Dot(j, this.m_vertices[b]) - m;
            var B = p[b] < -Number.MIN_VALUE;
            0 < b && (B ? z || (x = b - 1, v++) : z && (c = b - 1, v++));
            z = B
        }
        switch (v) {
            case 0:
                return z ? (b = new f, this.ComputeMass(b, 1), e.SetV(s.MulX(d, b.center)), b.mass) : 0;
            case 1:
                -1 == x ? x = this.m_vertexCount - 1 : c = this.m_vertexCount - 1
        }
        b = parseInt((x + 1) % this.m_vertexCount);
        j = parseInt((c + 1) % this.m_vertexCount);
        m = (0 - p[x]) / (p[b] - p[x]);
        p = (0 - p[c]) / (p[j] - p[c]);
        x = new A(this.m_vertices[x].x * (1 - m) + this.m_vertices[b].x * m, this.m_vertices[x].y * (1 - m) + this.m_vertices[b].y * m);
        c = new A(this.m_vertices[c].x * (1 - p) + this.m_vertices[j].x * p, this.m_vertices[c].y * (1 - p) + this.m_vertices[j].y * p);
        p = 0;
        m =
            new A;
        for (v = this.m_vertices[b]; b != j;) b = (b + 1) % this.m_vertexCount, z = b == j ? c : this.m_vertices[b], B = 0.5 * ((v.x - x.x) * (z.y - x.y) - (v.y - x.y) * (z.x - x.x)), p += B, m.x += B * (x.x + v.x + z.x) / 3, m.y += B * (x.y + v.y + z.y) / 3, v = z;
        m.Multiply(1 / p);
        e.SetV(s.MulX(d, m));
        return p
    };
    j.prototype.GetVertexCount = function() {
        return this.m_vertexCount
    };
    j.prototype.GetVertices = function() {
        return this.m_vertices
    };
    j.prototype.GetNormals = function() {
        return this.m_normals
    };
    j.prototype.GetSupport = function(b) {
        for (var c = 0, d = this.m_vertices[0].x * b.x + this.m_vertices[0].y *
            b.y, e = 1; e < this.m_vertexCount; ++e) {
            var f = this.m_vertices[e].x * b.x + this.m_vertices[e].y * b.y;
            f > d && (c = e, d = f)
        }
        return c
    };
    j.prototype.GetSupportVertex = function(b) {
        for (var c = 0, d = this.m_vertices[0].x * b.x + this.m_vertices[0].y * b.y, e = 1; e < this.m_vertexCount; ++e) {
            var f = this.m_vertices[e].x * b.x + this.m_vertices[e].y * b.y;
            f > d && (c = e, d = f)
        }
        return this.m_vertices[c]
    };
    j.prototype.Validate = function() {
        return !1
    };
    j.prototype.b2PolygonShape = function() {
        this.__super.b2Shape.call(this);
        this.m_type = p.e_polygonShape;
        this.m_centroid =
            new A;
        this.m_vertices = new Vector;
        this.m_normals = new Vector
    };
    j.prototype.Reserve = function(b) {
        void 0 === b && (b = 0);
        for (var c = parseInt(this.m_vertices.length); c < b; c++) this.m_vertices[c] = new A, this.m_normals[c] = new A
    };
    j.ComputeCentroid = function(b, c) {
        void 0 === c && (c = 0);
        for (var d = new A, e = 0, f = 1 / 3, m = 0; m < c; ++m) {
            var j = b[m],
                s = m + 1 < c ? b[parseInt(m + 1)] : b[0],
                p = 0.5 * ((j.x - 0) * (s.y - 0) - (j.y - 0) * (s.x - 0)),
                e = e + p;
            d.x += p * f * (0 + j.x + s.x);
            d.y += p * f * (0 + j.y + s.y)
        }
        d.x *= 1 / e;
        d.y *= 1 / e;
        return d
    };
    j.ComputeOBB = function(b, c, d) {
        void 0 === d && (d =
            0);
        for (var e = 0, f = new Vector(d + 1), e = 0; e < d; ++e) f[e] = c[e];
        f[d] = f[0];
        c = Number.MAX_VALUE;
        for (e = 1; e <= d; ++e) {
            for (var m = f[parseInt(e - 1)], j = f[e].x - m.x, s = f[e].y - m.y, p = Math.sqrt(j * j + s * s), j = j / p, s = s / p, v = -s, x = j, z = p = Number.MAX_VALUE, n = -Number.MAX_VALUE, y = -Number.MAX_VALUE, F = 0; F < d; ++F) {
                var u = f[F].x - m.x,
                    G = f[F].y - m.y,
                    J = j * u + s * G,
                    u = v * u + x * G;
                J < p && (p = J);
                u < z && (z = u);
                J > n && (n = J);
                u > y && (y = u)
            }
            F = (n - p) * (y - z);
            F < 0.95 * c && (c = F, b.R.col1.x = j, b.R.col1.y = s, b.R.col2.x = v, b.R.col2.y = x, j = 0.5 * (p + n), s = 0.5 * (z + y), v = b.R, b.center.x = m.x + (v.col1.x *
                j + v.col2.x * s), b.center.y = m.y + (v.col1.y * j + v.col2.y * s), b.extents.x = 0.5 * (n - p), b.extents.y = 0.5 * (y - z))
        }
    };
    Box2D.postDefs.push(function() {
        Box2D.Collision.Shapes.b2PolygonShape.s_mat = new m
    });
    p.b2Shape = function() {};
    p.prototype.Copy = function() {
        return null
    };
    p.prototype.Set = function(b) {
        this.m_radius = b.m_radius
    };
    p.prototype.GetType = function() {
        return this.m_type
    };
    p.prototype.TestPoint = function() {
        return !1
    };
    p.prototype.RayCast = function() {
        return !1
    };
    p.prototype.ComputeAABB = function() {};
    p.prototype.ComputeMass = function() {};
    p.prototype.ComputeSubmergedArea = function() {
        return 0
    };
    p.TestOverlap = function(b, c, d, e) {
        var f = new z;
        f.proxyA = new I;
        f.proxyA.Set(b);
        f.proxyB = new I;
        f.proxyB.Set(d);
        f.transformA = c;
        f.transformB = e;
        f.useRadii = !0;
        b = new E;
        b.count = 0;
        c = new x;
        B.Distance(c, b, f);
        return c.distance < 10 * Number.MIN_VALUE
    };
    p.prototype.b2Shape = function() {
        this.m_type = p.e_unknownShape;
        this.m_radius = b.b2_linearSlop
    };
    Box2D.postDefs.push(function() {
        Box2D.Collision.Shapes.b2Shape.e_unknownShape = -1;
        Box2D.Collision.Shapes.b2Shape.e_circleShape =
            0;
        Box2D.Collision.Shapes.b2Shape.e_polygonShape = 1;
        Box2D.Collision.Shapes.b2Shape.e_edgeShape = 2;
        Box2D.Collision.Shapes.b2Shape.e_shapeTypeCount = 3;
        Box2D.Collision.Shapes.b2Shape.e_hitCollide = 1;
        Box2D.Collision.Shapes.b2Shape.e_missCollide = 0;
        Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide = -1
    })
})();
(function() {
    var b = Box2D.Common.b2Color,
        c = Box2D.Common.b2Settings,
        d = Box2D.Common.Math.b2Math;
    b.b2Color = function() {
        this._b = this._g = this._r = 0
    };
    b.prototype.b2Color = function(b, c, j) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        void 0 === j && (j = 0);
        this._r = Box2D.parseUInt(255 * d.Clamp(b, 0, 1));
        this._g = Box2D.parseUInt(255 * d.Clamp(c, 0, 1));
        this._b = Box2D.parseUInt(255 * d.Clamp(j, 0, 1))
    };
    b.prototype.Set = function(b, c, j) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        void 0 === j && (j = 0);
        this._r = Box2D.parseUInt(255 * d.Clamp(b, 0, 1));
        this._g =
            Box2D.parseUInt(255 * d.Clamp(c, 0, 1));
        this._b = Box2D.parseUInt(255 * d.Clamp(j, 0, 1))
    };
    Object.defineProperty(b.prototype, "r", {
        enumerable: !1,
        configurable: !0,
        set: function(b) {
            void 0 === b && (b = 0);
            this._r = Box2D.parseUInt(255 * d.Clamp(b, 0, 1))
        }
    });
    Object.defineProperty(b.prototype, "g", {
        enumerable: !1,
        configurable: !0,
        set: function(b) {
            void 0 === b && (b = 0);
            this._g = Box2D.parseUInt(255 * d.Clamp(b, 0, 1))
        }
    });
    Object.defineProperty(b.prototype, "b", {
        enumerable: !1,
        configurable: !0,
        set: function(b) {
            void 0 === b && (b = 0);
            this._b = Box2D.parseUInt(255 *
                d.Clamp(b, 0, 1))
        }
    });
    Object.defineProperty(b.prototype, "color", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return this._r << 16 | this._g << 8 | this._b
        }
    });
    c.b2Settings = function() {};
    c.b2MixFriction = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        return Math.sqrt(b * c)
    };
    c.b2MixRestitution = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        return b > c ? b : c
    };
    c.b2Assert = function(b) {
        if (!b) throw "Assertion Failed";
    };
    Box2D.postDefs.push(function() {
        Box2D.Common.b2Settings.VERSION = "2.1alpha";
        Box2D.Common.b2Settings.USHRT_MAX =
            65535;
        Box2D.Common.b2Settings.b2_pi = Math.PI;
        Box2D.Common.b2Settings.b2_maxManifoldPoints = 2;
        Box2D.Common.b2Settings.b2_aabbExtension = 0.1;
        Box2D.Common.b2Settings.b2_aabbMultiplier = 2;
        Box2D.Common.b2Settings.b2_polygonRadius = 2 * c.b2_linearSlop;
        Box2D.Common.b2Settings.b2_linearSlop = 0.0050;
        Box2D.Common.b2Settings.b2_angularSlop = 2 / 180 * c.b2_pi;
        Box2D.Common.b2Settings.b2_toiSlop = 8 * c.b2_linearSlop;
        Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland = 32;
        Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland = 32;
        Box2D.Common.b2Settings.b2_velocityThreshold =
            1;
        Box2D.Common.b2Settings.b2_maxLinearCorrection = 0.2;
        Box2D.Common.b2Settings.b2_maxAngularCorrection = 8 / 180 * c.b2_pi;
        Box2D.Common.b2Settings.b2_maxTranslation = 2;
        Box2D.Common.b2Settings.b2_maxTranslationSquared = c.b2_maxTranslation * c.b2_maxTranslation;
        Box2D.Common.b2Settings.b2_maxRotation = 0.5 * c.b2_pi;
        Box2D.Common.b2Settings.b2_maxRotationSquared = c.b2_maxRotation * c.b2_maxRotation;
        Box2D.Common.b2Settings.b2_contactBaumgarte = 0.2;
        Box2D.Common.b2Settings.b2_timeToSleep = 0.5;
        Box2D.Common.b2Settings.b2_linearSleepTolerance =
            0.01;
        Box2D.Common.b2Settings.b2_angularSleepTolerance = 2 / 180 * c.b2_pi
    })
})();
(function() {
    var b = Box2D.Common.Math.b2Mat22,
        c = Box2D.Common.Math.b2Mat33,
        d = Box2D.Common.Math.b2Math,
        e = Box2D.Common.Math.b2Sweep,
        f = Box2D.Common.Math.b2Transform,
        j = Box2D.Common.Math.b2Vec2,
        p = Box2D.Common.Math.b2Vec3;
    b.b2Mat22 = function() {
        this.col1 = new j;
        this.col2 = new j
    };
    b.prototype.b2Mat22 = function() {
        this.SetIdentity()
    };
    b.FromAngle = function(c) {
        void 0 === c && (c = 0);
        var d = new b;
        d.Set(c);
        return d
    };
    b.FromVV = function(c, d) {
        var e = new b;
        e.SetVV(c, d);
        return e
    };
    b.prototype.Set = function(b) {
        void 0 === b && (b = 0);
        var c =
            Math.cos(b);
        b = Math.sin(b);
        this.col1.x = c;
        this.col2.x = -b;
        this.col1.y = b;
        this.col2.y = c
    };
    b.prototype.SetVV = function(b, c) {
        this.col1.SetV(b);
        this.col2.SetV(c)
    };
    b.prototype.Copy = function() {
        var c = new b;
        c.SetM(this);
        return c
    };
    b.prototype.SetM = function(b) {
        this.col1.SetV(b.col1);
        this.col2.SetV(b.col2)
    };
    b.prototype.AddM = function(b) {
        this.col1.x += b.col1.x;
        this.col1.y += b.col1.y;
        this.col2.x += b.col2.x;
        this.col2.y += b.col2.y
    };
    b.prototype.SetIdentity = function() {
        this.col1.x = 1;
        this.col2.x = 0;
        this.col1.y = 0;
        this.col2.y = 1
    };
    b.prototype.SetZero = function() {
        this.col1.x = 0;
        this.col2.x = 0;
        this.col1.y = 0;
        this.col2.y = 0
    };
    b.prototype.GetAngle = function() {
        return Math.atan2(this.col1.y, this.col1.x)
    };
    b.prototype.GetInverse = function(b) {
        var c = this.col1.x,
            d = this.col2.x,
            e = this.col1.y,
            f = this.col2.y,
            j = c * f - d * e;
        0 != j && (j = 1 / j);
        b.col1.x = j * f;
        b.col2.x = -j * d;
        b.col1.y = -j * e;
        b.col2.y = j * c;
        return b
    };
    b.prototype.Solve = function(b, c, d) {
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        var e = this.col1.x,
            f = this.col2.x,
            j = this.col1.y,
            p = this.col2.y,
            I = e * p - f * j;
        0 != I && (I = 1 / I);
        b.x = I * (p * c - f * d);
        b.y = I * (e * d - j * c);
        return b
    };
    b.prototype.Abs = function() {
        this.col1.Abs();
        this.col2.Abs()
    };
    c.b2Mat33 = function() {
        this.col1 = new p;
        this.col2 = new p;
        this.col3 = new p
    };
    c.prototype.b2Mat33 = function(b, c, d) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        void 0 === d && (d = null);
        !b && !c && !d ? (this.col1.SetZero(), this.col2.SetZero(), this.col3.SetZero()) : (this.col1.SetV(b), this.col2.SetV(c), this.col3.SetV(d))
    };
    c.prototype.SetVVV = function(b, c, d) {
        this.col1.SetV(b);
        this.col2.SetV(c);
        this.col3.SetV(d)
    };
    c.prototype.Copy =
        function() {
            return new c(this.col1, this.col2, this.col3)
        };
    c.prototype.SetM = function(b) {
        this.col1.SetV(b.col1);
        this.col2.SetV(b.col2);
        this.col3.SetV(b.col3)
    };
    c.prototype.AddM = function(b) {
        this.col1.x += b.col1.x;
        this.col1.y += b.col1.y;
        this.col1.z += b.col1.z;
        this.col2.x += b.col2.x;
        this.col2.y += b.col2.y;
        this.col2.z += b.col2.z;
        this.col3.x += b.col3.x;
        this.col3.y += b.col3.y;
        this.col3.z += b.col3.z
    };
    c.prototype.SetIdentity = function() {
        this.col1.x = 1;
        this.col2.x = 0;
        this.col3.x = 0;
        this.col1.y = 0;
        this.col2.y = 1;
        this.col3.y = 0;
        this.col1.z = 0;
        this.col2.z = 0;
        this.col3.z = 1
    };
    c.prototype.SetZero = function() {
        this.col1.x = 0;
        this.col2.x = 0;
        this.col3.x = 0;
        this.col1.y = 0;
        this.col2.y = 0;
        this.col3.y = 0;
        this.col1.z = 0;
        this.col2.z = 0;
        this.col3.z = 0
    };
    c.prototype.Solve22 = function(b, c, d) {
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        var e = this.col1.x,
            f = this.col2.x,
            j = this.col1.y,
            p = this.col2.y,
            I = e * p - f * j;
        0 != I && (I = 1 / I);
        b.x = I * (p * c - f * d);
        b.y = I * (e * d - j * c);
        return b
    };
    c.prototype.Solve33 = function(b, c, d, e) {
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        void 0 === e && (e = 0);
        var f = this.col1.x,
            j = this.col1.y,
            p = this.col1.z,
            I = this.col2.x,
            E = this.col2.y,
            t = this.col2.z,
            H = this.col3.x,
            L = this.col3.y,
            Q = this.col3.z,
            M = f * (E * Q - t * L) + j * (t * H - I * Q) + p * (I * L - E * H);
        0 != M && (M = 1 / M);
        b.x = M * (c * (E * Q - t * L) + d * (t * H - I * Q) + e * (I * L - E * H));
        b.y = M * (f * (d * Q - e * L) + j * (e * H - c * Q) + p * (c * L - d * H));
        b.z = M * (f * (E * e - t * d) + j * (t * c - I * e) + p * (I * d - E * c));
        return b
    };
    d.b2Math = function() {};
    d.IsValid = function(b) {
        void 0 === b && (b = 0);
        return isFinite(b)
    };
    d.Dot = function(b, c) {
        return b.x * c.x + b.y * c.y
    };
    d.CrossVV = function(b, c) {
        return b.x * c.y - b.y * c.x
    };
    d.CrossVF = function(b,
        c) {
        void 0 === c && (c = 0);
        return new j(c * b.y, -c * b.x)
    };
    d.CrossFV = function(b, c) {
        void 0 === b && (b = 0);
        return new j(-b * c.y, b * c.x)
    };
    d.MulMV = function(b, c) {
        return new j(b.col1.x * c.x + b.col2.x * c.y, b.col1.y * c.x + b.col2.y * c.y)
    };
    d.MulTMV = function(b, c) {
        return new j(d.Dot(c, b.col1), d.Dot(c, b.col2))
    };
    d.MulX = function(b, c) {
        var e = d.MulMV(b.R, c);
        e.x += b.position.x;
        e.y += b.position.y;
        return e
    };
    d.MulXT = function(b, c) {
        var e = d.SubtractVV(c, b.position),
            f = e.x * b.R.col1.x + e.y * b.R.col1.y;
        e.y = e.x * b.R.col2.x + e.y * b.R.col2.y;
        e.x = f;
        return e
    };
    d.AddVV = function(b, c) {
        return new j(b.x + c.x, b.y + c.y)
    };
    d.SubtractVV = function(b, c) {
        return new j(b.x - c.x, b.y - c.y)
    };
    d.Distance = function(b, c) {
        var d = b.x - c.x,
            e = b.y - c.y;
        return Math.sqrt(d * d + e * e)
    };
    d.DistanceSquared = function(b, c) {
        var d = b.x - c.x,
            e = b.y - c.y;
        return d * d + e * e
    };
    d.MulFV = function(b, c) {
        void 0 === b && (b = 0);
        return new j(b * c.x, b * c.y)
    };
    d.AddMM = function(c, e) {
        return b.FromVV(d.AddVV(c.col1, e.col1), d.AddVV(c.col2, e.col2))
    };
    d.MulMM = function(c, e) {
        return b.FromVV(d.MulMV(c, e.col1), d.MulMV(c, e.col2))
    };
    d.MulTMM = function(c,
        e) {
        var f = new j(d.Dot(c.col1, e.col1), d.Dot(c.col2, e.col1)),
            p = new j(d.Dot(c.col1, e.col2), d.Dot(c.col2, e.col2));
        return b.FromVV(f, p)
    };
    d.Abs = function(b) {
        void 0 === b && (b = 0);
        return 0 < b ? b : -b
    };
    d.AbsV = function(b) {
        return new j(d.Abs(b.x), d.Abs(b.y))
    };
    d.AbsM = function(c) {
        return b.FromVV(d.AbsV(c.col1), d.AbsV(c.col2))
    };
    d.Min = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        return b < c ? b : c
    };
    d.MinV = function(b, c) {
        return new j(d.Min(b.x, c.x), d.Min(b.y, c.y))
    };
    d.Max = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        return b > c ? b : c
    };
    d.MaxV = function(b, c) {
        return new j(d.Max(b.x, c.x), d.Max(b.y, c.y))
    };
    d.Clamp = function(b, c, d) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        return b < c ? c : b > d ? d : b
    };
    d.ClampV = function(b, c, e) {
        return d.MaxV(c, d.MinV(b, e))
    };
    d.Swap = function(b, c) {
        var d = b[0];
        b[0] = c[0];
        c[0] = d
    };
    d.Random = function() {
        return 2 * Math.random() - 1
    };
    d.RandomRange = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        var d = Math.random();
        return (c - b) * d + b
    };
    d.NextPowerOfTwo = function(b) {
        void 0 === b && (b = 0);
        b |= b >> 1 & 2147483647;
        b |=
            b >> 2 & 1073741823;
        b |= b >> 4 & 268435455;
        b |= b >> 8 & 16777215;
        return (b | b >> 16 & 65535) + 1
    };
    d.IsPowerOfTwo = function(b) {
        void 0 === b && (b = 0);
        return 0 < b && 0 == (b & b - 1)
    };
    Box2D.postDefs.push(function() {
        Box2D.Common.Math.b2Math.b2Vec2_zero = new j(0, 0);
        Box2D.Common.Math.b2Math.b2Mat22_identity = b.FromVV(new j(1, 0), new j(0, 1));
        Box2D.Common.Math.b2Math.b2Transform_identity = new f(d.b2Vec2_zero, d.b2Mat22_identity)
    });
    e.b2Sweep = function() {
        this.localCenter = new j;
        this.c0 = new j;
        this.c = new j
    };
    e.prototype.Set = function(b) {
        this.localCenter.SetV(b.localCenter);
        this.c0.SetV(b.c0);
        this.c.SetV(b.c);
        this.a0 = b.a0;
        this.a = b.a;
        this.t0 = b.t0
    };
    e.prototype.Copy = function() {
        var b = new e;
        b.localCenter.SetV(this.localCenter);
        b.c0.SetV(this.c0);
        b.c.SetV(this.c);
        b.a0 = this.a0;
        b.a = this.a;
        b.t0 = this.t0;
        return b
    };
    e.prototype.GetTransform = function(b, c) {
        void 0 === c && (c = 0);
        b.position.x = (1 - c) * this.c0.x + c * this.c.x;
        b.position.y = (1 - c) * this.c0.y + c * this.c.y;
        b.R.Set((1 - c) * this.a0 + c * this.a);
        var d = b.R;
        b.position.x -= d.col1.x * this.localCenter.x + d.col2.x * this.localCenter.y;
        b.position.y -= d.col1.y *
            this.localCenter.x + d.col2.y * this.localCenter.y
    };
    e.prototype.Advance = function(b) {
        void 0 === b && (b = 0);
        if (this.t0 < b && 1 - this.t0 > Number.MIN_VALUE) {
            var c = (b - this.t0) / (1 - this.t0);
            this.c0.x = (1 - c) * this.c0.x + c * this.c.x;
            this.c0.y = (1 - c) * this.c0.y + c * this.c.y;
            this.a0 = (1 - c) * this.a0 + c * this.a;
            this.t0 = b
        }
    };
    f.b2Transform = function() {
        this.position = new j;
        this.R = new b
    };
    f.prototype.b2Transform = function(b, c) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        b && (this.position.SetV(b), this.R.SetM(c))
    };
    f.prototype.Initialize = function(b,
        c) {
        this.position.SetV(b);
        this.R.SetM(c)
    };
    f.prototype.SetIdentity = function() {
        this.position.SetZero();
        this.R.SetIdentity()
    };
    f.prototype.Set = function(b) {
        this.position.SetV(b.position);
        this.R.SetM(b.R)
    };
    f.prototype.GetAngle = function() {
        return Math.atan2(this.R.col1.y, this.R.col1.x)
    };
    j.b2Vec2 = function() {};
    j.prototype.b2Vec2 = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        this.x = b;
        this.y = c
    };
    j.prototype.SetZero = function() {
        this.y = this.x = 0
    };
    j.prototype.Set = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        this.x = b;
        this.y = c
    };
    j.prototype.SetV = function(b) {
        this.x = b.x;
        this.y = b.y
    };
    j.prototype.GetNegative = function() {
        return new j(-this.x, -this.y)
    };
    j.prototype.NegativeSelf = function() {
        this.x = -this.x;
        this.y = -this.y
    };
    j.Make = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        return new j(b, c)
    };
    j.prototype.Copy = function() {
        return new j(this.x, this.y)
    };
    j.prototype.Add = function(b) {
        this.x += b.x;
        this.y += b.y
    };
    j.prototype.Subtract = function(b) {
        this.x -= b.x;
        this.y -= b.y
    };
    j.prototype.Multiply = function(b) {
        void 0 === b && (b = 0);
        this.x *=
            b;
        this.y *= b
    };
    j.prototype.MulM = function(b) {
        var c = this.x;
        this.x = b.col1.x * c + b.col2.x * this.y;
        this.y = b.col1.y * c + b.col2.y * this.y
    };
    j.prototype.MulTM = function(b) {
        var c = d.Dot(this, b.col1);
        this.y = d.Dot(this, b.col2);
        this.x = c
    };
    j.prototype.CrossVF = function(b) {
        void 0 === b && (b = 0);
        var c = this.x;
        this.x = b * this.y;
        this.y = -b * c
    };
    j.prototype.CrossFV = function(b) {
        void 0 === b && (b = 0);
        var c = this.x;
        this.x = -b * this.y;
        this.y = b * c
    };
    j.prototype.MinV = function(b) {
        this.x = this.x < b.x ? this.x : b.x;
        this.y = this.y < b.y ? this.y : b.y
    };
    j.prototype.MaxV =
        function(b) {
            this.x = this.x > b.x ? this.x : b.x;
            this.y = this.y > b.y ? this.y : b.y
        };
    j.prototype.Abs = function() {
        0 > this.x && (this.x = -this.x);
        0 > this.y && (this.y = -this.y)
    };
    j.prototype.Length = function() {
        return Math.sqrt(this.x * this.x + this.y * this.y)
    };
    j.prototype.LengthSquared = function() {
        return this.x * this.x + this.y * this.y
    };
    j.prototype.Normalize = function() {
        var b = Math.sqrt(this.x * this.x + this.y * this.y);
        if (b < Number.MIN_VALUE) return 0;
        var c = 1 / b;
        this.x *= c;
        this.y *= c;
        return b
    };
    j.prototype.IsValid = function() {
        return d.IsValid(this.x) &&
            d.IsValid(this.y)
    };
    p.b2Vec3 = function() {};
    p.prototype.b2Vec3 = function(b, c, d) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        this.x = b;
        this.y = c;
        this.z = d
    };
    p.prototype.SetZero = function() {
        this.x = this.y = this.z = 0
    };
    p.prototype.Set = function(b, c, d) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        this.x = b;
        this.y = c;
        this.z = d
    };
    p.prototype.SetV = function(b) {
        this.x = b.x;
        this.y = b.y;
        this.z = b.z
    };
    p.prototype.GetNegative = function() {
        return new p(-this.x, -this.y, -this.z)
    };
    p.prototype.NegativeSelf = function() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z
    };
    p.prototype.Copy = function() {
        return new p(this.x, this.y, this.z)
    };
    p.prototype.Add = function(b) {
        this.x += b.x;
        this.y += b.y;
        this.z += b.z
    };
    p.prototype.Subtract = function(b) {
        this.x -= b.x;
        this.y -= b.y;
        this.z -= b.z
    };
    p.prototype.Multiply = function(b) {
        void 0 === b && (b = 0);
        this.x *= b;
        this.y *= b;
        this.z *= b
    }
})();
(function() {
    var b = Box2D.Common.Math.b2Math,
        c = Box2D.Common.Math.b2Sweep,
        d = Box2D.Common.Math.b2Transform,
        e = Box2D.Common.Math.b2Vec2,
        f = Box2D.Common.b2Color,
        j = Box2D.Common.b2Settings,
        p = Box2D.Collision.b2AABB,
        m = Box2D.Collision.b2ContactPoint,
        s = Box2D.Collision.b2DynamicTreeBroadPhase,
        v = Box2D.Collision.b2RayCastInput,
        A = Box2D.Collision.b2RayCastOutput,
        B = Box2D.Collision.Shapes.b2CircleShape,
        z = Box2D.Collision.Shapes.b2EdgeShape,
        x = Box2D.Collision.Shapes.b2MassData,
        I = Box2D.Collision.Shapes.b2PolygonShape,
        E = Box2D.Collision.Shapes.b2Shape,
        t = Box2D.Dynamics.b2Body,
        H = Box2D.Dynamics.b2BodyDef,
        L = Box2D.Dynamics.b2ContactFilter,
        Q = Box2D.Dynamics.b2ContactImpulse,
        M = Box2D.Dynamics.b2ContactListener,
        P = Box2D.Dynamics.b2ContactManager,
        C = Box2D.Dynamics.b2DebugDraw,
        S = Box2D.Dynamics.b2DestructionListener,
        N = Box2D.Dynamics.b2FilterData,
        O = Box2D.Dynamics.b2Fixture,
        Z = Box2D.Dynamics.b2FixtureDef,
        T = Box2D.Dynamics.b2Island,
        n = Box2D.Dynamics.b2TimeStep,
        y = Box2D.Dynamics.b2World,
        F = Box2D.Dynamics.Contacts.b2Contact,
        u = Box2D.Dynamics.Contacts.b2ContactFactory,
        G =
        Box2D.Dynamics.Contacts.b2ContactSolver,
        J = Box2D.Dynamics.Joints.b2Joint,
        W = Box2D.Dynamics.Joints.b2PulleyJoint;
    t.b2Body = function() {
        this.m_xf = new d;
        this.m_sweep = new c;
        this.m_linearVelocity = new e;
        this.m_force = new e
    };
    t.prototype.connectEdges = function(c, d, e) {
        void 0 === e && (e = 0);
        var f = Math.atan2(d.GetDirectionVector().y, d.GetDirectionVector().x);
        e = b.MulFV(Math.tan(0.5 * (f - e)), d.GetDirectionVector());
        e = b.SubtractVV(e, d.GetNormalVector());
        e = b.MulFV(j.b2_toiSlop, e);
        e = b.AddVV(e, d.GetVertex1());
        var n = b.AddVV(c.GetDirectionVector(),
            d.GetDirectionVector());
        n.Normalize();
        var u = 0 < b.Dot(c.GetDirectionVector(), d.GetNormalVector());
        c.SetNextEdge(d, e, n, u);
        d.SetPrevEdge(c, e, n, u);
        return f
    };
    t.prototype.CreateFixture = function(b) {
        if (!0 == this.m_world.IsLocked()) return null;
        var c = new O;
        c.Create(this, this.m_xf, b);
        this.m_flags & t.e_activeFlag && c.CreateProxy(this.m_world.m_contactManager.m_broadPhase, this.m_xf);
        c.m_next = this.m_fixtureList;
        this.m_fixtureList = c;
        ++this.m_fixtureCount;
        c.m_body = this;
        0 < c.m_density && this.ResetMassData();
        this.m_world.m_flags |=
            y.e_newFixture;
        return c
    };
    t.prototype.CreateFixture2 = function(b, c) {
        void 0 === c && (c = 0);
        var d = new Z;
        d.shape = b;
        d.density = c;
        return this.CreateFixture(d)
    };
    t.prototype.DestroyFixture = function(b) {
        if (!0 != this.m_world.IsLocked()) {
            for (var c = this.m_fixtureList, d = null; null != c;) {
                if (c == b) {
                    d ? d.m_next = b.m_next : this.m_fixtureList = b.m_next;
                    break
                }
                d = c;
                c = c.m_next
            }
            for (c = this.m_contactList; c;) {
                var d = c.contact,
                    c = c.next,
                    e = d.GetFixtureA(),
                    f = d.GetFixtureB();
                (b == e || b == f) && this.m_world.m_contactManager.Destroy(d)
            }
            this.m_flags &
                t.e_activeFlag && b.DestroyProxy(this.m_world.m_contactManager.m_broadPhase);
            b.Destroy();
            b.m_body = null;
            b.m_next = null;
            --this.m_fixtureCount;
            this.ResetMassData()
        }
    };
    t.prototype.SetPositionAndAngle = function(b, c) {
        void 0 === c && (c = 0);
        var d;
        if (!0 != this.m_world.IsLocked()) {
            this.m_xf.R.Set(c);
            this.m_xf.position.SetV(b);
            d = this.m_xf.R;
            var e = this.m_sweep.localCenter;
            this.m_sweep.c.x = d.col1.x * e.x + d.col2.x * e.y;
            this.m_sweep.c.y = d.col1.y * e.x + d.col2.y * e.y;
            this.m_sweep.c.x += this.m_xf.position.x;
            this.m_sweep.c.y += this.m_xf.position.y;
            this.m_sweep.c0.SetV(this.m_sweep.c);
            this.m_sweep.a0 = this.m_sweep.a = c;
            e = this.m_world.m_contactManager.m_broadPhase;
            for (d = this.m_fixtureList; d; d = d.m_next) d.Synchronize(e, this.m_xf, this.m_xf);
            this.m_world.m_contactManager.FindNewContacts()
        }
    };
    t.prototype.SetTransform = function(b) {
        this.SetPositionAndAngle(b.position, b.GetAngle())
    };
    t.prototype.GetTransform = function() {
        return this.m_xf
    };
    t.prototype.GetPosition = function() {
        return this.m_xf.position
    };
    t.prototype.SetPosition = function(b) {
        this.SetPositionAndAngle(b,
            this.GetAngle())
    };
    t.prototype.GetAngle = function() {
        return this.m_sweep.a
    };
    t.prototype.SetAngle = function(b) {
        void 0 === b && (b = 0);
        this.SetPositionAndAngle(this.GetPosition(), b)
    };
    t.prototype.GetWorldCenter = function() {
        return this.m_sweep.c
    };
    t.prototype.GetLocalCenter = function() {
        return this.m_sweep.localCenter
    };
    t.prototype.SetLinearVelocity = function(b) {
        this.m_type != t.b2_staticBody && this.m_linearVelocity.SetV(b)
    };
    t.prototype.GetLinearVelocity = function() {
        return this.m_linearVelocity
    };
    t.prototype.SetAngularVelocity =
        function(b) {
            void 0 === b && (b = 0);
            this.m_type != t.b2_staticBody && (this.m_angularVelocity = b)
        };
    t.prototype.GetAngularVelocity = function() {
        return this.m_angularVelocity
    };
    t.prototype.GetDefinition = function() {
        var b = new H;
        b.type = this.GetType();
        b.allowSleep = (this.m_flags & t.e_allowSleepFlag) == t.e_allowSleepFlag;
        b.angle = this.GetAngle();
        b.angularDamping = this.m_angularDamping;
        b.angularVelocity = this.m_angularVelocity;
        b.fixedRotation = (this.m_flags & t.e_fixedRotationFlag) == t.e_fixedRotationFlag;
        b.bullet = (this.m_flags &
            t.e_bulletFlag) == t.e_bulletFlag;
        b.awake = (this.m_flags & t.e_awakeFlag) == t.e_awakeFlag;
        b.linearDamping = this.m_linearDamping;
        b.linearVelocity.SetV(this.GetLinearVelocity());
        b.position = this.GetPosition();
        b.userData = this.GetUserData();
        return b
    };
    t.prototype.ApplyForce = function(b, c) {
        this.m_type == t.b2_dynamicBody && (!1 == this.IsAwake() && this.SetAwake(!0), this.m_force.x += b.x, this.m_force.y += b.y, this.m_torque += (c.x - this.m_sweep.c.x) * b.y - (c.y - this.m_sweep.c.y) * b.x)
    };
    t.prototype.ApplyTorque = function(b) {
        void 0 ===
            b && (b = 0);
        this.m_type == t.b2_dynamicBody && (!1 == this.IsAwake() && this.SetAwake(!0), this.m_torque += b)
    };
    t.prototype.ApplyImpulse = function(b, c) {
        this.m_type == t.b2_dynamicBody && (!1 == this.IsAwake() && this.SetAwake(!0), this.m_linearVelocity.x += this.m_invMass * b.x, this.m_linearVelocity.y += this.m_invMass * b.y, this.m_angularVelocity += this.m_invI * ((c.x - this.m_sweep.c.x) * b.y - (c.y - this.m_sweep.c.y) * b.x))
    };
    t.prototype.Split = function(c) {
        for (var d = this.GetLinearVelocity().Copy(), e = this.GetAngularVelocity(), f = this.GetWorldCenter(),
            n = this.m_world.CreateBody(this.GetDefinition()), j, u = this.m_fixtureList; u;)
            if (c(u)) {
                var y = u.m_next;
                j ? j.m_next = y : this.m_fixtureList = y;
                this.m_fixtureCount--;
                u.m_next = n.m_fixtureList;
                n.m_fixtureList = u;
                n.m_fixtureCount++;
                u.m_body = n;
                u = y
            } else j = u, u = u.m_next;
        this.ResetMassData();
        n.ResetMassData();
        j = this.GetWorldCenter();
        c = n.GetWorldCenter();
        j = b.AddVV(d, b.CrossFV(e, b.SubtractVV(j, f)));
        d = b.AddVV(d, b.CrossFV(e, b.SubtractVV(c, f)));
        this.SetLinearVelocity(j);
        n.SetLinearVelocity(d);
        this.SetAngularVelocity(e);
        n.SetAngularVelocity(e);
        this.SynchronizeFixtures();
        n.SynchronizeFixtures();
        return n
    };
    t.prototype.Merge = function(b) {
        var c;
        for (c = b.m_fixtureList; c;) {
            var d = c.m_next;
            b.m_fixtureCount--;
            c.m_next = this.m_fixtureList;
            this.m_fixtureList = c;
            this.m_fixtureCount++;
            c.m_body = f;
            c = d
        }
        e.m_fixtureCount = 0;
        var e = this,
            f = b;
        e.GetWorldCenter();
        f.GetWorldCenter();
        e.GetLinearVelocity().Copy();
        f.GetLinearVelocity().Copy();
        e.GetAngularVelocity();
        f.GetAngularVelocity();
        e.ResetMassData();
        this.SynchronizeFixtures()
    };
    t.prototype.GetMass = function() {
        return this.m_mass
    };
    t.prototype.GetInertia = function() {
        return this.m_I
    };
    t.prototype.GetMassData = function(b) {
        b.mass = this.m_mass;
        b.I = this.m_I;
        b.center.SetV(this.m_sweep.localCenter)
    };
    t.prototype.SetMassData = function(c) {
        j.b2Assert(!1 == this.m_world.IsLocked());
        if (!0 != this.m_world.IsLocked() && this.m_type == t.b2_dynamicBody) {
            this.m_invI = this.m_I = this.m_invMass = 0;
            this.m_mass = c.mass;
            0 >= this.m_mass && (this.m_mass = 1);
            this.m_invMass = 1 / this.m_mass;
            0 < c.I && 0 == (this.m_flags & t.e_fixedRotationFlag) && (this.m_I = c.I - this.m_mass * (c.center.x *
                c.center.x + c.center.y * c.center.y), this.m_invI = 1 / this.m_I);
            var d = this.m_sweep.c.Copy();
            this.m_sweep.localCenter.SetV(c.center);
            this.m_sweep.c0.SetV(b.MulX(this.m_xf, this.m_sweep.localCenter));
            this.m_sweep.c.SetV(this.m_sweep.c0);
            this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - d.y);
            this.m_linearVelocity.y += this.m_angularVelocity * +(this.m_sweep.c.x - d.x)
        }
    };
    t.prototype.ResetMassData = function() {
        this.m_invI = this.m_I = this.m_invMass = this.m_mass = 0;
        this.m_sweep.localCenter.SetZero();
        if (!(this.m_type ==
            t.b2_staticBody || this.m_type == t.b2_kinematicBody)) {
            for (var c = e.Make(0, 0), d = this.m_fixtureList; d; d = d.m_next)
                if (0 != d.m_density) {
                    var f = d.GetMassData();
                    this.m_mass += f.mass;
                    c.x += f.center.x * f.mass;
                    c.y += f.center.y * f.mass;
                    this.m_I += f.I
                }
            0 < this.m_mass ? (this.m_invMass = 1 / this.m_mass, c.x *= this.m_invMass, c.y *= this.m_invMass) : this.m_invMass = this.m_mass = 1;
            0 < this.m_I && 0 == (this.m_flags & t.e_fixedRotationFlag) ? (this.m_I -= this.m_mass * (c.x * c.x + c.y * c.y), this.m_I *= this.m_inertiaScale, j.b2Assert(0 < this.m_I), this.m_invI = 1 /
                this.m_I) : this.m_invI = this.m_I = 0;
            d = this.m_sweep.c.Copy();
            this.m_sweep.localCenter.SetV(c);
            this.m_sweep.c0.SetV(b.MulX(this.m_xf, this.m_sweep.localCenter));
            this.m_sweep.c.SetV(this.m_sweep.c0);
            this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - d.y);
            this.m_linearVelocity.y += this.m_angularVelocity * +(this.m_sweep.c.x - d.x)
        }
    };
    t.prototype.GetWorldPoint = function(b) {
        var c = this.m_xf.R;
        b = new e(c.col1.x * b.x + c.col2.x * b.y, c.col1.y * b.x + c.col2.y * b.y);
        b.x += this.m_xf.position.x;
        b.y += this.m_xf.position.y;
        return b
    };
    t.prototype.GetWorldVector = function(c) {
        return b.MulMV(this.m_xf.R, c)
    };
    t.prototype.GetLocalPoint = function(c) {
        return b.MulXT(this.m_xf, c)
    };
    t.prototype.GetLocalVector = function(c) {
        return b.MulTMV(this.m_xf.R, c)
    };
    t.prototype.GetLinearVelocityFromWorldPoint = function(b) {
        return new e(this.m_linearVelocity.x - this.m_angularVelocity * (b.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (b.x - this.m_sweep.c.x))
    };
    t.prototype.GetLinearVelocityFromLocalPoint = function(b) {
        var c = this.m_xf.R;
        b = new e(c.col1.x * b.x + c.col2.x * b.y, c.col1.y * b.x + c.col2.y * b.y);
        b.x += this.m_xf.position.x;
        b.y += this.m_xf.position.y;
        return new e(this.m_linearVelocity.x - this.m_angularVelocity * (b.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (b.x - this.m_sweep.c.x))
    };
    t.prototype.GetLinearDamping = function() {
        return this.m_linearDamping
    };
    t.prototype.SetLinearDamping = function(b) {
        void 0 === b && (b = 0);
        this.m_linearDamping = b
    };
    t.prototype.GetAngularDamping = function() {
        return this.m_angularDamping
    };
    t.prototype.SetAngularDamping =
        function(b) {
            void 0 === b && (b = 0);
            this.m_angularDamping = b
        };
    t.prototype.SetType = function(b) {
        void 0 === b && (b = 0);
        if (this.m_type != b) {
            this.m_type = b;
            this.ResetMassData();
            this.m_type == t.b2_staticBody && (this.m_linearVelocity.SetZero(), this.m_angularVelocity = 0);
            this.SetAwake(!0);
            this.m_force.SetZero();
            this.m_torque = 0;
            for (b = this.m_contactList; b; b = b.next) b.contact.FlagForFiltering()
        }
    };
    t.prototype.GetType = function() {
        return this.m_type
    };
    t.prototype.SetBullet = function(b) {
        this.m_flags = b ? this.m_flags | t.e_bulletFlag : this.m_flags &
            ~t.e_bulletFlag
    };
    t.prototype.IsBullet = function() {
        return (this.m_flags & t.e_bulletFlag) == t.e_bulletFlag
    };
    t.prototype.SetSleepingAllowed = function(b) {
        b ? this.m_flags |= t.e_allowSleepFlag : (this.m_flags &= ~t.e_allowSleepFlag, this.SetAwake(!0))
    };
    t.prototype.SetAwake = function(b) {
        b ? (this.m_flags |= t.e_awakeFlag, this.m_sleepTime = 0) : (this.m_flags &= ~t.e_awakeFlag, this.m_sleepTime = 0, this.m_linearVelocity.SetZero(), this.m_angularVelocity = 0, this.m_force.SetZero(), this.m_torque = 0)
    };
    t.prototype.IsAwake = function() {
        return (this.m_flags &
            t.e_awakeFlag) == t.e_awakeFlag
    };
    t.prototype.SetFixedRotation = function(b) {
        this.m_flags = b ? this.m_flags | t.e_fixedRotationFlag : this.m_flags & ~t.e_fixedRotationFlag;
        this.ResetMassData()
    };
    t.prototype.IsFixedRotation = function() {
        return (this.m_flags & t.e_fixedRotationFlag) == t.e_fixedRotationFlag
    };
    t.prototype.SetActive = function(b) {
        if (b != this.IsActive()) {
            var c;
            if (b) {
                this.m_flags |= t.e_activeFlag;
                b = this.m_world.m_contactManager.m_broadPhase;
                for (c = this.m_fixtureList; c; c = c.m_next) c.CreateProxy(b, this.m_xf)
            } else {
                this.m_flags &=
                    ~t.e_activeFlag;
                b = this.m_world.m_contactManager.m_broadPhase;
                for (c = this.m_fixtureList; c; c = c.m_next) c.DestroyProxy(b);
                for (b = this.m_contactList; b;) c = b, b = b.next, this.m_world.m_contactManager.Destroy(c.contact);
                this.m_contactList = null
            }
        }
    };
    t.prototype.IsActive = function() {
        return (this.m_flags & t.e_activeFlag) == t.e_activeFlag
    };
    t.prototype.IsSleepingAllowed = function() {
        return (this.m_flags & t.e_allowSleepFlag) == t.e_allowSleepFlag
    };
    t.prototype.GetFixtureList = function() {
        return this.m_fixtureList
    };
    t.prototype.GetJointList =
        function() {
            return this.m_jointList
        };
    t.prototype.GetControllerList = function() {
        return this.m_controllerList
    };
    t.prototype.GetContactList = function() {
        return this.m_contactList
    };
    t.prototype.GetNext = function() {
        return this.m_next
    };
    t.prototype.GetUserData = function() {
        return this.m_userData
    };
    t.prototype.SetUserData = function(b) {
        this.m_userData = b
    };
    t.prototype.GetWorld = function() {
        return this.m_world
    };
    t.prototype.b2Body = function(b, c) {
        this.m_flags = 0;
        b.bullet && (this.m_flags |= t.e_bulletFlag);
        b.fixedRotation && (this.m_flags |=
            t.e_fixedRotationFlag);
        b.allowSleep && (this.m_flags |= t.e_allowSleepFlag);
        b.awake && (this.m_flags |= t.e_awakeFlag);
        b.active && (this.m_flags |= t.e_activeFlag);
        this.m_world = c;
        this.m_xf.position.SetV(b.position);
        this.m_xf.R.Set(b.angle);
        this.m_sweep.localCenter.SetZero();
        this.m_sweep.t0 = 1;
        this.m_sweep.a0 = this.m_sweep.a = b.angle;
        var d = this.m_xf.R,
            e = this.m_sweep.localCenter;
        this.m_sweep.c.x = d.col1.x * e.x + d.col2.x * e.y;
        this.m_sweep.c.y = d.col1.y * e.x + d.col2.y * e.y;
        this.m_sweep.c.x += this.m_xf.position.x;
        this.m_sweep.c.y +=
            this.m_xf.position.y;
        this.m_sweep.c0.SetV(this.m_sweep.c);
        this.m_contactList = this.m_controllerList = this.m_jointList = null;
        this.m_controllerCount = 0;
        this.m_next = this.m_prev = null;
        this.m_linearVelocity.SetV(b.linearVelocity);
        this.m_angularVelocity = b.angularVelocity;
        this.m_linearDamping = b.linearDamping;
        this.m_angularDamping = b.angularDamping;
        this.m_force.Set(0, 0);
        this.m_sleepTime = this.m_torque = 0;
        this.m_type = b.type;
        this.m_invMass = this.m_type == t.b2_dynamicBody ? this.m_mass = 1 : this.m_mass = 0;
        this.m_invI = this.m_I =
            0;
        this.m_inertiaScale = b.inertiaScale;
        this.m_userData = b.userData;
        this.m_fixtureList = null;
        this.m_fixtureCount = 0
    };
    t.prototype.SynchronizeFixtures = function() {
        var b = t.s_xf1;
        b.R.Set(this.m_sweep.a0);
        var c = b.R,
            d = this.m_sweep.localCenter;
        b.position.x = this.m_sweep.c0.x - (c.col1.x * d.x + c.col2.x * d.y);
        b.position.y = this.m_sweep.c0.y - (c.col1.y * d.x + c.col2.y * d.y);
        d = this.m_world.m_contactManager.m_broadPhase;
        for (c = this.m_fixtureList; c; c = c.m_next) c.Synchronize(d, b, this.m_xf)
    };
    t.prototype.SynchronizeTransform = function() {
        this.m_xf.R.Set(this.m_sweep.a);
        var b = this.m_xf.R,
            c = this.m_sweep.localCenter;
        this.m_xf.position.x = this.m_sweep.c.x - (b.col1.x * c.x + b.col2.x * c.y);
        this.m_xf.position.y = this.m_sweep.c.y - (b.col1.y * c.x + b.col2.y * c.y)
    };
    t.prototype.ShouldCollide = function(b) {
        if (this.m_type != t.b2_dynamicBody && b.m_type != t.b2_dynamicBody) return !1;
        for (var c = this.m_jointList; c; c = c.next)
            if (c.other == b && !1 == c.joint.m_collideConnected) return !1;
        return !0
    };
    t.prototype.Advance = function(b) {
        void 0 === b && (b = 0);
        this.m_sweep.Advance(b);
        this.m_sweep.c.SetV(this.m_sweep.c0);
        this.m_sweep.a =
            this.m_sweep.a0;
        this.SynchronizeTransform()
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.b2Body.s_xf1 = new d;
        Box2D.Dynamics.b2Body.e_islandFlag = 1;
        Box2D.Dynamics.b2Body.e_awakeFlag = 2;
        Box2D.Dynamics.b2Body.e_allowSleepFlag = 4;
        Box2D.Dynamics.b2Body.e_bulletFlag = 8;
        Box2D.Dynamics.b2Body.e_fixedRotationFlag = 16;
        Box2D.Dynamics.b2Body.e_activeFlag = 32;
        Box2D.Dynamics.b2Body.b2_staticBody = 0;
        Box2D.Dynamics.b2Body.b2_kinematicBody = 1;
        Box2D.Dynamics.b2Body.b2_dynamicBody = 2
    });
    H.b2BodyDef = function() {
        this.position =
            new e;
        this.linearVelocity = new e
    };
    H.prototype.b2BodyDef = function() {
        this.userData = null;
        this.position.Set(0, 0);
        this.angle = 0;
        this.linearVelocity.Set(0, 0);
        this.angularDamping = this.linearDamping = this.angularVelocity = 0;
        this.awake = this.allowSleep = !0;
        this.bullet = this.fixedRotation = !1;
        this.type = t.b2_staticBody;
        this.active = !0;
        this.inertiaScale = 1
    };
    L.b2ContactFilter = function() {};
    L.prototype.ShouldCollide = function(b, c) {
        var d = b.GetFilterData(),
            e = c.GetFilterData();
        return d.groupIndex == e.groupIndex && 0 != d.groupIndex ?
            0 < d.groupIndex : 0 != (d.maskBits & e.categoryBits) && 0 != (d.categoryBits & e.maskBits)
    };
    L.prototype.RayCollide = function(b, c) {
        return !b ? !0 : this.ShouldCollide(b instanceof O ? b : null, c)
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = new L
    });
    Q.b2ContactImpulse = function() {
        this.normalImpulses = new Vector_a2j_Number(j.b2_maxManifoldPoints);
        this.tangentImpulses = new Vector_a2j_Number(j.b2_maxManifoldPoints)
    };
    M.b2ContactListener = function() {};
    M.prototype.BeginContact = function() {};
    M.prototype.EndContact =
        function() {};
    M.prototype.PreSolve = function() {};
    M.prototype.PostSolve = function() {};
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.b2ContactListener.b2_defaultListener = new M
    });
    P.b2ContactManager = function() {};
    P.prototype.b2ContactManager = function() {
        this.m_world = null;
        this.m_contactCount = 0;
        this.m_contactFilter = L.b2_defaultFilter;
        this.m_contactListener = M.b2_defaultListener;
        this.m_contactFactory = new u(this.m_allocator);
        this.m_broadPhase = new s
    };
    P.prototype.AddPair = function(b, c) {
        var d = b instanceof O ? b : null,
            e = c instanceof O ? c : null,
            f = d.GetBody(),
            n = e.GetBody();
        if (f != n) {
            for (var j = n.GetContactList(); j;) {
                if (j.other == f) {
                    var u = j.contact.GetFixtureA(),
                        y = j.contact.GetFixtureB();
                    if (u == d && y == e || u == e && y == d) return
                }
                j = j.next
            }!1 != n.ShouldCollide(f) && !1 != this.m_contactFilter.ShouldCollide(d, e) && (j = this.m_contactFactory.Create(d, e), d = j.GetFixtureA(), e = j.GetFixtureB(), f = d.m_body, n = e.m_body, j.m_prev = null, j.m_next = this.m_world.m_contactList, null != this.m_world.m_contactList && (this.m_world.m_contactList.m_prev = j), this.m_world.m_contactList =
                j, j.m_nodeA.contact = j, j.m_nodeA.other = n, j.m_nodeA.prev = null, j.m_nodeA.next = f.m_contactList, null != f.m_contactList && (f.m_contactList.prev = j.m_nodeA), f.m_contactList = j.m_nodeA, j.m_nodeB.contact = j, j.m_nodeB.other = f, j.m_nodeB.prev = null, j.m_nodeB.next = n.m_contactList, null != n.m_contactList && (n.m_contactList.prev = j.m_nodeB), n.m_contactList = j.m_nodeB, ++this.m_world.m_contactCount)
        }
    };
    P.prototype.FindNewContacts = function() {
        this.m_broadPhase.UpdatePairs(Box2D.generateCallback(this, this.AddPair))
    };
    P.prototype.Destroy =
        function(b) {
            var c = b.GetFixtureA(),
                d = b.GetFixtureB(),
                c = c.GetBody(),
                d = d.GetBody();
            b.IsTouching() && this.m_contactListener.EndContact(b);
            b.m_prev && (b.m_prev.m_next = b.m_next);
            b.m_next && (b.m_next.m_prev = b.m_prev);
            b == this.m_world.m_contactList && (this.m_world.m_contactList = b.m_next);
            b.m_nodeA.prev && (b.m_nodeA.prev.next = b.m_nodeA.next);
            b.m_nodeA.next && (b.m_nodeA.next.prev = b.m_nodeA.prev);
            b.m_nodeA == c.m_contactList && (c.m_contactList = b.m_nodeA.next);
            b.m_nodeB.prev && (b.m_nodeB.prev.next = b.m_nodeB.next);
            b.m_nodeB.next &&
                (b.m_nodeB.next.prev = b.m_nodeB.prev);
            b.m_nodeB == d.m_contactList && (d.m_contactList = b.m_nodeB.next);
            this.m_contactFactory.Destroy(b);
            --this.m_contactCount
        };
    P.prototype.Collide = function() {
        for (var b = this.m_world.m_contactList; b;) {
            var c = b.GetFixtureA(),
                d = b.GetFixtureB(),
                e = c.GetBody(),
                f = d.GetBody();
            if (!1 == e.IsAwake() && !1 == f.IsAwake()) b = b.GetNext();
            else {
                if (b.m_flags & F.e_filterFlag) {
                    if (!1 == f.ShouldCollide(e)) {
                        c = b;
                        b = c.GetNext();
                        this.Destroy(c);
                        continue
                    }
                    if (!1 == this.m_contactFilter.ShouldCollide(c, d)) {
                        c = b;
                        b =
                            c.GetNext();
                        this.Destroy(c);
                        continue
                    }
                    b.m_flags &= ~F.e_filterFlag
                }!1 == this.m_broadPhase.TestOverlap(c.m_proxy, d.m_proxy) ? (c = b, b = c.GetNext(), this.Destroy(c)) : (b.Update(this.m_contactListener), b = b.GetNext())
            }
        }
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.b2ContactManager.s_evalCP = new m
    });
    C.b2DebugDraw = function() {};
    C.prototype.b2DebugDraw = function() {};
    C.prototype.SetFlags = function() {};
    C.prototype.GetFlags = function() {};
    C.prototype.AppendFlags = function() {};
    C.prototype.ClearFlags = function() {};
    C.prototype.SetSprite =
        function() {};
    C.prototype.GetSprite = function() {};
    C.prototype.SetDrawScale = function() {};
    C.prototype.GetDrawScale = function() {};
    C.prototype.SetLineThickness = function() {};
    C.prototype.GetLineThickness = function() {};
    C.prototype.SetAlpha = function() {};
    C.prototype.GetAlpha = function() {};
    C.prototype.SetFillAlpha = function() {};
    C.prototype.GetFillAlpha = function() {};
    C.prototype.SetXFormScale = function() {};
    C.prototype.GetXFormScale = function() {};
    C.prototype.DrawPolygon = function() {};
    C.prototype.DrawSolidPolygon = function() {};
    C.prototype.DrawCircle = function() {};
    C.prototype.DrawSolidCircle = function() {};
    C.prototype.DrawSegment = function() {};
    C.prototype.DrawTransform = function() {};
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.b2DebugDraw.e_shapeBit = 1;
        Box2D.Dynamics.b2DebugDraw.e_jointBit = 2;
        Box2D.Dynamics.b2DebugDraw.e_aabbBit = 4;
        Box2D.Dynamics.b2DebugDraw.e_pairBit = 8;
        Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit = 16;
        Box2D.Dynamics.b2DebugDraw.e_controllerBit = 32
    });
    S.b2DestructionListener = function() {};
    S.prototype.SayGoodbyeJoint =
        function() {};
    S.prototype.SayGoodbyeFixture = function() {};
    N.b2FilterData = function() {
        this.categoryBits = 1;
        this.maskBits = 65535;
        this.groupIndex = 0
    };
    N.prototype.Copy = function() {
        var b = new N;
        b.categoryBits = this.categoryBits;
        b.maskBits = this.maskBits;
        b.groupIndex = this.groupIndex;
        return b
    };
    O.b2Fixture = function() {
        this.m_filter = new N
    };
    O.prototype.GetType = function() {
        return this.m_shape.GetType()
    };
    O.prototype.GetShape = function() {
        return this.m_shape
    };
    O.prototype.SetSensor = function(b) {
        if (this.m_isSensor != b && (this.m_isSensor =
            b, null != this.m_body))
            for (b = this.m_body.GetContactList(); b;) {
                var c = b.contact,
                    d = c.GetFixtureA(),
                    e = c.GetFixtureB();
                if (d == this || e == this) c.SetSensor(d.IsSensor() || e.IsSensor());
                b = b.next
            }
    };
    O.prototype.IsSensor = function() {
        return this.m_isSensor
    };
    O.prototype.SetFilterData = function(b) {
        this.m_filter = b.Copy();
        if (!this.m_body)
            for (b = this.m_body.GetContactList(); b;) {
                var c = b.contact,
                    d = c.GetFixtureA(),
                    e = c.GetFixtureB();
                (d == this || e == this) && c.FlagForFiltering();
                b = b.next
            }
    };
    O.prototype.GetFilterData = function() {
        return this.m_filter.Copy()
    };
    O.prototype.GetBody = function() {
        return this.m_body
    };
    O.prototype.GetNext = function() {
        return this.m_next
    };
    O.prototype.GetUserData = function() {
        return this.m_userData
    };
    O.prototype.SetUserData = function(b) {
        this.m_userData = b
    };
    O.prototype.TestPoint = function(b) {
        return this.m_shape.TestPoint(this.m_body.GetTransform(), b)
    };
    O.prototype.RayCast = function(b, c) {
        return this.m_shape.RayCast(b, c, this.m_body.GetTransform())
    };
    O.prototype.GetMassData = function(b) {
        void 0 === b && (b = null);
        null == b && (b = new x);
        this.m_shape.ComputeMass(b,
            this.m_density);
        return b
    };
    O.prototype.SetDensity = function(b) {
        void 0 === b && (b = 0);
        this.m_density = b
    };
    O.prototype.GetDensity = function() {
        return this.m_density
    };
    O.prototype.GetFriction = function() {
        return this.m_friction
    };
    O.prototype.SetFriction = function(b) {
        void 0 === b && (b = 0);
        this.m_friction = b
    };
    O.prototype.GetRestitution = function() {
        return this.m_restitution
    };
    O.prototype.SetRestitution = function(b) {
        void 0 === b && (b = 0);
        this.m_restitution = b
    };
    O.prototype.GetAABB = function() {
        return this.m_aabb
    };
    O.prototype.b2Fixture =
        function() {
            this.m_aabb = new p;
            this.m_shape = this.m_next = this.m_body = this.m_userData = null;
            this.m_restitution = this.m_friction = this.m_density = 0
        };
    O.prototype.Create = function(b, c, d) {
        this.m_userData = d.userData;
        this.m_friction = d.friction;
        this.m_restitution = d.restitution;
        this.m_body = b;
        this.m_next = null;
        this.m_filter = d.filter.Copy();
        this.m_isSensor = d.isSensor;
        this.m_shape = d.shape.Copy();
        this.m_density = d.density
    };
    O.prototype.Destroy = function() {
        this.m_shape = null
    };
    O.prototype.CreateProxy = function(b, c) {
        this.m_shape.ComputeAABB(this.m_aabb,
            c);
        this.m_proxy = b.CreateProxy(this.m_aabb, this)
    };
    O.prototype.DestroyProxy = function(b) {
        null != this.m_proxy && (b.DestroyProxy(this.m_proxy), this.m_proxy = null)
    };
    O.prototype.Synchronize = function(c, d, e) {
        if (this.m_proxy) {
            var f = new p,
                n = new p;
            this.m_shape.ComputeAABB(f, d);
            this.m_shape.ComputeAABB(n, e);
            this.m_aabb.Combine(f, n);
            d = b.SubtractVV(e.position, d.position);
            c.MoveProxy(this.m_proxy, this.m_aabb, d)
        }
    };
    Z.b2FixtureDef = function() {
        this.filter = new N
    };
    Z.prototype.b2FixtureDef = function() {
        this.userData = this.shape =
            null;
        this.friction = 0.2;
        this.density = this.restitution = 0;
        this.filter.categoryBits = 1;
        this.filter.maskBits = 65535;
        this.filter.groupIndex = 0;
        this.isSensor = !1
    };
    T.b2Island = function() {};
    T.prototype.b2Island = function() {
        this.m_bodies = new Vector;
        this.m_contacts = new Vector;
        this.m_joints = new Vector
    };
    T.prototype.Initialize = function(b, c, d, e, f, n) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        var j = 0;
        this.m_bodyCapacity = b;
        this.m_contactCapacity = c;
        this.m_jointCapacity = d;
        this.m_jointCount = this.m_contactCount =
            this.m_bodyCount = 0;
        this.m_allocator = e;
        this.m_listener = f;
        this.m_contactSolver = n;
        for (j = this.m_bodies.length; j < b; j++) this.m_bodies[j] = null;
        for (j = this.m_contacts.length; j < c; j++) this.m_contacts[j] = null;
        for (j = this.m_joints.length; j < d; j++) this.m_joints[j] = null
    };
    T.prototype.Clear = function() {
        this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0
    };
    T.prototype.Solve = function(c, d, e) {
        for (var f = 0, n = 0, u, f = 0; f < this.m_bodyCount; ++f) n = this.m_bodies[f], n.GetType() == t.b2_dynamicBody && (n.m_linearVelocity.x += c.dt * (d.x +
            n.m_invMass * n.m_force.x), n.m_linearVelocity.y += c.dt * (d.y + n.m_invMass * n.m_force.y), n.m_angularVelocity += c.dt * n.m_invI * n.m_torque, n.m_linearVelocity.Multiply(b.Clamp(1 - c.dt * n.m_linearDamping, 0, 1)), n.m_angularVelocity *= b.Clamp(1 - c.dt * n.m_angularDamping, 0, 1));
        this.m_contactSolver.Initialize(c, this.m_contacts, this.m_contactCount, this.m_allocator);
        d = this.m_contactSolver;
        d.InitVelocityConstraints(c);
        for (f = 0; f < this.m_jointCount; ++f) u = this.m_joints[f], u.InitVelocityConstraints(c);
        for (f = 0; f < c.velocityIterations; ++f) {
            for (n =
                0; n < this.m_jointCount; ++n) u = this.m_joints[n], u.SolveVelocityConstraints(c);
            d.SolveVelocityConstraints()
        }
        for (f = 0; f < this.m_jointCount; ++f) u = this.m_joints[f], u.FinalizeVelocityConstraints();
        d.FinalizeVelocityConstraints();
        for (f = 0; f < this.m_bodyCount; ++f)
            if (n = this.m_bodies[f], n.GetType() != t.b2_staticBody) {
                var y = c.dt * n.m_linearVelocity.x,
                    m = c.dt * n.m_linearVelocity.y;
                y * y + m * m > j.b2_maxTranslationSquared && (n.m_linearVelocity.Normalize(), n.m_linearVelocity.x *= j.b2_maxTranslation * c.inv_dt, n.m_linearVelocity.y *=
                    j.b2_maxTranslation * c.inv_dt);
                y = c.dt * n.m_angularVelocity;
                y * y > j.b2_maxRotationSquared && (n.m_angularVelocity = 0 > n.m_angularVelocity ? -j.b2_maxRotation * c.inv_dt : j.b2_maxRotation * c.inv_dt);
                n.m_sweep.c0.SetV(n.m_sweep.c);
                n.m_sweep.a0 = n.m_sweep.a;
                n.m_sweep.c.x += c.dt * n.m_linearVelocity.x;
                n.m_sweep.c.y += c.dt * n.m_linearVelocity.y;
                n.m_sweep.a += c.dt * n.m_angularVelocity;
                n.SynchronizeTransform()
            }
        for (f = 0; f < c.positionIterations; ++f) {
            y = d.SolvePositionConstraints(j.b2_contactBaumgarte);
            m = !0;
            for (n = 0; n < this.m_jointCount; ++n) u =
                this.m_joints[n], u = u.SolvePositionConstraints(j.b2_contactBaumgarte), m = m && u;
            if (y && m) break
        }
        this.Report(d.m_constraints);
        if (e) {
            e = Number.MAX_VALUE;
            d = j.b2_linearSleepTolerance * j.b2_linearSleepTolerance;
            y = j.b2_angularSleepTolerance * j.b2_angularSleepTolerance;
            for (f = 0; f < this.m_bodyCount; ++f) n = this.m_bodies[f], n.GetType() != t.b2_staticBody && (0 == (n.m_flags & t.e_allowSleepFlag) && (e = n.m_sleepTime = 0), 0 == (n.m_flags & t.e_allowSleepFlag) || n.m_angularVelocity * n.m_angularVelocity > y || b.Dot(n.m_linearVelocity, n.m_linearVelocity) >
                d ? e = n.m_sleepTime = 0 : (n.m_sleepTime += c.dt, e = b.Min(e, n.m_sleepTime)));
            if (e >= j.b2_timeToSleep)
                for (f = 0; f < this.m_bodyCount; ++f) n = this.m_bodies[f], n.SetAwake(!1)
        }
    };
    T.prototype.SolveTOI = function(b) {
        var c = 0,
            d = 0;
        this.m_contactSolver.Initialize(b, this.m_contacts, this.m_contactCount, this.m_allocator);
        for (var e = this.m_contactSolver, c = 0; c < this.m_jointCount; ++c) this.m_joints[c].InitVelocityConstraints(b);
        for (c = 0; c < b.velocityIterations; ++c) {
            e.SolveVelocityConstraints();
            for (d = 0; d < this.m_jointCount; ++d) this.m_joints[d].SolveVelocityConstraints(b)
        }
        for (c =
            0; c < this.m_bodyCount; ++c)
            if (d = this.m_bodies[c], d.GetType() != t.b2_staticBody) {
                var f = b.dt * d.m_linearVelocity.x,
                    n = b.dt * d.m_linearVelocity.y;
                f * f + n * n > j.b2_maxTranslationSquared && (d.m_linearVelocity.Normalize(), d.m_linearVelocity.x *= j.b2_maxTranslation * b.inv_dt, d.m_linearVelocity.y *= j.b2_maxTranslation * b.inv_dt);
                f = b.dt * d.m_angularVelocity;
                f * f > j.b2_maxRotationSquared && (d.m_angularVelocity = 0 > d.m_angularVelocity ? -j.b2_maxRotation * b.inv_dt : j.b2_maxRotation * b.inv_dt);
                d.m_sweep.c0.SetV(d.m_sweep.c);
                d.m_sweep.a0 =
                    d.m_sweep.a;
                d.m_sweep.c.x += b.dt * d.m_linearVelocity.x;
                d.m_sweep.c.y += b.dt * d.m_linearVelocity.y;
                d.m_sweep.a += b.dt * d.m_angularVelocity;
                d.SynchronizeTransform()
            }
        for (c = 0; c < b.positionIterations; ++c) {
            f = e.SolvePositionConstraints(0.75);
            n = !0;
            for (d = 0; d < this.m_jointCount; ++d) var u = this.m_joints[d].SolvePositionConstraints(j.b2_contactBaumgarte),
                n = n && u;
            if (f && n) break
        }
        this.Report(e.m_constraints)
    };
    T.prototype.Report = function(b) {
        if (null != this.m_listener)
            for (var c = 0; c < this.m_contactCount; ++c) {
                for (var d = this.m_contacts[c],
                    e = b[c], f = 0; f < e.pointCount; ++f) T.s_impulse.normalImpulses[f] = e.points[f].normalImpulse, T.s_impulse.tangentImpulses[f] = e.points[f].tangentImpulse;
                this.m_listener.PostSolve(d, T.s_impulse)
            }
    };
    T.prototype.AddBody = function(b) {
        b.m_islandIndex = this.m_bodyCount;
        this.m_bodies[this.m_bodyCount++] = b
    };
    T.prototype.AddContact = function(b) {
        this.m_contacts[this.m_contactCount++] = b
    };
    T.prototype.AddJoint = function(b) {
        this.m_joints[this.m_jointCount++] = b
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.b2Island.s_impulse =
            new Q
    });
    n.b2TimeStep = function() {};
    n.prototype.Set = function(b) {
        this.dt = b.dt;
        this.inv_dt = b.inv_dt;
        this.positionIterations = b.positionIterations;
        this.velocityIterations = b.velocityIterations;
        this.warmStarting = b.warmStarting
    };
    y.b2World = function() {
        this.s_stack = new Vector;
        this.m_contactManager = new P;
        this.m_contactSolver = new G;
        this.m_island = new T
    };
    y.prototype.b2World = function(b, c) {
        this.m_controllerList = this.m_jointList = this.m_contactList = this.m_bodyList = this.m_debugDraw = this.m_destructionListener = null;
        this.m_controllerCount =
            this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0;
        y.m_warmStarting = !0;
        y.m_continuousPhysics = !0;
        this.m_allowSleep = c;
        this.m_gravity = b;
        this.m_inv_dt0 = 0;
        this.m_contactManager.m_world = this;
        this.m_groundBody = this.CreateBody(new H)
    };
    y.prototype.SetDestructionListener = function(b) {
        this.m_destructionListener = b
    };
    y.prototype.SetContactFilter = function(b) {
        this.m_contactManager.m_contactFilter = b
    };
    y.prototype.SetContactListener = function(b) {
        this.m_contactManager.m_contactListener = b
    };
    y.prototype.SetDebugDraw =
        function(b) {
            this.m_debugDraw = b
        };
    y.prototype.SetBroadPhase = function(b) {
        var c = this.m_contactManager.m_broadPhase;
        this.m_contactManager.m_broadPhase = b;
        for (var d = this.m_bodyList; d; d = d.m_next)
            for (var e = d.m_fixtureList; e; e = e.m_next) e.m_proxy = b.CreateProxy(c.GetFatAABB(e.m_proxy), e)
    };
    y.prototype.Validate = function() {
        this.m_contactManager.m_broadPhase.Validate()
    };
    y.prototype.GetProxyCount = function() {
        return this.m_contactManager.m_broadPhase.GetProxyCount()
    };
    y.prototype.CreateBody = function(b) {
        if (!0 == this.IsLocked()) return null;
        b = new t(b, this);
        b.m_prev = null;
        if (b.m_next = this.m_bodyList) this.m_bodyList.m_prev = b;
        this.m_bodyList = b;
        ++this.m_bodyCount;
        return b
    };
    y.prototype.DestroyBody = function(b) {
        if (!0 != this.IsLocked()) {
            for (var c = b.m_jointList; c;) {
                var d = c,
                    c = c.next;
                this.m_destructionListener && this.m_destructionListener.SayGoodbyeJoint(d.joint);
                this.DestroyJoint(d.joint)
            }
            for (c = b.m_controllerList; c;) d = c, c = c.nextController, d.controller.RemoveBody(b);
            for (c = b.m_contactList; c;) d = c, c = c.next, this.m_contactManager.Destroy(d.contact);
            b.m_contactList =
                null;
            for (c = b.m_fixtureList; c;) d = c, c = c.m_next, this.m_destructionListener && this.m_destructionListener.SayGoodbyeFixture(d), d.DestroyProxy(this.m_contactManager.m_broadPhase), d.Destroy();
            b.m_fixtureList = null;
            b.m_fixtureCount = 0;
            b.m_prev && (b.m_prev.m_next = b.m_next);
            b.m_next && (b.m_next.m_prev = b.m_prev);
            b == this.m_bodyList && (this.m_bodyList = b.m_next);
            --this.m_bodyCount
        }
    };
    y.prototype.CreateJoint = function(b) {
        var c = J.Create(b, null);
        c.m_prev = null;
        if (c.m_next = this.m_jointList) this.m_jointList.m_prev = c;
        this.m_jointList =
            c;
        ++this.m_jointCount;
        c.m_edgeA.joint = c;
        c.m_edgeA.other = c.m_bodyB;
        c.m_edgeA.prev = null;
        if (c.m_edgeA.next = c.m_bodyA.m_jointList) c.m_bodyA.m_jointList.prev = c.m_edgeA;
        c.m_bodyA.m_jointList = c.m_edgeA;
        c.m_edgeB.joint = c;
        c.m_edgeB.other = c.m_bodyA;
        c.m_edgeB.prev = null;
        if (c.m_edgeB.next = c.m_bodyB.m_jointList) c.m_bodyB.m_jointList.prev = c.m_edgeB;
        c.m_bodyB.m_jointList = c.m_edgeB;
        var d = b.bodyA,
            e = b.bodyB;
        if (!1 == b.collideConnected)
            for (b = e.GetContactList(); b;) b.other == d && b.contact.FlagForFiltering(), b = b.next;
        return c
    };
    y.prototype.DestroyJoint = function(b) {
        var c = b.m_collideConnected;
        b.m_prev && (b.m_prev.m_next = b.m_next);
        b.m_next && (b.m_next.m_prev = b.m_prev);
        b == this.m_jointList && (this.m_jointList = b.m_next);
        var d = b.m_bodyA,
            e = b.m_bodyB;
        d.SetAwake(!0);
        e.SetAwake(!0);
        b.m_edgeA.prev && (b.m_edgeA.prev.next = b.m_edgeA.next);
        b.m_edgeA.next && (b.m_edgeA.next.prev = b.m_edgeA.prev);
        b.m_edgeA == d.m_jointList && (d.m_jointList = b.m_edgeA.next);
        b.m_edgeA.prev = null;
        b.m_edgeA.next = null;
        b.m_edgeB.prev && (b.m_edgeB.prev.next = b.m_edgeB.next);
        b.m_edgeB.next && (b.m_edgeB.next.prev = b.m_edgeB.prev);
        b.m_edgeB == e.m_jointList && (e.m_jointList = b.m_edgeB.next);
        b.m_edgeB.prev = null;
        b.m_edgeB.next = null;
        J.Destroy(b, null);
        --this.m_jointCount;
        if (!1 == c)
            for (b = e.GetContactList(); b;) b.other == d && b.contact.FlagForFiltering(), b = b.next
    };
    y.prototype.AddController = function(b) {
        b.m_next = this.m_controllerList;
        b.m_prev = null;
        this.m_controllerList = b;
        b.m_world = this;
        this.m_controllerCount++;
        return b
    };
    y.prototype.RemoveController = function(b) {
        b.m_prev && (b.m_prev.m_next =
            b.m_next);
        b.m_next && (b.m_next.m_prev = b.m_prev);
        this.m_controllerList == b && (this.m_controllerList = b.m_next);
        this.m_controllerCount--
    };
    y.prototype.CreateController = function(b) {
        if (b.m_world != this) throw Error("Controller can only be a member of one world");
        b.m_next = this.m_controllerList;
        b.m_prev = null;
        this.m_controllerList && (this.m_controllerList.m_prev = b);
        this.m_controllerList = b;
        ++this.m_controllerCount;
        b.m_world = this;
        return b
    };
    y.prototype.DestroyController = function(b) {
        b.Clear();
        b.m_next && (b.m_next.m_prev =
            b.m_prev);
        b.m_prev && (b.m_prev.m_next = b.m_next);
        b == this.m_controllerList && (this.m_controllerList = b.m_next);
        --this.m_controllerCount
    };
    y.prototype.SetWarmStarting = function(b) {
        y.m_warmStarting = b
    };
    y.prototype.SetContinuousPhysics = function(b) {
        y.m_continuousPhysics = b
    };
    y.prototype.GetBodyCount = function() {
        return this.m_bodyCount
    };
    y.prototype.GetJointCount = function() {
        return this.m_jointCount
    };
    y.prototype.GetContactCount = function() {
        return this.m_contactCount
    };
    y.prototype.SetGravity = function(b) {
        this.m_gravity =
            b
    };
    y.prototype.GetGravity = function() {
        return this.m_gravity
    };
    y.prototype.GetGroundBody = function() {
        return this.m_groundBody
    };
    y.prototype.Step = function(b, c, d) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        void 0 === d && (d = 0);
        this.m_flags & y.e_newFixture && (this.m_contactManager.FindNewContacts(), this.m_flags &= ~y.e_newFixture);
        this.m_flags |= y.e_locked;
        var e = y.s_timestep2;
        e.dt = b;
        e.velocityIterations = c;
        e.positionIterations = d;
        e.inv_dt = 0 < b ? 1 / b : 0;
        e.dtRatio = this.m_inv_dt0 * b;
        e.warmStarting = y.m_warmStarting;
        this.m_contactManager.Collide();
        0 < e.dt && this.Solve(e);
        y.m_continuousPhysics && 0 < e.dt && this.SolveTOI(e);
        0 < e.dt && (this.m_inv_dt0 = e.inv_dt);
        this.m_flags &= ~y.e_locked
    };
    y.prototype.ClearForces = function() {
        for (var b = this.m_bodyList; b; b = b.m_next) b.m_force.SetZero(), b.m_torque = 0
    };
    y.prototype.DrawDebugData = function() {
        if (null != this.m_debugDraw) {
            this.m_debugDraw.m_sprite.graphics.clear();
            var b = this.m_debugDraw.GetFlags(),
                c, d, n;
            new e;
            new e;
            new e;
            var j;
            new p;
            new p;
            new e;
            new e;
            new e;
            new e;
            var u = new f(0, 0, 0);
            if (b & C.e_shapeBit)
                for (c = this.m_bodyList; c; c =
                    c.m_next) {
                    j = c.m_xf;
                    for (d = c.GetFixtureList(); d; d = d.m_next) n = d.GetShape(), !1 == c.IsActive() ? u.Set(0.5, 0.5, 0.3) : c.GetType() == t.b2_staticBody ? u.Set(0.5, 0.9, 0.5) : c.GetType() == t.b2_kinematicBody ? u.Set(0.5, 0.5, 0.9) : !1 == c.IsAwake() ? u.Set(0.6, 0.6, 0.6) : u.Set(0.9, 0.7, 0.7), this.DrawShape(n, j, u)
                }
            if (b & C.e_jointBit)
                for (c = this.m_jointList; c; c = c.m_next) this.DrawJoint(c);
            if (b & C.e_controllerBit)
                for (c = this.m_controllerList; c; c = c.m_next) c.Draw(this.m_debugDraw);
            if (b & C.e_pairBit) {
                u.Set(0.3, 0.9, 0.9);
                for (c = this.m_contactManager.m_contactList; c; c =
                    c.GetNext()) n = c.GetFixtureA(), d = c.GetFixtureB(), n = n.GetAABB().GetCenter(), d = d.GetAABB().GetCenter(), this.m_debugDraw.DrawSegment(n, d, u)
            }
            if (b & C.e_aabbBit) {
                n = this.m_contactManager.m_broadPhase;
                j = [new e, new e, new e, new e];
                for (c = this.m_bodyList; c; c = c.GetNext())
                    if (!1 != c.IsActive())
                        for (d = c.GetFixtureList(); d; d = d.GetNext()) {
                            var m = n.GetFatAABB(d.m_proxy);
                            j[0].Set(m.lowerBound.x, m.lowerBound.y);
                            j[1].Set(m.upperBound.x, m.lowerBound.y);
                            j[2].Set(m.upperBound.x, m.upperBound.y);
                            j[3].Set(m.lowerBound.x, m.upperBound.y);
                            this.m_debugDraw.DrawPolygon(j, 4, u)
                        }
            }
            if (b & C.e_centerOfMassBit)
                for (c = this.m_bodyList; c; c = c.m_next) j = y.s_xf, j.R = c.m_xf.R, j.position = c.GetWorldCenter(), this.m_debugDraw.DrawTransform(j)
        }
    };
    y.prototype.QueryAABB = function(b, c) {
        var d = this.m_contactManager.m_broadPhase;
        d.Query(function(c) {
            return b(d.GetUserData(c))
        }, c)
    };
    y.prototype.QueryShape = function(b, c, e) {
        void 0 === e && (e = null);
        null == e && (e = new d, e.SetIdentity());
        var f = this.m_contactManager.m_broadPhase,
            n = new p;
        c.ComputeAABB(n, e);
        f.Query(function(d) {
            d = f.GetUserData(d) instanceof
            O ? f.GetUserData(d) : null;
            return E.TestOverlap(c, e, d.GetShape(), d.GetBody().GetTransform()) ? b(d) : !0
        }, n)
    };
    y.prototype.QueryPoint = function(b, c) {
        var d = this.m_contactManager.m_broadPhase,
            e = new p;
        e.lowerBound.Set(c.x - j.b2_linearSlop, c.y - j.b2_linearSlop);
        e.upperBound.Set(c.x + j.b2_linearSlop, c.y + j.b2_linearSlop);
        d.Query(function(e) {
            e = d.GetUserData(e) instanceof O ? d.GetUserData(e) : null;
            return e.TestPoint(c) ? b(e) : !0
        }, e)
    };
    y.prototype.RayCast = function(b, c, d) {
        var f = this.m_contactManager.m_broadPhase,
            n = new A,
            j = new v(c,
                d);
        f.RayCast(function(j, u) {
            var y = f.GetUserData(u),
                y = y instanceof O ? y : null;
            if (y.RayCast(n, j)) {
                var l = n.fraction,
                    m = new e((1 - l) * c.x + l * d.x, (1 - l) * c.y + l * d.y);
                return b(y, m, n.normal, l)
            }
            return j.maxFraction
        }, j)
    };
    y.prototype.RayCastOne = function(b, c) {
        var d;
        this.RayCast(function(b, c, g, e) {
            void 0 === e && (e = 0);
            d = b;
            return e
        }, b, c);
        return d
    };
    y.prototype.RayCastAll = function(b, c) {
        var d = new Vector;
        this.RayCast(function(b) {
            d[d.length] = b;
            return 1
        }, b, c);
        return d
    };
    y.prototype.GetBodyList = function() {
        return this.m_bodyList
    };
    y.prototype.GetJointList =
        function() {
            return this.m_jointList
        };
    y.prototype.GetContactList = function() {
        return this.m_contactList
    };
    y.prototype.IsLocked = function() {
        return 0 < (this.m_flags & y.e_locked)
    };
    y.prototype.Solve = function(b) {
        for (var c, d = this.m_controllerList; d; d = d.m_next) d.Step(b);
        d = this.m_island;
        d.Initialize(this.m_bodyCount, this.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
        for (c = this.m_bodyList; c; c = c.m_next) c.m_flags &= ~t.e_islandFlag;
        for (var e = this.m_contactList; e; e =
            e.m_next) e.m_flags &= ~F.e_islandFlag;
        for (e = this.m_jointList; e; e = e.m_next) e.m_islandFlag = !1;
        parseInt(this.m_bodyCount);
        for (var e = this.s_stack, f = this.m_bodyList; f; f = f.m_next)
            if (!(f.m_flags & t.e_islandFlag) && !(!1 == f.IsAwake() || !1 == f.IsActive()) && f.GetType() != t.b2_staticBody) {
                d.Clear();
                var n = 0;
                e[n++] = f;
                for (f.m_flags |= t.e_islandFlag; 0 < n;)
                    if (c = e[--n], d.AddBody(c), !1 == c.IsAwake() && c.SetAwake(!0), c.GetType() != t.b2_staticBody) {
                        for (var j, u = c.m_contactList; u; u = u.next)
                            if (!(u.contact.m_flags & F.e_islandFlag) && !(!0 ==
                                u.contact.IsSensor() || !1 == u.contact.IsEnabled() || !1 == u.contact.IsTouching())) d.AddContact(u.contact), u.contact.m_flags |= F.e_islandFlag, j = u.other, j.m_flags & t.e_islandFlag || (e[n++] = j, j.m_flags |= t.e_islandFlag);
                        for (c = c.m_jointList; c; c = c.next)!0 != c.joint.m_islandFlag && (j = c.other, !1 != j.IsActive() && (d.AddJoint(c.joint), c.joint.m_islandFlag = !0, j.m_flags & t.e_islandFlag || (e[n++] = j, j.m_flags |= t.e_islandFlag)))
                    }
                d.Solve(b, this.m_gravity, this.m_allowSleep);
                for (n = 0; n < d.m_bodyCount; ++n) c = d.m_bodies[n], c.GetType() ==
                    t.b2_staticBody && (c.m_flags &= ~t.e_islandFlag)
            }
        for (n = 0; n < e.length && e[n]; ++n) e[n] = null;
        for (c = this.m_bodyList; c; c = c.m_next)!1 == c.IsAwake() || !1 == c.IsActive() || c.GetType() != t.b2_staticBody && c.SynchronizeFixtures();
        this.m_contactManager.FindNewContacts()
    };
    y.prototype.SolveTOI = function(b) {
        var c, d, e, f = this.m_island;
        f.Initialize(this.m_bodyCount, j.b2_maxTOIContactsPerIsland, j.b2_maxTOIJointsPerIsland, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
        var n = y.s_queue;
        for (c = this.m_bodyList; c; c =
            c.m_next) c.m_flags &= ~t.e_islandFlag, c.m_sweep.t0 = 0;
        for (e = this.m_contactList; e; e = e.m_next) e.m_flags &= ~(F.e_toiFlag | F.e_islandFlag);
        for (e = this.m_jointList; e; e = e.m_next) e.m_islandFlag = !1;
        for (;;) {
            var u = null,
                m = 1;
            for (e = this.m_contactList; e; e = e.m_next)
                if (!(!0 == e.IsSensor() || !1 == e.IsEnabled() || !1 == e.IsContinuous())) {
                    if (e.m_flags & F.e_toiFlag) c = e.m_toi;
                    else {
                        c = e.m_fixtureA;
                        d = e.m_fixtureB;
                        c = c.m_body;
                        d = d.m_body;
                        if ((c.GetType() != t.b2_dynamicBody || !1 == c.IsAwake()) && (d.GetType() != t.b2_dynamicBody || !1 == d.IsAwake())) continue;
                        var G = c.m_sweep.t0;
                        c.m_sweep.t0 < d.m_sweep.t0 ? (G = d.m_sweep.t0, c.m_sweep.Advance(G)) : d.m_sweep.t0 < c.m_sweep.t0 && (G = c.m_sweep.t0, d.m_sweep.Advance(G));
                        c = e.ComputeTOI(c.m_sweep, d.m_sweep);
                        j.b2Assert(0 <= c && 1 >= c);
                        0 < c && 1 > c && (c = (1 - c) * G + c, 1 < c && (c = 1));
                        e.m_toi = c;
                        e.m_flags |= F.e_toiFlag
                    }
                    Number.MIN_VALUE < c && c < m && (u = e, m = c)
                }
            if (null == u || 1 - 100 * Number.MIN_VALUE < m) break;
            c = u.m_fixtureA;
            d = u.m_fixtureB;
            c = c.m_body;
            d = d.m_body;
            y.s_backupA.Set(c.m_sweep);
            y.s_backupB.Set(d.m_sweep);
            c.Advance(m);
            d.Advance(m);
            u.Update(this.m_contactManager.m_contactListener);
            u.m_flags &= ~F.e_toiFlag;
            if (!0 == u.IsSensor() || !1 == u.IsEnabled()) c.m_sweep.Set(y.s_backupA), d.m_sweep.Set(y.s_backupB), c.SynchronizeTransform(), d.SynchronizeTransform();
            else if (!1 != u.IsTouching()) {
                c.GetType() != t.b2_dynamicBody && (c = d);
                f.Clear();
                u = e = 0;
                n[e + u++] = c;
                for (c.m_flags |= t.e_islandFlag; 0 < u;)
                    if (c = n[e++], --u, f.AddBody(c), !1 == c.IsAwake() && c.SetAwake(!0), c.GetType() == t.b2_dynamicBody) {
                        for (d = c.m_contactList; d && f.m_contactCount != f.m_contactCapacity; d = d.next)
                            if (!(d.contact.m_flags & F.e_islandFlag) && !(!0 ==
                                d.contact.IsSensor() || !1 == d.contact.IsEnabled() || !1 == d.contact.IsTouching())) f.AddContact(d.contact), d.contact.m_flags |= F.e_islandFlag, G = d.other, G.m_flags & t.e_islandFlag || (G.GetType() != t.b2_staticBody && (G.Advance(m), G.SetAwake(!0)), n[e + u] = G, ++u, G.m_flags |= t.e_islandFlag);
                        for (c = c.m_jointList; c; c = c.next) f.m_jointCount != f.m_jointCapacity && !0 != c.joint.m_islandFlag && (G = c.other, !1 != G.IsActive() && (f.AddJoint(c.joint), c.joint.m_islandFlag = !0, G.m_flags & t.e_islandFlag || (G.GetType() != t.b2_staticBody && (G.Advance(m),
                            G.SetAwake(!0)), n[e + u] = G, ++u, G.m_flags |= t.e_islandFlag)))
                    }
                e = y.s_timestep;
                e.warmStarting = !1;
                e.dt = (1 - m) * b.dt;
                e.inv_dt = 1 / e.dt;
                e.dtRatio = 0;
                e.velocityIterations = b.velocityIterations;
                e.positionIterations = b.positionIterations;
                f.SolveTOI(e);
                for (m = m = 0; m < f.m_bodyCount; ++m)
                    if (c = f.m_bodies[m], c.m_flags &= ~t.e_islandFlag, !1 != c.IsAwake() && c.GetType() == t.b2_dynamicBody) {
                        c.SynchronizeFixtures();
                        for (d = c.m_contactList; d; d = d.next) d.contact.m_flags &= ~F.e_toiFlag
                    }
                for (m = 0; m < f.m_contactCount; ++m) e = f.m_contacts[m], e.m_flags &=
                    ~(F.e_toiFlag | F.e_islandFlag);
                for (m = 0; m < f.m_jointCount; ++m) e = f.m_joints[m], e.m_islandFlag = !1;
                this.m_contactManager.FindNewContacts()
            }
        }
    };
    y.prototype.DrawJoint = function(b) {
        var c = b.GetBodyA(),
            d = b.GetBodyB(),
            e = c.m_xf.position,
            f = d.m_xf.position,
            n = b.GetAnchorA(),
            j = b.GetAnchorB(),
            u = y.s_jointColor;
        switch (b.m_type) {
            case J.e_distanceJoint:
                this.m_debugDraw.DrawSegment(n, j, u);
                break;
            case J.e_pulleyJoint:
                c = b instanceof W ? b : null;
                b = c.GetGroundAnchorA();
                c = c.GetGroundAnchorB();
                this.m_debugDraw.DrawSegment(b, n, u);
                this.m_debugDraw.DrawSegment(c,
                    j, u);
                this.m_debugDraw.DrawSegment(b, c, u);
                break;
            case J.e_mouseJoint:
                this.m_debugDraw.DrawSegment(n, j, u);
                break;
            default:
                c != this.m_groundBody && this.m_debugDraw.DrawSegment(e, n, u), this.m_debugDraw.DrawSegment(n, j, u), d != this.m_groundBody && this.m_debugDraw.DrawSegment(f, j, u)
        }
    };
    y.prototype.DrawShape = function(c, d, e) {
        switch (c.m_type) {
            case E.e_circleShape:
                var f = c instanceof B ? c : null;
                this.m_debugDraw.DrawSolidCircle(b.MulX(d, f.m_p), f.m_radius, d.R.col1, e);
                break;
            case E.e_polygonShape:
                f = c instanceof I ? c : null;
                c =
                    parseInt(f.GetVertexCount());
                for (var n = f.GetVertices(), j = new Vector(c), f = 0; f < c; ++f) j[f] = b.MulX(d, n[f]);
                this.m_debugDraw.DrawSolidPolygon(j, c, e);
                break;
            case E.e_edgeShape:
                f = c instanceof z ? c : null, this.m_debugDraw.DrawSegment(b.MulX(d, f.GetVertex1()), b.MulX(d, f.GetVertex2()), e)
        }
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.b2World.s_timestep2 = new n;
        Box2D.Dynamics.b2World.s_xf = new d;
        Box2D.Dynamics.b2World.s_backupA = new c;
        Box2D.Dynamics.b2World.s_backupB = new c;
        Box2D.Dynamics.b2World.s_timestep = new n;
        Box2D.Dynamics.b2World.s_queue = new Vector;
        Box2D.Dynamics.b2World.s_jointColor = new f(0.5, 0.8, 0.8);
        Box2D.Dynamics.b2World.e_newFixture = 1;
        Box2D.Dynamics.b2World.e_locked = 2
    })
})();
(function() {
    var b = Box2D.Collision.Shapes.b2CircleShape,
        c = Box2D.Collision.Shapes.b2EdgeShape,
        d = Box2D.Collision.Shapes.b2PolygonShape,
        e = Box2D.Collision.Shapes.b2Shape,
        f = Box2D.Dynamics.Contacts.b2CircleContact,
        j = Box2D.Dynamics.Contacts.b2Contact,
        p = Box2D.Dynamics.Contacts.b2ContactConstraint,
        m = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,
        s = Box2D.Dynamics.Contacts.b2ContactEdge,
        v = Box2D.Dynamics.Contacts.b2ContactFactory,
        A = Box2D.Dynamics.Contacts.b2ContactRegister,
        B = Box2D.Dynamics.Contacts.b2ContactResult,
        z = Box2D.Dynamics.Contacts.b2ContactSolver,
        x = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,
        I = Box2D.Dynamics.Contacts.b2NullContact,
        E = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,
        t = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,
        H = Box2D.Dynamics.Contacts.b2PolygonContact,
        L = Box2D.Dynamics.Contacts.b2PositionSolverManifold,
        Q = Box2D.Dynamics.b2Body,
        M = Box2D.Dynamics.b2TimeStep,
        P = Box2D.Common.b2Settings,
        C = Box2D.Common.Math.b2Mat22,
        S = Box2D.Common.Math.b2Math,
        N = Box2D.Common.Math.b2Vec2,
        O = Box2D.Collision.b2Collision,
        Z = Box2D.Collision.b2ContactID,
        T = Box2D.Collision.b2Manifold,
        n = Box2D.Collision.b2TimeOfImpact,
        y = Box2D.Collision.b2TOIInput,
        F = Box2D.Collision.b2WorldManifold;
    Box2D.inherit(f, Box2D.Dynamics.Contacts.b2Contact);
    f.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    f.b2CircleContact = function() {
        Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments)
    };
    f.Create = function() {
        return new f
    };
    f.Destroy = function() {};
    f.prototype.Reset = function(b, c) {
        this.__super.Reset.call(this, b, c)
    };
    f.prototype.Evaluate =
        function() {
            var c = this.m_fixtureA.GetBody(),
                d = this.m_fixtureB.GetBody();
            O.CollideCircles(this.m_manifold, this.m_fixtureA.GetShape() instanceof b ? this.m_fixtureA.GetShape() : null, c.m_xf, this.m_fixtureB.GetShape() instanceof b ? this.m_fixtureB.GetShape() : null, d.m_xf)
        };
    j.b2Contact = function() {
        this.m_nodeA = new s;
        this.m_nodeB = new s;
        this.m_manifold = new T;
        this.m_oldManifold = new T
    };
    j.prototype.GetManifold = function() {
        return this.m_manifold
    };
    j.prototype.GetWorldManifold = function(b) {
        var c = this.m_fixtureA.GetBody(),
            d = this.m_fixtureB.GetBody(),
            e = this.m_fixtureA.GetShape(),
            g = this.m_fixtureB.GetShape();
        b.Initialize(this.m_manifold, c.GetTransform(), e.m_radius, d.GetTransform(), g.m_radius)
    };
    j.prototype.IsTouching = function() {
        return (this.m_flags & j.e_touchingFlag) == j.e_touchingFlag
    };
    j.prototype.IsContinuous = function() {
        return (this.m_flags & j.e_continuousFlag) == j.e_continuousFlag
    };
    j.prototype.SetSensor = function(b) {
        this.m_flags = b ? this.m_flags | j.e_sensorFlag : this.m_flags & ~j.e_sensorFlag
    };
    j.prototype.IsSensor = function() {
        return (this.m_flags &
            j.e_sensorFlag) == j.e_sensorFlag
    };
    j.prototype.SetEnabled = function(b) {
        this.m_flags = b ? this.m_flags | j.e_enabledFlag : this.m_flags & ~j.e_enabledFlag
    };
    j.prototype.IsEnabled = function() {
        return (this.m_flags & j.e_enabledFlag) == j.e_enabledFlag
    };
    j.prototype.GetNext = function() {
        return this.m_next
    };
    j.prototype.GetFixtureA = function() {
        return this.m_fixtureA
    };
    j.prototype.GetFixtureB = function() {
        return this.m_fixtureB
    };
    j.prototype.FlagForFiltering = function() {
        this.m_flags |= j.e_filterFlag
    };
    j.prototype.b2Contact = function() {};
    j.prototype.Reset = function(b, c) {
        void 0 === b && (b = null);
        void 0 === c && (c = null);
        this.m_flags = j.e_enabledFlag;
        if (!b || !c) this.m_fixtureB = this.m_fixtureA = null;
        else {
            if (b.IsSensor() || c.IsSensor()) this.m_flags |= j.e_sensorFlag;
            var d = b.GetBody(),
                e = c.GetBody();
            if (d.GetType() != Q.b2_dynamicBody || d.IsBullet() || e.GetType() != Q.b2_dynamicBody || e.IsBullet()) this.m_flags |= j.e_continuousFlag;
            this.m_fixtureA = b;
            this.m_fixtureB = c;
            this.m_manifold.m_pointCount = 0;
            this.m_next = this.m_prev = null;
            this.m_nodeA.contact = null;
            this.m_nodeA.prev =
                null;
            this.m_nodeA.next = null;
            this.m_nodeA.other = null;
            this.m_nodeB.contact = null;
            this.m_nodeB.prev = null;
            this.m_nodeB.next = null;
            this.m_nodeB.other = null
        }
    };
    j.prototype.Update = function(b) {
        var c = this.m_oldManifold;
        this.m_oldManifold = this.m_manifold;
        this.m_manifold = c;
        this.m_flags |= j.e_enabledFlag;
        var d = !1,
            c = (this.m_flags & j.e_touchingFlag) == j.e_touchingFlag,
            f = this.m_fixtureA.m_body,
            g = this.m_fixtureB.m_body,
            n = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);
        if (this.m_flags & j.e_sensorFlag) n && (d = this.m_fixtureA.GetShape(),
            n = this.m_fixtureB.GetShape(), f = f.GetTransform(), g = g.GetTransform(), d = e.TestOverlap(d, f, n, g)), this.m_manifold.m_pointCount = 0;
        else {
            this.m_flags = f.GetType() != Q.b2_dynamicBody || f.IsBullet() || g.GetType() != Q.b2_dynamicBody || g.IsBullet() ? this.m_flags | j.e_continuousFlag : this.m_flags & ~j.e_continuousFlag;
            if (n) {
                this.Evaluate();
                d = 0 < this.m_manifold.m_pointCount;
                for (n = 0; n < this.m_manifold.m_pointCount; ++n) {
                    var y = this.m_manifold.m_points[n];
                    y.m_normalImpulse = 0;
                    y.m_tangentImpulse = 0;
                    for (var q = y.m_id, m = 0; m < this.m_oldManifold.m_pointCount; ++m) {
                        var F =
                            this.m_oldManifold.m_points[m];
                        if (F.m_id.key == q.key) {
                            y.m_normalImpulse = F.m_normalImpulse;
                            y.m_tangentImpulse = F.m_tangentImpulse;
                            break
                        }
                    }
                }
            } else this.m_manifold.m_pointCount = 0;
            d != c && (f.SetAwake(!0), g.SetAwake(!0))
        }
        this.m_flags = d ? this.m_flags | j.e_touchingFlag : this.m_flags & ~j.e_touchingFlag;
        !1 == c && !0 == d && b.BeginContact(this);
        !0 == c && !1 == d && b.EndContact(this);
        0 == (this.m_flags & j.e_sensorFlag) && b.PreSolve(this, this.m_oldManifold)
    };
    j.prototype.Evaluate = function() {};
    j.prototype.ComputeTOI = function(b, c) {
        j.s_input.proxyA.Set(this.m_fixtureA.GetShape());
        j.s_input.proxyB.Set(this.m_fixtureB.GetShape());
        j.s_input.sweepA = b;
        j.s_input.sweepB = c;
        j.s_input.tolerance = P.b2_linearSlop;
        return n.TimeOfImpact(j.s_input)
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag = 1;
        Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag = 2;
        Box2D.Dynamics.Contacts.b2Contact.e_islandFlag = 4;
        Box2D.Dynamics.Contacts.b2Contact.e_toiFlag = 8;
        Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag = 16;
        Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag = 32;
        Box2D.Dynamics.Contacts.b2Contact.e_filterFlag =
            64;
        Box2D.Dynamics.Contacts.b2Contact.s_input = new y
    });
    p.b2ContactConstraint = function() {
        this.localPlaneNormal = new N;
        this.localPoint = new N;
        this.normal = new N;
        this.normalMass = new C;
        this.K = new C
    };
    p.prototype.b2ContactConstraint = function() {
        this.points = new Vector(P.b2_maxManifoldPoints);
        for (var b = 0; b < P.b2_maxManifoldPoints; b++) this.points[b] = new m
    };
    m.b2ContactConstraintPoint = function() {
        this.localPoint = new N;
        this.rA = new N;
        this.rB = new N
    };
    s.b2ContactEdge = function() {};
    v.b2ContactFactory = function() {};
    v.prototype.b2ContactFactory =
        function(b) {
            this.m_allocator = b;
            this.InitializeRegisters()
        };
    v.prototype.AddType = function(b, c, d, e) {
        void 0 === d && (d = 0);
        void 0 === e && (e = 0);
        this.m_registers[d][e].createFcn = b;
        this.m_registers[d][e].destroyFcn = c;
        this.m_registers[d][e].primary = !0;
        d != e && (this.m_registers[e][d].createFcn = b, this.m_registers[e][d].destroyFcn = c, this.m_registers[e][d].primary = !1)
    };
    v.prototype.InitializeRegisters = function() {
        this.m_registers = new Vector(e.e_shapeTypeCount);
        for (var b = 0; b < e.e_shapeTypeCount; b++) {
            this.m_registers[b] =
                new Vector(e.e_shapeTypeCount);
            for (var c = 0; c < e.e_shapeTypeCount; c++) this.m_registers[b][c] = new A
        }
        this.AddType(f.Create, f.Destroy, e.e_circleShape, e.e_circleShape);
        this.AddType(E.Create, E.Destroy, e.e_polygonShape, e.e_circleShape);
        this.AddType(H.Create, H.Destroy, e.e_polygonShape, e.e_polygonShape);
        this.AddType(x.Create, x.Destroy, e.e_edgeShape, e.e_circleShape);
        this.AddType(t.Create, t.Destroy, e.e_polygonShape, e.e_edgeShape)
    };
    v.prototype.Create = function(b, c) {
        var d = parseInt(b.GetType()),
            e = parseInt(c.GetType()),
            d = this.m_registers[d][e];
        if (d.pool) return e = d.pool, d.pool = e.m_next, d.poolCount--, e.Reset(b, c), e;
        e = d.createFcn;
        return null != e ? (d.primary ? (e = e(this.m_allocator), e.Reset(b, c)) : (e = e(this.m_allocator), e.Reset(c, b)), e) : null
    };
    v.prototype.Destroy = function(b) {
        0 < b.m_manifold.m_pointCount && (b.m_fixtureA.m_body.SetAwake(!0), b.m_fixtureB.m_body.SetAwake(!0));
        var c = parseInt(b.m_fixtureA.GetType()),
            d = parseInt(b.m_fixtureB.GetType()),
            c = this.m_registers[c][d];
        c.poolCount++;
        b.m_next = c.pool;
        c.pool = b;
        c = c.destroyFcn;
        c(b, this.m_allocator)
    };
    A.b2ContactRegister = function() {};
    B.b2ContactResult = function() {
        this.position = new N;
        this.normal = new N;
        this.id = new Z
    };
    z.b2ContactSolver = function() {
        this.m_step = new M;
        this.m_constraints = new Vector
    };
    z.prototype.b2ContactSolver = function() {};
    z.prototype.Initialize = function(b, c, d, e) {
        void 0 === d && (d = 0);
        var g;
        this.m_step.Set(b);
        this.m_allocator = e;
        for (this.m_constraintCount = d; this.m_constraints.length < this.m_constraintCount;) this.m_constraints[this.m_constraints.length] = new p;
        for (b = 0; b <
            d; ++b) {
            g = c[b];
            e = g.m_fixtureA;
            var f = g.m_fixtureB,
                n = e.m_shape.m_radius,
                j = f.m_shape.m_radius,
                y = e.m_body,
                m = f.m_body,
                F = g.GetManifold(),
                s = P.b2MixFriction(e.GetFriction(), f.GetFriction()),
                t = P.b2MixRestitution(e.GetRestitution(), f.GetRestitution()),
                l = y.m_linearVelocity.x,
                x = y.m_linearVelocity.y,
                v = m.m_linearVelocity.x,
                B = m.m_linearVelocity.y,
                A = y.m_angularVelocity,
                I = m.m_angularVelocity;
            P.b2Assert(0 < F.m_pointCount);
            z.s_worldManifold.Initialize(F, y.m_xf, n, m.m_xf, j);
            f = z.s_worldManifold.m_normal.x;
            g = z.s_worldManifold.m_normal.y;
            e = this.m_constraints[b];
            e.bodyA = y;
            e.bodyB = m;
            e.manifold = F;
            e.normal.x = f;
            e.normal.y = g;
            e.pointCount = F.m_pointCount;
            e.friction = s;
            e.restitution = t;
            e.localPlaneNormal.x = F.m_localPlaneNormal.x;
            e.localPlaneNormal.y = F.m_localPlaneNormal.y;
            e.localPoint.x = F.m_localPoint.x;
            e.localPoint.y = F.m_localPoint.y;
            e.radius = n + j;
            e.type = F.m_type;
            for (n = 0; n < e.pointCount; ++n) {
                s = F.m_points[n];
                j = e.points[n];
                j.normalImpulse = s.m_normalImpulse;
                j.tangentImpulse = s.m_tangentImpulse;
                j.localPoint.SetV(s.m_localPoint);
                var s = j.rA.x = z.s_worldManifold.m_points[n].x -
                    y.m_sweep.c.x,
                    t = j.rA.y = z.s_worldManifold.m_points[n].y - y.m_sweep.c.y,
                    E = j.rB.x = z.s_worldManifold.m_points[n].x - m.m_sweep.c.x,
                    L = j.rB.y = z.s_worldManifold.m_points[n].y - m.m_sweep.c.y,
                    H = s * g - t * f,
                    C = E * g - L * f,
                    H = H * H,
                    C = C * C;
                j.normalMass = 1 / (y.m_invMass + m.m_invMass + y.m_invI * H + m.m_invI * C);
                var M = y.m_mass * y.m_invMass + m.m_mass * m.m_invMass,
                    M = M + (y.m_mass * y.m_invI * H + m.m_mass * m.m_invI * C);
                j.equalizedMass = 1 / M;
                C = g;
                M = -f;
                H = s * M - t * C;
                C = E * M - L * C;
                H *= H;
                C *= C;
                j.tangentMass = 1 / (y.m_invMass + m.m_invMass + y.m_invI * H + m.m_invI * C);
                j.velocityBias =
                    0;
                s = e.normal.x * (v + -I * L - l - -A * t) + e.normal.y * (B + I * E - x - A * s);
                s < -P.b2_velocityThreshold && (j.velocityBias += -e.restitution * s)
            }
            2 == e.pointCount && (B = e.points[0], v = e.points[1], F = y.m_invMass, y = y.m_invI, l = m.m_invMass, m = m.m_invI, x = B.rA.x * g - B.rA.y * f, B = B.rB.x * g - B.rB.y * f, A = v.rA.x * g - v.rA.y * f, v = v.rB.x * g - v.rB.y * f, f = F + l + y * x * x + m * B * B, g = F + l + y * A * A + m * v * v, m = F + l + y * x * A + m * B * v, f * f < 100 * (f * g - m * m) ? (e.K.col1.Set(f, m), e.K.col2.Set(m, g), e.K.GetInverse(e.normalMass)) : e.pointCount = 1)
        }
    };
    z.prototype.InitVelocityConstraints = function(b) {
        for (var c =
            0; c < this.m_constraintCount; ++c) {
            var d = this.m_constraints[c],
                e = d.bodyA,
                g = d.bodyB,
                f = e.m_invMass,
                n = e.m_invI,
                j = g.m_invMass,
                y = g.m_invI,
                m = d.normal.x,
                F = d.normal.y,
                p = F,
                s = -m,
                l = 0,
                t = 0;
            if (b.warmStarting) {
                t = d.pointCount;
                for (l = 0; l < t; ++l) {
                    var x = d.points[l];
                    x.normalImpulse *= b.dtRatio;
                    x.tangentImpulse *= b.dtRatio;
                    var z = x.normalImpulse * m + x.tangentImpulse * p,
                        v = x.normalImpulse * F + x.tangentImpulse * s;
                    e.m_angularVelocity -= n * (x.rA.x * v - x.rA.y * z);
                    e.m_linearVelocity.x -= f * z;
                    e.m_linearVelocity.y -= f * v;
                    g.m_angularVelocity += y * (x.rB.x *
                        v - x.rB.y * z);
                    g.m_linearVelocity.x += j * z;
                    g.m_linearVelocity.y += j * v
                }
            } else {
                t = d.pointCount;
                for (l = 0; l < t; ++l) e = d.points[l], e.normalImpulse = 0, e.tangentImpulse = 0
            }
        }
    };
    z.prototype.SolveVelocityConstraints = function() {
        for (var b = 0, c, d = 0, e = 0, g = 0, f = 0, n = 0, j = 0, y = 0, m, F = 0; F < this.m_constraintCount; ++F) {
            var g = this.m_constraints[F],
                p = g.bodyA,
                s = g.bodyB,
                l = p.m_angularVelocity,
                t = s.m_angularVelocity,
                x = p.m_linearVelocity,
                z = s.m_linearVelocity,
                v = p.m_invMass,
                B = p.m_invI,
                A = s.m_invMass,
                I = s.m_invI,
                j = g.normal.x,
                E = y = g.normal.y;
            m = -j;
            n = g.friction;
            for (b = 0; b < g.pointCount; b++) c = g.points[b], d = z.x - t * c.rB.y - x.x + l * c.rA.y, e = z.y + t * c.rB.x - x.y - l * c.rA.x, d = d * E + e * m, d = c.tangentMass * -d, e = n * c.normalImpulse, e = S.Clamp(c.tangentImpulse + d, -e, e), d = e - c.tangentImpulse, f = d * E, d *= m, x.x -= v * f, x.y -= v * d, l -= B * (c.rA.x * d - c.rA.y * f), z.x += A * f, z.y += A * d, t += I * (c.rB.x * d - c.rB.y * f), c.tangentImpulse = e;
            parseInt(g.pointCount);
            if (1 == g.pointCount) c = g.points[0], d = z.x + -t * c.rB.y - x.x - -l * c.rA.y, e = z.y + t * c.rB.x - x.y - l * c.rA.x, g = d * j + e * y, d = -c.normalMass * (g - c.velocityBias), e = c.normalImpulse + d, e = 0 <
                e ? e : 0, d = e - c.normalImpulse, f = d * j, d *= y, x.x -= v * f, x.y -= v * d, l -= B * (c.rA.x * d - c.rA.y * f), z.x += A * f, z.y += A * d, t += I * (c.rB.x * d - c.rB.y * f), c.normalImpulse = e;
            else {
                c = g.points[0];
                var b = g.points[1],
                    d = c.normalImpulse,
                    n = b.normalImpulse,
                    H = (z.x - t * c.rB.y - x.x + l * c.rA.y) * j + (z.y + t * c.rB.x - x.y - l * c.rA.x) * y,
                    C = (z.x - t * b.rB.y - x.x + l * b.rA.y) * j + (z.y + t * b.rB.x - x.y - l * b.rA.x) * y,
                    e = H - c.velocityBias,
                    f = C - b.velocityBias;
                m = g.K;
                e -= m.col1.x * d + m.col2.x * n;
                for (f -= m.col1.y * d + m.col2.y * n;;) {
                    m = g.normalMass;
                    E = -(m.col1.x * e + m.col2.x * f);
                    m = -(m.col1.y * e + m.col2.y *
                        f);
                    if (0 <= E && 0 <= m) {
                        d = E - d;
                        n = m - n;
                        g = d * j;
                        d *= y;
                        j *= n;
                        y *= n;
                        x.x -= v * (g + j);
                        x.y -= v * (d + y);
                        l -= B * (c.rA.x * d - c.rA.y * g + b.rA.x * y - b.rA.y * j);
                        z.x += A * (g + j);
                        z.y += A * (d + y);
                        t += I * (c.rB.x * d - c.rB.y * g + b.rB.x * y - b.rB.y * j);
                        c.normalImpulse = E;
                        b.normalImpulse = m;
                        break
                    }
                    E = -c.normalMass * e;
                    m = 0;
                    C = g.K.col1.y * E + f;
                    if (0 <= E && 0 <= C) {
                        d = E - d;
                        n = m - n;
                        g = d * j;
                        d *= y;
                        j *= n;
                        y *= n;
                        x.x -= v * (g + j);
                        x.y -= v * (d + y);
                        l -= B * (c.rA.x * d - c.rA.y * g + b.rA.x * y - b.rA.y * j);
                        z.x += A * (g + j);
                        z.y += A * (d + y);
                        t += I * (c.rB.x * d - c.rB.y * g + b.rB.x * y - b.rB.y * j);
                        c.normalImpulse = E;
                        b.normalImpulse = m;
                        break
                    }
                    E = 0;
                    m = -b.normalMass * f;
                    H = g.K.col2.x * m + e;
                    if (0 <= m && 0 <= H) {
                        d = E - d;
                        n = m - n;
                        g = d * j;
                        d *= y;
                        j *= n;
                        y *= n;
                        x.x -= v * (g + j);
                        x.y -= v * (d + y);
                        l -= B * (c.rA.x * d - c.rA.y * g + b.rA.x * y - b.rA.y * j);
                        z.x += A * (g + j);
                        z.y += A * (d + y);
                        t += I * (c.rB.x * d - c.rB.y * g + b.rB.x * y - b.rB.y * j);
                        c.normalImpulse = E;
                        b.normalImpulse = m;
                        break
                    }
                    m = E = 0;
                    H = e;
                    C = f;
                    if (0 <= H && 0 <= C) {
                        d = E - d;
                        n = m - n;
                        g = d * j;
                        d *= y;
                        j *= n;
                        y *= n;
                        x.x -= v * (g + j);
                        x.y -= v * (d + y);
                        l -= B * (c.rA.x * d - c.rA.y * g + b.rA.x * y - b.rA.y * j);
                        z.x += A * (g + j);
                        z.y += A * (d + y);
                        t += I * (c.rB.x * d - c.rB.y * g + b.rB.x * y - b.rB.y * j);
                        c.normalImpulse = E;
                        b.normalImpulse = m;
                        break
                    }
                    break
                }
            }
            p.m_angularVelocity =
                l;
            s.m_angularVelocity = t
        }
    };
    z.prototype.FinalizeVelocityConstraints = function() {
        for (var b = 0; b < this.m_constraintCount; ++b)
            for (var c = this.m_constraints[b], d = c.manifold, e = 0; e < c.pointCount; ++e) {
                var g = d.m_points[e],
                    f = c.points[e];
                g.m_normalImpulse = f.normalImpulse;
                g.m_tangentImpulse = f.tangentImpulse
            }
    };
    z.prototype.SolvePositionConstraints = function(b) {
        void 0 === b && (b = 0);
        for (var c = 0, d = 0; d < this.m_constraintCount; d++) {
            var e = this.m_constraints[d],
                g = e.bodyA,
                f = e.bodyB,
                n = g.m_mass * g.m_invMass,
                j = g.m_mass * g.m_invI,
                y = f.m_mass *
                f.m_invMass,
                m = f.m_mass * f.m_invI;
            z.s_psm.Initialize(e);
            for (var F = z.s_psm.m_normal, p = 0; p < e.pointCount; p++) {
                var s = e.points[p],
                    l = z.s_psm.m_points[p],
                    t = z.s_psm.m_separations[p],
                    x = l.x - g.m_sweep.c.x,
                    v = l.y - g.m_sweep.c.y,
                    B = l.x - f.m_sweep.c.x,
                    l = l.y - f.m_sweep.c.y,
                    c = c < t ? c : t,
                    t = S.Clamp(b * (t + P.b2_linearSlop), -P.b2_maxLinearCorrection, 0),
                    t = -s.equalizedMass * t,
                    s = t * F.x,
                    t = t * F.y;
                g.m_sweep.c.x -= n * s;
                g.m_sweep.c.y -= n * t;
                g.m_sweep.a -= j * (x * t - v * s);
                g.SynchronizeTransform();
                f.m_sweep.c.x += y * s;
                f.m_sweep.c.y += y * t;
                f.m_sweep.a += m *
                    (B * t - l * s);
                f.SynchronizeTransform()
            }
        }
        return c > -1.5 * P.b2_linearSlop
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold = new F;
        Box2D.Dynamics.Contacts.b2ContactSolver.s_psm = new L
    });
    Box2D.inherit(x, Box2D.Dynamics.Contacts.b2Contact);
    x.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    x.b2EdgeAndCircleContact = function() {
        Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments)
    };
    x.Create = function() {
        return new x
    };
    x.Destroy = function() {};
    x.prototype.Reset =
        function(b, c) {
            this.__super.Reset.call(this, b, c)
        };
    x.prototype.Evaluate = function() {
        var d = this.m_fixtureA.GetBody(),
            e = this.m_fixtureB.GetBody();
        this.b2CollideEdgeAndCircle(this.m_manifold, this.m_fixtureA.GetShape() instanceof c ? this.m_fixtureA.GetShape() : null, d.m_xf, this.m_fixtureB.GetShape() instanceof b ? this.m_fixtureB.GetShape() : null, e.m_xf)
    };
    x.prototype.b2CollideEdgeAndCircle = function() {};
    Box2D.inherit(I, Box2D.Dynamics.Contacts.b2Contact);
    I.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    I.b2NullContact = function() {
        Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments)
    };
    I.prototype.b2NullContact = function() {
        this.__super.b2Contact.call(this)
    };
    I.prototype.Evaluate = function() {};
    Box2D.inherit(E, Box2D.Dynamics.Contacts.b2Contact);
    E.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    E.b2PolyAndCircleContact = function() {
        Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments)
    };
    E.Create = function() {
        return new E
    };
    E.Destroy = function() {};
    E.prototype.Reset = function(b,
        c) {
        this.__super.Reset.call(this, b, c);
        P.b2Assert(b.GetType() == e.e_polygonShape);
        P.b2Assert(c.GetType() == e.e_circleShape)
    };
    E.prototype.Evaluate = function() {
        var c = this.m_fixtureA.m_body,
            e = this.m_fixtureB.m_body;
        O.CollidePolygonAndCircle(this.m_manifold, this.m_fixtureA.GetShape() instanceof d ? this.m_fixtureA.GetShape() : null, c.m_xf, this.m_fixtureB.GetShape() instanceof b ? this.m_fixtureB.GetShape() : null, e.m_xf)
    };
    Box2D.inherit(t, Box2D.Dynamics.Contacts.b2Contact);
    t.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    t.b2PolyAndEdgeContact = function() {
        Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments)
    };
    t.Create = function() {
        return new t
    };
    t.Destroy = function() {};
    t.prototype.Reset = function(b, c) {
        this.__super.Reset.call(this, b, c);
        P.b2Assert(b.GetType() == e.e_polygonShape);
        P.b2Assert(c.GetType() == e.e_edgeShape)
    };
    t.prototype.Evaluate = function() {
        var b = this.m_fixtureA.GetBody(),
            e = this.m_fixtureB.GetBody();
        this.b2CollidePolyAndEdge(this.m_manifold, this.m_fixtureA.GetShape() instanceof d ? this.m_fixtureA.GetShape() :
            null, b.m_xf, this.m_fixtureB.GetShape() instanceof c ? this.m_fixtureB.GetShape() : null, e.m_xf)
    };
    t.prototype.b2CollidePolyAndEdge = function() {};
    Box2D.inherit(H, Box2D.Dynamics.Contacts.b2Contact);
    H.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    H.b2PolygonContact = function() {
        Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments)
    };
    H.Create = function() {
        return new H
    };
    H.Destroy = function() {};
    H.prototype.Reset = function(b, c) {
        this.__super.Reset.call(this, b, c)
    };
    H.prototype.Evaluate = function() {
        var b =
            this.m_fixtureA.GetBody(),
            c = this.m_fixtureB.GetBody();
        O.CollidePolygons(this.m_manifold, this.m_fixtureA.GetShape() instanceof d ? this.m_fixtureA.GetShape() : null, b.m_xf, this.m_fixtureB.GetShape() instanceof d ? this.m_fixtureB.GetShape() : null, c.m_xf)
    };
    L.b2PositionSolverManifold = function() {};
    L.prototype.b2PositionSolverManifold = function() {
        this.m_normal = new N;
        this.m_separations = new Vector_a2j_Number(P.b2_maxManifoldPoints);
        this.m_points = new Vector(P.b2_maxManifoldPoints);
        for (var b = 0; b < P.b2_maxManifoldPoints; b++) this.m_points[b] =
            new N
    };
    L.prototype.Initialize = function(b) {
        P.b2Assert(0 < b.pointCount);
        var c = 0,
            d = 0,
            e = 0,
            g, f = 0,
            n = 0;
        switch (b.type) {
            case T.e_circles:
                g = b.bodyA.m_xf.R;
                e = b.localPoint;
                c = b.bodyA.m_xf.position.x + (g.col1.x * e.x + g.col2.x * e.y);
                d = b.bodyA.m_xf.position.y + (g.col1.y * e.x + g.col2.y * e.y);
                g = b.bodyB.m_xf.R;
                e = b.points[0].localPoint;
                f = b.bodyB.m_xf.position.x + (g.col1.x * e.x + g.col2.x * e.y);
                g = b.bodyB.m_xf.position.y + (g.col1.y * e.x + g.col2.y * e.y);
                var e = f - c,
                    n = g - d,
                    j = e * e + n * n;
                j > Number.MIN_VALUE * Number.MIN_VALUE ? (j = Math.sqrt(j), this.m_normal.x =
                    e / j, this.m_normal.y = n / j) : (this.m_normal.x = 1, this.m_normal.y = 0);
                this.m_points[0].x = 0.5 * (c + f);
                this.m_points[0].y = 0.5 * (d + g);
                this.m_separations[0] = e * this.m_normal.x + n * this.m_normal.y - b.radius;
                break;
            case T.e_faceA:
                g = b.bodyA.m_xf.R;
                e = b.localPlaneNormal;
                this.m_normal.x = g.col1.x * e.x + g.col2.x * e.y;
                this.m_normal.y = g.col1.y * e.x + g.col2.y * e.y;
                g = b.bodyA.m_xf.R;
                e = b.localPoint;
                f = b.bodyA.m_xf.position.x + (g.col1.x * e.x + g.col2.x * e.y);
                n = b.bodyA.m_xf.position.y + (g.col1.y * e.x + g.col2.y * e.y);
                g = b.bodyB.m_xf.R;
                for (c = 0; c < b.pointCount; ++c) e =
                    b.points[c].localPoint, d = b.bodyB.m_xf.position.x + (g.col1.x * e.x + g.col2.x * e.y), e = b.bodyB.m_xf.position.y + (g.col1.y * e.x + g.col2.y * e.y), this.m_separations[c] = (d - f) * this.m_normal.x + (e - n) * this.m_normal.y - b.radius, this.m_points[c].x = d, this.m_points[c].y = e;
                break;
            case T.e_faceB:
                g = b.bodyB.m_xf.R;
                e = b.localPlaneNormal;
                this.m_normal.x = g.col1.x * e.x + g.col2.x * e.y;
                this.m_normal.y = g.col1.y * e.x + g.col2.y * e.y;
                g = b.bodyB.m_xf.R;
                e = b.localPoint;
                f = b.bodyB.m_xf.position.x + (g.col1.x * e.x + g.col2.x * e.y);
                n = b.bodyB.m_xf.position.y +
                    (g.col1.y * e.x + g.col2.y * e.y);
                g = b.bodyA.m_xf.R;
                for (c = 0; c < b.pointCount; ++c) e = b.points[c].localPoint, d = b.bodyA.m_xf.position.x + (g.col1.x * e.x + g.col2.x * e.y), e = b.bodyA.m_xf.position.y + (g.col1.y * e.x + g.col2.y * e.y), this.m_separations[c] = (d - f) * this.m_normal.x + (e - n) * this.m_normal.y - b.radius, this.m_points[c].Set(d, e);
                this.m_normal.x *= -1;
                this.m_normal.y *= -1
        }
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointA = new N;
        Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointB =
            new N
    })
})();
(function() {
    var b = Box2D.Common.Math.b2Mat22,
        c = Box2D.Common.Math.b2Math,
        d = Box2D.Common.Math.b2Vec2,
        e = Box2D.Common.b2Color,
        f = Box2D.Dynamics.Controllers.b2BuoyancyController,
        j = Box2D.Dynamics.Controllers.b2ConstantAccelController,
        p = Box2D.Dynamics.Controllers.b2ConstantForceController,
        m = Box2D.Dynamics.Controllers.b2Controller,
        s = Box2D.Dynamics.Controllers.b2ControllerEdge,
        v = Box2D.Dynamics.Controllers.b2GravityController,
        A = Box2D.Dynamics.Controllers.b2TensorDampingController;
    Box2D.inherit(f, Box2D.Dynamics.Controllers.b2Controller);
    f.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    f.b2BuoyancyController = function() {
        Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
        this.normal = new d(0, -1);
        this.density = this.offset = 0;
        this.velocity = new d(0, 0);
        this.linearDrag = 2;
        this.angularDrag = 1;
        this.useDensity = !1;
        this.useWorldGravity = !0;
        this.gravity = null
    };
    f.prototype.Step = function() {
        if (this.m_bodyList) {
            this.useWorldGravity && (this.gravity = this.GetWorld().GetGravity().Copy());
            for (var b = this.m_bodyList; b; b =
                b.nextBody) {
                var c = b.body;
                if (!1 != c.IsAwake()) {
                    for (var e = new d, f = new d, j = 0, m = 0, p = c.GetFixtureList(); p; p = p.GetNext()) {
                        var s = new d,
                            v = p.GetShape().ComputeSubmergedArea(this.normal, this.offset, c.GetTransform(), s),
                            j = j + v;
                        e.x += v * s.x;
                        e.y += v * s.y;
                        var A = 0,
                            A = 1,
                            m = m + v * A;
                        f.x += v * s.x * A;
                        f.y += v * s.y * A
                    }
                    e.x /= j;
                    e.y /= j;
                    f.x /= m;
                    f.y /= m;
                    j < Number.MIN_VALUE || (m = this.gravity.GetNegative(), m.Multiply(this.density * j), c.ApplyForce(m, f), f = c.GetLinearVelocityFromWorldPoint(e), f.Subtract(this.velocity), f.Multiply(-this.linearDrag * j), c.ApplyForce(f,
                        e), c.ApplyTorque(-c.GetInertia() / c.GetMass() * j * c.GetAngularVelocity() * this.angularDrag))
                }
            }
        }
    };
    f.prototype.Draw = function(b) {
        var c = new d,
            f = new d;
        c.x = this.normal.x * this.offset + 1E3 * this.normal.y;
        c.y = this.normal.y * this.offset - 1E3 * this.normal.x;
        f.x = this.normal.x * this.offset - 1E3 * this.normal.y;
        f.y = this.normal.y * this.offset + 1E3 * this.normal.x;
        var j = new e(0, 0, 1);
        b.DrawSegment(c, f, j)
    };
    Box2D.inherit(j, Box2D.Dynamics.Controllers.b2Controller);
    j.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    j.b2ConstantAccelController = function() {
        Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
        this.A = new d(0, 0)
    };
    j.prototype.Step = function(b) {
        b = new d(this.A.x * b.dt, this.A.y * b.dt);
        for (var c = this.m_bodyList; c; c = c.nextBody) {
            var e = c.body;
            e.IsAwake() && e.SetLinearVelocity(new d(e.GetLinearVelocity().x + b.x, e.GetLinearVelocity().y + b.y))
        }
    };
    Box2D.inherit(p, Box2D.Dynamics.Controllers.b2Controller);
    p.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    p.b2ConstantForceController =
        function() {
            Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
            this.F = new d(0, 0)
        };
    p.prototype.Step = function() {
        for (var b = this.m_bodyList; b; b = b.nextBody) {
            var c = b.body;
            c.IsAwake() && c.ApplyForce(this.F, c.GetWorldCenter())
        }
    };
    m.b2Controller = function() {};
    m.prototype.Step = function() {};
    m.prototype.Draw = function() {};
    m.prototype.AddBody = function(b) {
        var c = new s;
        c.controller = this;
        c.body = b;
        c.nextBody = this.m_bodyList;
        c.prevBody = null;
        this.m_bodyList = c;
        c.nextBody && (c.nextBody.prevBody = c);
        this.m_bodyCount++;
        c.nextController = b.m_controllerList;
        c.prevController = null;
        b.m_controllerList = c;
        c.nextController && (c.nextController.prevController = c);
        b.m_controllerCount++
    };
    m.prototype.RemoveBody = function(b) {
        for (var c = b.m_controllerList; c && c.controller != this;) c = c.nextController;
        c.prevBody && (c.prevBody.nextBody = c.nextBody);
        c.nextBody && (c.nextBody.prevBody = c.prevBody);
        c.nextController && (c.nextController.prevController = c.prevController);
        c.prevController && (c.prevController.nextController = c.nextController);
        this.m_bodyList ==
            c && (this.m_bodyList = c.nextBody);
        b.m_controllerList == c && (b.m_controllerList = c.nextController);
        b.m_controllerCount--;
        this.m_bodyCount--
    };
    m.prototype.Clear = function() {
        for (; this.m_bodyList;) this.RemoveBody(this.m_bodyList.body)
    };
    m.prototype.GetNext = function() {
        return this.m_next
    };
    m.prototype.GetWorld = function() {
        return this.m_world
    };
    m.prototype.GetBodyList = function() {
        return this.m_bodyList
    };
    s.b2ControllerEdge = function() {};
    Box2D.inherit(v, Box2D.Dynamics.Controllers.b2Controller);
    v.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    v.b2GravityController = function() {
        Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
        this.G = 1;
        this.invSqr = !0
    };
    v.prototype.Step = function() {
        var b = null,
            c = null,
            e = null,
            f = 0,
            j = null,
            m = null,
            p = null,
            s = 0,
            v = 0,
            A = 0;
        if (this.invSqr)
            for (b = this.m_bodyList; b; b = b.nextBody) {
                c = b.body;
                e = c.GetWorldCenter();
                f = c.GetMass();
                for (j = this.m_bodyList; j != b; j = j.nextBody) m = j.body, p = m.GetWorldCenter(), s = p.x - e.x, v = p.y - e.y, A = s * s + v * v, A < Number.MIN_VALUE || (s = new d(s, v), s.Multiply(this.G / A / Math.sqrt(A) * f * m.GetMass()),
                    c.IsAwake() && c.ApplyForce(s, e), s.Multiply(-1), m.IsAwake() && m.ApplyForce(s, p))
            } else
                for (b = this.m_bodyList; b; b = b.nextBody) {
                    c = b.body;
                    e = c.GetWorldCenter();
                    f = c.GetMass();
                    for (j = this.m_bodyList; j != b; j = j.nextBody) m = j.body, p = m.GetWorldCenter(), s = p.x - e.x, v = p.y - e.y, A = s * s + v * v, A < Number.MIN_VALUE || (s = new d(s, v), s.Multiply(this.G / A * f * m.GetMass()), c.IsAwake() && c.ApplyForce(s, e), s.Multiply(-1), m.IsAwake() && m.ApplyForce(s, p))
                }
    };
    Box2D.inherit(A, Box2D.Dynamics.Controllers.b2Controller);
    A.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    A.b2TensorDampingController = function() {
        Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
        this.T = new b;
        this.maxTimestep = 0
    };
    A.prototype.SetAxisAligned = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        this.T.col1.x = -b;
        this.T.col1.y = 0;
        this.T.col2.x = 0;
        this.T.col2.y = -c;
        this.maxTimestep = 0 < b || 0 < c ? 1 / Math.max(b, c) : 0
    };
    A.prototype.Step = function(b) {
        b = b.dt;
        if (!(b <= Number.MIN_VALUE)) {
            b > this.maxTimestep && 0 < this.maxTimestep && (b = this.maxTimestep);
            for (var e = this.m_bodyList; e; e = e.nextBody) {
                var f =
                    e.body;
                if (f.IsAwake()) {
                    var j = f.GetWorldVector(c.MulMV(this.T, f.GetLocalVector(f.GetLinearVelocity())));
                    f.SetLinearVelocity(new d(f.GetLinearVelocity().x + j.x * b, f.GetLinearVelocity().y + j.y * b))
                }
            }
        }
    }
})();
(function() {
    var b = Box2D.Common.b2Settings,
        c = Box2D.Common.Math.b2Mat22,
        d = Box2D.Common.Math.b2Mat33,
        e = Box2D.Common.Math.b2Math,
        f = Box2D.Common.Math.b2Vec2,
        j = Box2D.Common.Math.b2Vec3,
        p = Box2D.Dynamics.Joints.b2DistanceJoint,
        m = Box2D.Dynamics.Joints.b2DistanceJointDef,
        s = Box2D.Dynamics.Joints.b2FrictionJoint,
        v = Box2D.Dynamics.Joints.b2FrictionJointDef,
        A = Box2D.Dynamics.Joints.b2GearJoint,
        B = Box2D.Dynamics.Joints.b2GearJointDef,
        z = Box2D.Dynamics.Joints.b2Jacobian,
        x = Box2D.Dynamics.Joints.b2Joint,
        I = Box2D.Dynamics.Joints.b2JointDef,
        E = Box2D.Dynamics.Joints.b2JointEdge,
        t = Box2D.Dynamics.Joints.b2LineJoint,
        H = Box2D.Dynamics.Joints.b2LineJointDef,
        L = Box2D.Dynamics.Joints.b2MouseJoint,
        Q = Box2D.Dynamics.Joints.b2MouseJointDef,
        M = Box2D.Dynamics.Joints.b2PrismaticJoint,
        P = Box2D.Dynamics.Joints.b2PrismaticJointDef,
        C = Box2D.Dynamics.Joints.b2PulleyJoint,
        S = Box2D.Dynamics.Joints.b2PulleyJointDef,
        N = Box2D.Dynamics.Joints.b2RevoluteJoint,
        O = Box2D.Dynamics.Joints.b2RevoluteJointDef,
        Z = Box2D.Dynamics.Joints.b2WeldJoint,
        T = Box2D.Dynamics.Joints.b2WeldJointDef;
    Box2D.inherit(p, Box2D.Dynamics.Joints.b2Joint);
    p.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    p.b2DistanceJoint = function() {
        Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
        this.m_localAnchor1 = new f;
        this.m_localAnchor2 = new f;
        this.m_u = new f
    };
    p.prototype.GetAnchorA = function() {
        return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)
    };
    p.prototype.GetAnchorB = function() {
        return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)
    };
    p.prototype.GetReactionForce = function(b) {
        void 0 === b && (b = 0);
        return new f(b * this.m_impulse * this.m_u.x, b * this.m_impulse * this.m_u.y)
    };
    p.prototype.GetReactionTorque = function() {
        return 0
    };
    p.prototype.GetLength = function() {
        return this.m_length
    };
    p.prototype.SetLength = function(b) {
        void 0 === b && (b = 0);
        this.m_length = b
    };
    p.prototype.GetFrequency = function() {
        return this.m_frequencyHz
    };
    p.prototype.SetFrequency = function(b) {
        void 0 === b && (b = 0);
        this.m_frequencyHz = b
    };
    p.prototype.GetDampingRatio = function() {
        return this.m_dampingRatio
    };
    p.prototype.SetDampingRatio = function(b) {
        void 0 ===
            b && (b = 0);
        this.m_dampingRatio = b
    };
    p.prototype.b2DistanceJoint = function(b) {
        this.__super.b2Joint.call(this, b);
        this.m_localAnchor1.SetV(b.localAnchorA);
        this.m_localAnchor2.SetV(b.localAnchorB);
        this.m_length = b.length;
        this.m_frequencyHz = b.frequencyHz;
        this.m_dampingRatio = b.dampingRatio;
        this.m_bias = this.m_gamma = this.m_impulse = 0
    };
    p.prototype.InitVelocityConstraints = function(c) {
        var d, e = 0,
            f = this.m_bodyA,
            j = this.m_bodyB;
        d = f.m_xf.R;
        var m = this.m_localAnchor1.x - f.m_sweep.localCenter.x,
            p = this.m_localAnchor1.y - f.m_sweep.localCenter.y,
            e = d.col1.x * m + d.col2.x * p,
            p = d.col1.y * m + d.col2.y * p,
            m = e;
        d = j.m_xf.R;
        var g = this.m_localAnchor2.x - j.m_sweep.localCenter.x,
            r = this.m_localAnchor2.y - j.m_sweep.localCenter.y,
            e = d.col1.x * g + d.col2.x * r,
            r = d.col1.y * g + d.col2.y * r,
            g = e;
        this.m_u.x = j.m_sweep.c.x + g - f.m_sweep.c.x - m;
        this.m_u.y = j.m_sweep.c.y + r - f.m_sweep.c.y - p;
        e = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);
        e > b.b2_linearSlop ? this.m_u.Multiply(1 / e) : this.m_u.SetZero();
        d = m * this.m_u.y - p * this.m_u.x;
        var s = g * this.m_u.y - r * this.m_u.x;
        d = f.m_invMass + f.m_invI *
            d * d + j.m_invMass + j.m_invI * s * s;
        this.m_mass = 0 != d ? 1 / d : 0;
        if (0 < this.m_frequencyHz) {
            var e = e - this.m_length,
                s = 2 * Math.PI * this.m_frequencyHz,
                q = this.m_mass * s * s;
            this.m_gamma = c.dt * (2 * this.m_mass * this.m_dampingRatio * s + c.dt * q);
            this.m_gamma = 0 != this.m_gamma ? 1 / this.m_gamma : 0;
            this.m_bias = e * c.dt * q * this.m_gamma;
            this.m_mass = d + this.m_gamma;
            this.m_mass = 0 != this.m_mass ? 1 / this.m_mass : 0
        }
        c.warmStarting ? (this.m_impulse *= c.dtRatio, c = this.m_impulse * this.m_u.x, d = this.m_impulse * this.m_u.y, f.m_linearVelocity.x -= f.m_invMass * c, f.m_linearVelocity.y -=
            f.m_invMass * d, f.m_angularVelocity -= f.m_invI * (m * d - p * c), j.m_linearVelocity.x += j.m_invMass * c, j.m_linearVelocity.y += j.m_invMass * d, j.m_angularVelocity += j.m_invI * (g * d - r * c)) : this.m_impulse = 0
    };
    p.prototype.SolveVelocityConstraints = function() {
        var b, c = this.m_bodyA,
            d = this.m_bodyB;
        b = c.m_xf.R;
        var e = this.m_localAnchor1.x - c.m_sweep.localCenter.x,
            f = this.m_localAnchor1.y - c.m_sweep.localCenter.y,
            j = b.col1.x * e + b.col2.x * f,
            f = b.col1.y * e + b.col2.y * f,
            e = j;
        b = d.m_xf.R;
        var m = this.m_localAnchor2.x - d.m_sweep.localCenter.x,
            g = this.m_localAnchor2.y -
            d.m_sweep.localCenter.y,
            j = b.col1.x * m + b.col2.x * g,
            g = b.col1.y * m + b.col2.y * g,
            m = j,
            j = -this.m_mass * (this.m_u.x * (d.m_linearVelocity.x + -d.m_angularVelocity * g - (c.m_linearVelocity.x + -c.m_angularVelocity * f)) + this.m_u.y * (d.m_linearVelocity.y + d.m_angularVelocity * m - (c.m_linearVelocity.y + c.m_angularVelocity * e)) + this.m_bias + this.m_gamma * this.m_impulse);
        this.m_impulse += j;
        b = j * this.m_u.x;
        j *= this.m_u.y;
        c.m_linearVelocity.x -= c.m_invMass * b;
        c.m_linearVelocity.y -= c.m_invMass * j;
        c.m_angularVelocity -= c.m_invI * (e * j - f * b);
        d.m_linearVelocity.x +=
            d.m_invMass * b;
        d.m_linearVelocity.y += d.m_invMass * j;
        d.m_angularVelocity += d.m_invI * (m * j - g * b)
    };
    p.prototype.SolvePositionConstraints = function() {
        var c;
        if (0 < this.m_frequencyHz) return !0;
        var d = this.m_bodyA,
            f = this.m_bodyB;
        c = d.m_xf.R;
        var j = this.m_localAnchor1.x - d.m_sweep.localCenter.x,
            m = this.m_localAnchor1.y - d.m_sweep.localCenter.y,
            p = c.col1.x * j + c.col2.x * m,
            m = c.col1.y * j + c.col2.y * m,
            j = p;
        c = f.m_xf.R;
        var s = this.m_localAnchor2.x - f.m_sweep.localCenter.x,
            g = this.m_localAnchor2.y - f.m_sweep.localCenter.y,
            p = c.col1.x * s + c.col2.x *
            g,
            g = c.col1.y * s + c.col2.y * g,
            s = p,
            p = f.m_sweep.c.x + s - d.m_sweep.c.x - j,
            r = f.m_sweep.c.y + g - d.m_sweep.c.y - m;
        c = Math.sqrt(p * p + r * r);
        p /= c;
        r /= c;
        c -= this.m_length;
        c = e.Clamp(c, -b.b2_maxLinearCorrection, b.b2_maxLinearCorrection);
        var t = -this.m_mass * c;
        this.m_u.Set(p, r);
        p = t * this.m_u.x;
        r = t * this.m_u.y;
        d.m_sweep.c.x -= d.m_invMass * p;
        d.m_sweep.c.y -= d.m_invMass * r;
        d.m_sweep.a -= d.m_invI * (j * r - m * p);
        f.m_sweep.c.x += f.m_invMass * p;
        f.m_sweep.c.y += f.m_invMass * r;
        f.m_sweep.a += f.m_invI * (s * r - g * p);
        d.SynchronizeTransform();
        f.SynchronizeTransform();
        return e.Abs(c) < b.b2_linearSlop
    };
    Box2D.inherit(m, Box2D.Dynamics.Joints.b2JointDef);
    m.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    m.b2DistanceJointDef = function() {
        Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
        this.localAnchorA = new f;
        this.localAnchorB = new f
    };
    m.prototype.b2DistanceJointDef = function() {
        this.__super.b2JointDef.call(this);
        this.type = x.e_distanceJoint;
        this.length = 1;
        this.dampingRatio = this.frequencyHz = 0
    };
    m.prototype.Initialize = function(b, c, d, e) {
        this.bodyA =
            b;
        this.bodyB = c;
        this.localAnchorA.SetV(this.bodyA.GetLocalPoint(d));
        this.localAnchorB.SetV(this.bodyB.GetLocalPoint(e));
        b = e.x - d.x;
        d = e.y - d.y;
        this.length = Math.sqrt(b * b + d * d);
        this.dampingRatio = this.frequencyHz = 0
    };
    Box2D.inherit(s, Box2D.Dynamics.Joints.b2Joint);
    s.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    s.b2FrictionJoint = function() {
        Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
        this.m_localAnchorA = new f;
        this.m_localAnchorB = new f;
        this.m_linearMass = new c;
        this.m_linearImpulse =
            new f
    };
    s.prototype.GetAnchorA = function() {
        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA)
    };
    s.prototype.GetAnchorB = function() {
        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB)
    };
    s.prototype.GetReactionForce = function(b) {
        void 0 === b && (b = 0);
        return new f(b * this.m_linearImpulse.x, b * this.m_linearImpulse.y)
    };
    s.prototype.GetReactionTorque = function(b) {
        void 0 === b && (b = 0);
        return b * this.m_angularImpulse
    };
    s.prototype.SetMaxForce = function(b) {
        void 0 === b && (b = 0);
        this.m_maxForce = b
    };
    s.prototype.GetMaxForce = function() {
        return this.m_maxForce
    };
    s.prototype.SetMaxTorque = function(b) {
        void 0 === b && (b = 0);
        this.m_maxTorque = b
    };
    s.prototype.GetMaxTorque = function() {
        return this.m_maxTorque
    };
    s.prototype.b2FrictionJoint = function(b) {
        this.__super.b2Joint.call(this, b);
        this.m_localAnchorA.SetV(b.localAnchorA);
        this.m_localAnchorB.SetV(b.localAnchorB);
        this.m_linearMass.SetZero();
        this.m_angularMass = 0;
        this.m_linearImpulse.SetZero();
        this.m_angularImpulse = 0;
        this.m_maxForce = b.maxForce;
        this.m_maxTorque = b.maxTorque
    };
    s.prototype.InitVelocityConstraints = function(b) {
        var d,
            e = 0,
            f = this.m_bodyA,
            j = this.m_bodyB;
        d = f.m_xf.R;
        var m = this.m_localAnchorA.x - f.m_sweep.localCenter.x,
            p = this.m_localAnchorA.y - f.m_sweep.localCenter.y,
            e = d.col1.x * m + d.col2.x * p,
            p = d.col1.y * m + d.col2.y * p,
            m = e;
        d = j.m_xf.R;
        var g = this.m_localAnchorB.x - j.m_sweep.localCenter.x,
            r = this.m_localAnchorB.y - j.m_sweep.localCenter.y,
            e = d.col1.x * g + d.col2.x * r,
            r = d.col1.y * g + d.col2.y * r,
            g = e;
        d = f.m_invMass;
        var e = j.m_invMass,
            s = f.m_invI,
            q = j.m_invI,
            t = new c;
        t.col1.x = d + e;
        t.col2.x = 0;
        t.col1.y = 0;
        t.col2.y = d + e;
        t.col1.x += s * p * p;
        t.col2.x += -s * m *
            p;
        t.col1.y += -s * m * p;
        t.col2.y += s * m * m;
        t.col1.x += q * r * r;
        t.col2.x += -q * g * r;
        t.col1.y += -q * g * r;
        t.col2.y += q * g * g;
        t.GetInverse(this.m_linearMass);
        this.m_angularMass = s + q;
        0 < this.m_angularMass && (this.m_angularMass = 1 / this.m_angularMass);
        b.warmStarting ? (this.m_linearImpulse.x *= b.dtRatio, this.m_linearImpulse.y *= b.dtRatio, this.m_angularImpulse *= b.dtRatio, b = this.m_linearImpulse, f.m_linearVelocity.x -= d * b.x, f.m_linearVelocity.y -= d * b.y, f.m_angularVelocity -= s * (m * b.y - p * b.x + this.m_angularImpulse), j.m_linearVelocity.x += e * b.x,
            j.m_linearVelocity.y += e * b.y, j.m_angularVelocity += q * (g * b.y - r * b.x + this.m_angularImpulse)) : (this.m_linearImpulse.SetZero(), this.m_angularImpulse = 0)
    };
    s.prototype.SolveVelocityConstraints = function(b) {
        var c, d = 0,
            j = this.m_bodyA,
            m = this.m_bodyB,
            p = j.m_linearVelocity,
            s = j.m_angularVelocity,
            g = m.m_linearVelocity,
            r = m.m_angularVelocity,
            t = j.m_invMass,
            q = m.m_invMass,
            x = j.m_invI,
            v = m.m_invI;
        c = j.m_xf.R;
        var A = this.m_localAnchorA.x - j.m_sweep.localCenter.x,
            z = this.m_localAnchorA.y - j.m_sweep.localCenter.y,
            d = c.col1.x * A + c.col2.x *
            z,
            z = c.col1.y * A + c.col2.y * z,
            A = d;
        c = m.m_xf.R;
        var B = this.m_localAnchorB.x - m.m_sweep.localCenter.x,
            l = this.m_localAnchorB.y - m.m_sweep.localCenter.y,
            d = c.col1.x * B + c.col2.x * l,
            l = c.col1.y * B + c.col2.y * l,
            B = d,
            d = -this.m_angularMass * (r - s),
            C = this.m_angularImpulse;
        c = b.dt * this.m_maxTorque;
        this.m_angularImpulse = e.Clamp(this.m_angularImpulse + d, -c, c);
        d = this.m_angularImpulse - C;
        s -= x * d;
        r += v * d;
        c = e.MulMV(this.m_linearMass, new f(-(g.x - r * l - p.x + s * z), -(g.y + r * B - p.y - s * A)));
        d = this.m_linearImpulse.Copy();
        this.m_linearImpulse.Add(c);
        c = b.dt * this.m_maxForce;
        this.m_linearImpulse.LengthSquared() > c * c && (this.m_linearImpulse.Normalize(), this.m_linearImpulse.Multiply(c));
        c = e.SubtractVV(this.m_linearImpulse, d);
        p.x -= t * c.x;
        p.y -= t * c.y;
        s -= x * (A * c.y - z * c.x);
        g.x += q * c.x;
        g.y += q * c.y;
        r += v * (B * c.y - l * c.x);
        j.m_angularVelocity = s;
        m.m_angularVelocity = r
    };
    s.prototype.SolvePositionConstraints = function() {
        return !0
    };
    Box2D.inherit(v, Box2D.Dynamics.Joints.b2JointDef);
    v.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    v.b2FrictionJointDef = function() {
        Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,
            arguments);
        this.localAnchorA = new f;
        this.localAnchorB = new f
    };
    v.prototype.b2FrictionJointDef = function() {
        this.__super.b2JointDef.call(this);
        this.type = x.e_frictionJoint;
        this.maxTorque = this.maxForce = 0
    };
    v.prototype.Initialize = function(b, c, d) {
        this.bodyA = b;
        this.bodyB = c;
        this.localAnchorA.SetV(this.bodyA.GetLocalPoint(d));
        this.localAnchorB.SetV(this.bodyB.GetLocalPoint(d))
    };
    Box2D.inherit(A, Box2D.Dynamics.Joints.b2Joint);
    A.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    A.b2GearJoint = function() {
        Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this,
            arguments);
        this.m_groundAnchor1 = new f;
        this.m_groundAnchor2 = new f;
        this.m_localAnchor1 = new f;
        this.m_localAnchor2 = new f;
        this.m_J = new z
    };
    A.prototype.GetAnchorA = function() {
        return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)
    };
    A.prototype.GetAnchorB = function() {
        return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)
    };
    A.prototype.GetReactionForce = function(b) {
        void 0 === b && (b = 0);
        return new f(b * this.m_impulse * this.m_J.linearB.x, b * this.m_impulse * this.m_J.linearB.y)
    };
    A.prototype.GetReactionTorque = function(b) {
        void 0 ===
            b && (b = 0);
        var c = this.m_bodyB.m_xf.R,
            d = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x,
            e = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y,
            f = c.col1.x * d + c.col2.x * e,
            e = c.col1.y * d + c.col2.y * e;
        return b * (this.m_impulse * this.m_J.angularB - f * this.m_impulse * this.m_J.linearB.y + e * this.m_impulse * this.m_J.linearB.x)
    };
    A.prototype.GetRatio = function() {
        return this.m_ratio
    };
    A.prototype.SetRatio = function(b) {
        void 0 === b && (b = 0);
        this.m_ratio = b
    };
    A.prototype.b2GearJoint = function(b) {
        this.__super.b2Joint.call(this,
            b);
        var c = parseInt(b.joint1.m_type),
            d = parseInt(b.joint2.m_type);
        this.m_prismatic2 = this.m_revolute2 = this.m_prismatic1 = this.m_revolute1 = null;
        var e = 0,
            f = 0;
        this.m_ground1 = b.joint1.GetBodyA();
        this.m_bodyA = b.joint1.GetBodyB();
        c == x.e_revoluteJoint ? (this.m_revolute1 = b.joint1 instanceof N ? b.joint1 : null, this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1), this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2), e = this.m_revolute1.GetJointAngle()) : (this.m_prismatic1 = b.joint1 instanceof M ? b.joint1 : null,
            this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1), this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2), e = this.m_prismatic1.GetJointTranslation());
        this.m_ground2 = b.joint2.GetBodyA();
        this.m_bodyB = b.joint2.GetBodyB();
        d == x.e_revoluteJoint ? (this.m_revolute2 = b.joint2 instanceof N ? b.joint2 : null, this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1), this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2), f = this.m_revolute2.GetJointAngle()) : (this.m_prismatic2 = b.joint2 instanceof M ? b.joint2 :
            null, this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1), this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2), f = this.m_prismatic2.GetJointTranslation());
        this.m_ratio = b.ratio;
        this.m_constant = e + this.m_ratio * f;
        this.m_impulse = 0
    };
    A.prototype.InitVelocityConstraints = function(b) {
        var c = this.m_ground1,
            d = this.m_ground2,
            e = this.m_bodyA,
            f = this.m_bodyB,
            j = 0,
            m = 0,
            g = 0,
            r = 0,
            p = 0,
            q = 0;
        this.m_J.SetZero();
        this.m_revolute1 ? (this.m_J.angularA = -1, q += e.m_invI) : (c = c.m_xf.R, m = this.m_prismatic1.m_localXAxis1, j = c.col1.x *
            m.x + c.col2.x * m.y, m = c.col1.y * m.x + c.col2.y * m.y, c = e.m_xf.R, g = this.m_localAnchor1.x - e.m_sweep.localCenter.x, r = this.m_localAnchor1.y - e.m_sweep.localCenter.y, p = c.col1.x * g + c.col2.x * r, r = c.col1.y * g + c.col2.y * r, g = p * m - r * j, this.m_J.linearA.Set(-j, -m), this.m_J.angularA = -g, q += e.m_invMass + e.m_invI * g * g);
        this.m_revolute2 ? (this.m_J.angularB = -this.m_ratio, q += this.m_ratio * this.m_ratio * f.m_invI) : (c = d.m_xf.R, m = this.m_prismatic2.m_localXAxis1, j = c.col1.x * m.x + c.col2.x * m.y, m = c.col1.y * m.x + c.col2.y * m.y, c = f.m_xf.R, g = this.m_localAnchor2.x -
            f.m_sweep.localCenter.x, r = this.m_localAnchor2.y - f.m_sweep.localCenter.y, p = c.col1.x * g + c.col2.x * r, r = c.col1.y * g + c.col2.y * r, g = p * m - r * j, this.m_J.linearB.Set(-this.m_ratio * j, -this.m_ratio * m), this.m_J.angularB = -this.m_ratio * g, q += this.m_ratio * this.m_ratio * (f.m_invMass + f.m_invI * g * g));
        this.m_mass = 0 < q ? 1 / q : 0;
        b.warmStarting ? (e.m_linearVelocity.x += e.m_invMass * this.m_impulse * this.m_J.linearA.x, e.m_linearVelocity.y += e.m_invMass * this.m_impulse * this.m_J.linearA.y, e.m_angularVelocity += e.m_invI * this.m_impulse * this.m_J.angularA,
            f.m_linearVelocity.x += f.m_invMass * this.m_impulse * this.m_J.linearB.x, f.m_linearVelocity.y += f.m_invMass * this.m_impulse * this.m_J.linearB.y, f.m_angularVelocity += f.m_invI * this.m_impulse * this.m_J.angularB) : this.m_impulse = 0
    };
    A.prototype.SolveVelocityConstraints = function() {
        var b = this.m_bodyA,
            c = this.m_bodyB,
            d = -this.m_mass * this.m_J.Compute(b.m_linearVelocity, b.m_angularVelocity, c.m_linearVelocity, c.m_angularVelocity);
        this.m_impulse += d;
        b.m_linearVelocity.x += b.m_invMass * d * this.m_J.linearA.x;
        b.m_linearVelocity.y +=
            b.m_invMass * d * this.m_J.linearA.y;
        b.m_angularVelocity += b.m_invI * d * this.m_J.angularA;
        c.m_linearVelocity.x += c.m_invMass * d * this.m_J.linearB.x;
        c.m_linearVelocity.y += c.m_invMass * d * this.m_J.linearB.y;
        c.m_angularVelocity += c.m_invI * d * this.m_J.angularB
    };
    A.prototype.SolvePositionConstraints = function() {
        var c = this.m_bodyA,
            d = this.m_bodyB,
            e = 0,
            f = 0,
            e = this.m_revolute1 ? this.m_revolute1.GetJointAngle() : this.m_prismatic1.GetJointTranslation(),
            f = this.m_revolute2 ? this.m_revolute2.GetJointAngle() : this.m_prismatic2.GetJointTranslation(),
            e = -this.m_mass * (this.m_constant - (e + this.m_ratio * f));
        c.m_sweep.c.x += c.m_invMass * e * this.m_J.linearA.x;
        c.m_sweep.c.y += c.m_invMass * e * this.m_J.linearA.y;
        c.m_sweep.a += c.m_invI * e * this.m_J.angularA;
        d.m_sweep.c.x += d.m_invMass * e * this.m_J.linearB.x;
        d.m_sweep.c.y += d.m_invMass * e * this.m_J.linearB.y;
        d.m_sweep.a += d.m_invI * e * this.m_J.angularB;
        c.SynchronizeTransform();
        d.SynchronizeTransform();
        return 0 < b.b2_linearSlop
    };
    Box2D.inherit(B, Box2D.Dynamics.Joints.b2JointDef);
    B.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    B.b2GearJointDef = function() {
        Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments)
    };
    B.prototype.b2GearJointDef = function() {
        this.__super.b2JointDef.call(this);
        this.type = x.e_gearJoint;
        this.joint2 = this.joint1 = null;
        this.ratio = 1
    };
    z.b2Jacobian = function() {
        this.linearA = new f;
        this.linearB = new f
    };
    z.prototype.SetZero = function() {
        this.linearA.SetZero();
        this.angularA = 0;
        this.linearB.SetZero();
        this.angularB = 0
    };
    z.prototype.Set = function(b, c, d, e) {
        void 0 === c && (c = 0);
        void 0 === e && (e = 0);
        this.linearA.SetV(b);
        this.angularA =
            c;
        this.linearB.SetV(d);
        this.angularB = e
    };
    z.prototype.Compute = function(b, c, d, e) {
        void 0 === c && (c = 0);
        void 0 === e && (e = 0);
        return this.linearA.x * b.x + this.linearA.y * b.y + this.angularA * c + (this.linearB.x * d.x + this.linearB.y * d.y) + this.angularB * e
    };
    x.b2Joint = function() {
        this.m_edgeA = new E;
        this.m_edgeB = new E;
        this.m_localCenterA = new f;
        this.m_localCenterB = new f
    };
    x.prototype.GetType = function() {
        return this.m_type
    };
    x.prototype.GetAnchorA = function() {
        return null
    };
    x.prototype.GetAnchorB = function() {
        return null
    };
    x.prototype.GetReactionForce =
        function() {
            return null
        };
    x.prototype.GetReactionTorque = function() {
        return 0
    };
    x.prototype.GetBodyA = function() {
        return this.m_bodyA
    };
    x.prototype.GetBodyB = function() {
        return this.m_bodyB
    };
    x.prototype.GetNext = function() {
        return this.m_next
    };
    x.prototype.GetUserData = function() {
        return this.m_userData
    };
    x.prototype.SetUserData = function(b) {
        this.m_userData = b
    };
    x.prototype.IsActive = function() {
        return this.m_bodyA.IsActive() && this.m_bodyB.IsActive()
    };
    x.Create = function(b) {
        var c = null;
        switch (b.type) {
            case x.e_distanceJoint:
                c =
                    new p(b instanceof m ? b : null);
                break;
            case x.e_mouseJoint:
                c = new L(b instanceof Q ? b : null);
                break;
            case x.e_prismaticJoint:
                c = new M(b instanceof P ? b : null);
                break;
            case x.e_revoluteJoint:
                c = new N(b instanceof O ? b : null);
                break;
            case x.e_pulleyJoint:
                c = new C(b instanceof S ? b : null);
                break;
            case x.e_gearJoint:
                c = new A(b instanceof B ? b : null);
                break;
            case x.e_lineJoint:
                c = new t(b instanceof H ? b : null);
                break;
            case x.e_weldJoint:
                c = new Z(b instanceof T ? b : null);
                break;
            case x.e_frictionJoint:
                c = new s(b instanceof v ? b : null)
        }
        return c
    };
    x.Destroy = function() {};
    x.prototype.b2Joint = function(c) {
        b.b2Assert(c.bodyA != c.bodyB);
        this.m_type = c.type;
        this.m_next = this.m_prev = null;
        this.m_bodyA = c.bodyA;
        this.m_bodyB = c.bodyB;
        this.m_collideConnected = c.collideConnected;
        this.m_islandFlag = !1;
        this.m_userData = c.userData
    };
    x.prototype.InitVelocityConstraints = function() {};
    x.prototype.SolveVelocityConstraints = function() {};
    x.prototype.FinalizeVelocityConstraints = function() {};
    x.prototype.SolvePositionConstraints = function() {
        return !1
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.Joints.b2Joint.e_unknownJoint =
            0;
        Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint = 1;
        Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint = 2;
        Box2D.Dynamics.Joints.b2Joint.e_distanceJoint = 3;
        Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint = 4;
        Box2D.Dynamics.Joints.b2Joint.e_mouseJoint = 5;
        Box2D.Dynamics.Joints.b2Joint.e_gearJoint = 6;
        Box2D.Dynamics.Joints.b2Joint.e_lineJoint = 7;
        Box2D.Dynamics.Joints.b2Joint.e_weldJoint = 8;
        Box2D.Dynamics.Joints.b2Joint.e_frictionJoint = 9;
        Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit = 0;
        Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit =
            1;
        Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit = 2;
        Box2D.Dynamics.Joints.b2Joint.e_equalLimits = 3
    });
    I.b2JointDef = function() {};
    I.prototype.b2JointDef = function() {
        this.type = x.e_unknownJoint;
        this.bodyB = this.bodyA = this.userData = null;
        this.collideConnected = !1
    };
    E.b2JointEdge = function() {};
    Box2D.inherit(t, Box2D.Dynamics.Joints.b2Joint);
    t.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    t.b2LineJoint = function() {
        Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
        this.m_localAnchor1 = new f;
        this.m_localAnchor2 =
            new f;
        this.m_localXAxis1 = new f;
        this.m_localYAxis1 = new f;
        this.m_axis = new f;
        this.m_perp = new f;
        this.m_K = new c;
        this.m_impulse = new f
    };
    t.prototype.GetAnchorA = function() {
        return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)
    };
    t.prototype.GetAnchorB = function() {
        return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)
    };
    t.prototype.GetReactionForce = function(b) {
        void 0 === b && (b = 0);
        return new f(b * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x), b * (this.m_impulse.x * this.m_perp.y +
            (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y))
    };
    t.prototype.GetReactionTorque = function(b) {
        void 0 === b && (b = 0);
        return b * this.m_impulse.y
    };
    t.prototype.GetJointTranslation = function() {
        var b = this.m_bodyA,
            c = this.m_bodyB,
            d = b.GetWorldPoint(this.m_localAnchor1),
            e = c.GetWorldPoint(this.m_localAnchor2),
            c = e.x - d.x,
            d = e.y - d.y,
            b = b.GetWorldVector(this.m_localXAxis1);
        return b.x * c + b.y * d
    };
    t.prototype.GetJointSpeed = function() {
        var b = this.m_bodyA,
            c = this.m_bodyB,
            d;
        d = b.m_xf.R;
        var e = this.m_localAnchor1.x - b.m_sweep.localCenter.x,
            f = this.m_localAnchor1.y - b.m_sweep.localCenter.y,
            j = d.col1.x * e + d.col2.x * f,
            f = d.col1.y * e + d.col2.y * f,
            e = j;
        d = c.m_xf.R;
        var m = this.m_localAnchor2.x - c.m_sweep.localCenter.x,
            g = this.m_localAnchor2.y - c.m_sweep.localCenter.y,
            j = d.col1.x * m + d.col2.x * g,
            g = d.col1.y * m + d.col2.y * g,
            m = j;
        d = c.m_sweep.c.x + m - (b.m_sweep.c.x + e);
        var j = c.m_sweep.c.y + g - (b.m_sweep.c.y + f),
            r = b.GetWorldVector(this.m_localXAxis1),
            p = b.m_linearVelocity,
            q = c.m_linearVelocity,
            b = b.m_angularVelocity,
            c = c.m_angularVelocity;
        return d * -b * r.y + j * b * r.x + (r.x * (q.x + -c *
            g - p.x - -b * f) + r.y * (q.y + c * m - p.y - b * e))
    };
    t.prototype.IsLimitEnabled = function() {
        return this.m_enableLimit
    };
    t.prototype.EnableLimit = function(b) {
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_enableLimit = b
    };
    t.prototype.GetLowerLimit = function() {
        return this.m_lowerTranslation
    };
    t.prototype.GetUpperLimit = function() {
        return this.m_upperTranslation
    };
    t.prototype.SetLimits = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_lowerTranslation = b;
        this.m_upperTranslation =
            c
    };
    t.prototype.IsMotorEnabled = function() {
        return this.m_enableMotor
    };
    t.prototype.EnableMotor = function(b) {
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_enableMotor = b
    };
    t.prototype.SetMotorSpeed = function(b) {
        void 0 === b && (b = 0);
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_motorSpeed = b
    };
    t.prototype.GetMotorSpeed = function() {
        return this.m_motorSpeed
    };
    t.prototype.SetMaxMotorForce = function(b) {
        void 0 === b && (b = 0);
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_maxMotorForce =
            b
    };
    t.prototype.GetMaxMotorForce = function() {
        return this.m_maxMotorForce
    };
    t.prototype.GetMotorForce = function() {
        return this.m_motorImpulse
    };
    t.prototype.b2LineJoint = function(b) {
        this.__super.b2Joint.call(this, b);
        this.m_localAnchor1.SetV(b.localAnchorA);
        this.m_localAnchor2.SetV(b.localAnchorB);
        this.m_localXAxis1.SetV(b.localAxisA);
        this.m_localYAxis1.x = -this.m_localXAxis1.y;
        this.m_localYAxis1.y = this.m_localXAxis1.x;
        this.m_impulse.SetZero();
        this.m_motorImpulse = this.m_motorMass = 0;
        this.m_lowerTranslation = b.lowerTranslation;
        this.m_upperTranslation = b.upperTranslation;
        this.m_maxMotorForce = b.maxMotorForce;
        this.m_motorSpeed = b.motorSpeed;
        this.m_enableLimit = b.enableLimit;
        this.m_enableMotor = b.enableMotor;
        this.m_limitState = x.e_inactiveLimit;
        this.m_axis.SetZero();
        this.m_perp.SetZero()
    };
    t.prototype.InitVelocityConstraints = function(c) {
        var d = this.m_bodyA,
            f = this.m_bodyB,
            j, m = 0;
        this.m_localCenterA.SetV(d.GetLocalCenter());
        this.m_localCenterB.SetV(f.GetLocalCenter());
        var p = d.GetTransform();
        f.GetTransform();
        j = d.m_xf.R;
        var s = this.m_localAnchor1.x -
            this.m_localCenterA.x,
            g = this.m_localAnchor1.y - this.m_localCenterA.y,
            m = j.col1.x * s + j.col2.x * g,
            g = j.col1.y * s + j.col2.y * g,
            s = m;
        j = f.m_xf.R;
        var r = this.m_localAnchor2.x - this.m_localCenterB.x,
            t = this.m_localAnchor2.y - this.m_localCenterB.y,
            m = j.col1.x * r + j.col2.x * t,
            t = j.col1.y * r + j.col2.y * t,
            r = m;
        j = f.m_sweep.c.x + r - d.m_sweep.c.x - s;
        m = f.m_sweep.c.y + t - d.m_sweep.c.y - g;
        this.m_invMassA = d.m_invMass;
        this.m_invMassB = f.m_invMass;
        this.m_invIA = d.m_invI;
        this.m_invIB = f.m_invI;
        this.m_axis.SetV(e.MulMV(p.R, this.m_localXAxis1));
        this.m_a1 =
            (j + s) * this.m_axis.y - (m + g) * this.m_axis.x;
        this.m_a2 = r * this.m_axis.y - t * this.m_axis.x;
        this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
        this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1 / this.m_motorMass : 0;
        this.m_perp.SetV(e.MulMV(p.R, this.m_localYAxis1));
        this.m_s1 = (j + s) * this.m_perp.y - (m + g) * this.m_perp.x;
        this.m_s2 = r * this.m_perp.y - t * this.m_perp.x;
        p = this.m_invMassA;
        s = this.m_invMassB;
        g = this.m_invIA;
        r = this.m_invIB;
        this.m_K.col1.x = p + s + g * this.m_s1 *
            this.m_s1 + r * this.m_s2 * this.m_s2;
        this.m_K.col1.y = g * this.m_s1 * this.m_a1 + r * this.m_s2 * this.m_a2;
        this.m_K.col2.x = this.m_K.col1.y;
        this.m_K.col2.y = p + s + g * this.m_a1 * this.m_a1 + r * this.m_a2 * this.m_a2;
        this.m_enableLimit ? (j = this.m_axis.x * j + this.m_axis.y * m, e.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b.b2_linearSlop ? this.m_limitState = x.e_equalLimits : j <= this.m_lowerTranslation ? this.m_limitState != x.e_atLowerLimit && (this.m_limitState = x.e_atLowerLimit, this.m_impulse.y = 0) : j >= this.m_upperTranslation ? this.m_limitState !=
            x.e_atUpperLimit && (this.m_limitState = x.e_atUpperLimit, this.m_impulse.y = 0) : (this.m_limitState = x.e_inactiveLimit, this.m_impulse.y = 0)) : this.m_limitState = x.e_inactiveLimit;
        !1 == this.m_enableMotor && (this.m_motorImpulse = 0);
        c.warmStarting ? (this.m_impulse.x *= c.dtRatio, this.m_impulse.y *= c.dtRatio, this.m_motorImpulse *= c.dtRatio, c = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x, j = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y, m = this.m_impulse.x *
            this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1, p = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2, d.m_linearVelocity.x -= this.m_invMassA * c, d.m_linearVelocity.y -= this.m_invMassA * j, d.m_angularVelocity -= this.m_invIA * m, f.m_linearVelocity.x += this.m_invMassB * c, f.m_linearVelocity.y += this.m_invMassB * j, f.m_angularVelocity += this.m_invIB * p) : (this.m_impulse.SetZero(), this.m_motorImpulse = 0)
    };
    t.prototype.SolveVelocityConstraints = function(b) {
        var c = this.m_bodyA,
            d = this.m_bodyB,
            j = c.m_linearVelocity,
            m = c.m_angularVelocity,
            p = d.m_linearVelocity,
            s = d.m_angularVelocity,
            g = 0,
            r = 0,
            t = 0,
            q = 0;
        this.m_enableMotor && this.m_limitState != x.e_equalLimits && (q = this.m_motorMass * (this.m_motorSpeed - (this.m_axis.x * (p.x - j.x) + this.m_axis.y * (p.y - j.y) + this.m_a2 * s - this.m_a1 * m)), g = this.m_motorImpulse, r = b.dt * this.m_maxMotorForce, this.m_motorImpulse = e.Clamp(this.m_motorImpulse + q, -r, r), q = this.m_motorImpulse - g, g = q * this.m_axis.x, r = q * this.m_axis.y, t = q * this.m_a1, q *= this.m_a2, j.x -= this.m_invMassA * g, j.y -= this.m_invMassA *
            r, m -= this.m_invIA * t, p.x += this.m_invMassB * g, p.y += this.m_invMassB * r, s += this.m_invIB * q);
        r = this.m_perp.x * (p.x - j.x) + this.m_perp.y * (p.y - j.y) + this.m_s2 * s - this.m_s1 * m;
        this.m_enableLimit && this.m_limitState != x.e_inactiveLimit ? (t = this.m_axis.x * (p.x - j.x) + this.m_axis.y * (p.y - j.y) + this.m_a2 * s - this.m_a1 * m, g = this.m_impulse.Copy(), b = this.m_K.Solve(new f, -r, -t), this.m_impulse.Add(b), this.m_limitState == x.e_atLowerLimit ? this.m_impulse.y = e.Max(this.m_impulse.y, 0) : this.m_limitState == x.e_atUpperLimit && (this.m_impulse.y =
            e.Min(this.m_impulse.y, 0)), r = -r - (this.m_impulse.y - g.y) * this.m_K.col2.x, t = 0 != this.m_K.col1.x ? r / this.m_K.col1.x + g.x : g.x, this.m_impulse.x = t, b.x = this.m_impulse.x - g.x, b.y = this.m_impulse.y - g.y, g = b.x * this.m_perp.x + b.y * this.m_axis.x, r = b.x * this.m_perp.y + b.y * this.m_axis.y, t = b.x * this.m_s1 + b.y * this.m_a1, q = b.x * this.m_s2 + b.y * this.m_a2) : (b = 0 != this.m_K.col1.x ? -r / this.m_K.col1.x : 0, this.m_impulse.x += b, g = b * this.m_perp.x, r = b * this.m_perp.y, t = b * this.m_s1, q = b * this.m_s2);
        j.x -= this.m_invMassA * g;
        j.y -= this.m_invMassA * r;
        m -=
            this.m_invIA * t;
        p.x += this.m_invMassB * g;
        p.y += this.m_invMassB * r;
        s += this.m_invIB * q;
        c.m_linearVelocity.SetV(j);
        c.m_angularVelocity = m;
        d.m_linearVelocity.SetV(p);
        d.m_angularVelocity = s
    };
    t.prototype.SolvePositionConstraints = function() {
        var d = this.m_bodyA,
            j = this.m_bodyB,
            m = d.m_sweep.c,
            u = d.m_sweep.a,
            p = j.m_sweep.c,
            s = j.m_sweep.a,
            t, g = 0,
            r = 0,
            x = 0,
            q = 0,
            v = 0,
            A = 0,
            r = !1,
            z = 0,
            B = c.FromAngle(u),
            x = c.FromAngle(s);
        t = B;
        var A = this.m_localAnchor1.x - this.m_localCenterA.x,
            C = this.m_localAnchor1.y - this.m_localCenterA.y,
            g = t.col1.x * A + t.col2.x *
            C,
            C = t.col1.y * A + t.col2.y * C,
            A = g;
        t = x;
        x = this.m_localAnchor2.x - this.m_localCenterB.x;
        q = this.m_localAnchor2.y - this.m_localCenterB.y;
        g = t.col1.x * x + t.col2.x * q;
        q = t.col1.y * x + t.col2.y * q;
        x = g;
        t = p.x + x - m.x - A;
        g = p.y + q - m.y - C;
        if (this.m_enableLimit) {
            this.m_axis = e.MulMV(B, this.m_localXAxis1);
            this.m_a1 = (t + A) * this.m_axis.y - (g + C) * this.m_axis.x;
            this.m_a2 = x * this.m_axis.y - q * this.m_axis.x;
            var l = this.m_axis.x * t + this.m_axis.y * g;
            e.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b.b2_linearSlop ? (z = e.Clamp(l, -b.b2_maxLinearCorrection,
                b.b2_maxLinearCorrection), v = e.Abs(l), r = !0) : l <= this.m_lowerTranslation ? (z = e.Clamp(l - this.m_lowerTranslation + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), v = this.m_lowerTranslation - l, r = !0) : l >= this.m_upperTranslation && (z = e.Clamp(l - this.m_upperTranslation + b.b2_linearSlop, 0, b.b2_maxLinearCorrection), v = l - this.m_upperTranslation, r = !0)
        }
        this.m_perp = e.MulMV(B, this.m_localYAxis1);
        this.m_s1 = (t + A) * this.m_perp.y - (g + C) * this.m_perp.x;
        this.m_s2 = x * this.m_perp.y - q * this.m_perp.x;
        B = new f;
        C = this.m_perp.x * t + this.m_perp.y *
            g;
        v = e.Max(v, e.Abs(C));
        A = 0;
        r ? (r = this.m_invMassA, x = this.m_invMassB, q = this.m_invIA, t = this.m_invIB, this.m_K.col1.x = r + x + q * this.m_s1 * this.m_s1 + t * this.m_s2 * this.m_s2, this.m_K.col1.y = q * this.m_s1 * this.m_a1 + t * this.m_s2 * this.m_a2, this.m_K.col2.x = this.m_K.col1.y, this.m_K.col2.y = r + x + q * this.m_a1 * this.m_a1 + t * this.m_a2 * this.m_a2, this.m_K.Solve(B, -C, -z)) : (r = this.m_invMassA, x = this.m_invMassB, q = this.m_invIA, t = this.m_invIB, z = r + x + q * this.m_s1 * this.m_s1 + t * this.m_s2 * this.m_s2, B.x = 0 != z ? -C / z : 0, B.y = 0);
        z = B.x * this.m_perp.x + B.y *
            this.m_axis.x;
        r = B.x * this.m_perp.y + B.y * this.m_axis.y;
        C = B.x * this.m_s1 + B.y * this.m_a1;
        B = B.x * this.m_s2 + B.y * this.m_a2;
        m.x -= this.m_invMassA * z;
        m.y -= this.m_invMassA * r;
        u -= this.m_invIA * C;
        p.x += this.m_invMassB * z;
        p.y += this.m_invMassB * r;
        s += this.m_invIB * B;
        d.m_sweep.a = u;
        j.m_sweep.a = s;
        d.SynchronizeTransform();
        j.SynchronizeTransform();
        return v <= b.b2_linearSlop && A <= b.b2_angularSlop
    };
    Box2D.inherit(H, Box2D.Dynamics.Joints.b2JointDef);
    H.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    H.b2LineJointDef = function() {
        Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this,
            arguments);
        this.localAnchorA = new f;
        this.localAnchorB = new f;
        this.localAxisA = new f
    };
    H.prototype.b2LineJointDef = function() {
        this.__super.b2JointDef.call(this);
        this.type = x.e_lineJoint;
        this.localAxisA.Set(1, 0);
        this.enableLimit = !1;
        this.upperTranslation = this.lowerTranslation = 0;
        this.enableMotor = !1;
        this.motorSpeed = this.maxMotorForce = 0
    };
    H.prototype.Initialize = function(b, c, d, e) {
        this.bodyA = b;
        this.bodyB = c;
        this.localAnchorA = this.bodyA.GetLocalPoint(d);
        this.localAnchorB = this.bodyB.GetLocalPoint(d);
        this.localAxisA =
            this.bodyA.GetLocalVector(e)
    };
    Box2D.inherit(L, Box2D.Dynamics.Joints.b2Joint);
    L.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    L.b2MouseJoint = function() {
        Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
        this.K = new c;
        this.K1 = new c;
        this.K2 = new c;
        this.m_localAnchor = new f;
        this.m_target = new f;
        this.m_impulse = new f;
        this.m_mass = new c;
        this.m_C = new f
    };
    L.prototype.GetAnchorA = function() {
        return this.m_target
    };
    L.prototype.GetAnchorB = function() {
        return this.m_bodyB.GetWorldPoint(this.m_localAnchor)
    };
    L.prototype.GetReactionForce = function(b) {
        void 0 === b && (b = 0);
        return new f(b * this.m_impulse.x, b * this.m_impulse.y)
    };
    L.prototype.GetReactionTorque = function() {
        return 0
    };
    L.prototype.GetTarget = function() {
        return this.m_target
    };
    L.prototype.SetTarget = function(b) {
        !1 == this.m_bodyB.IsAwake() && this.m_bodyB.SetAwake(!0);
        this.m_target = b
    };
    L.prototype.GetMaxForce = function() {
        return this.m_maxForce
    };
    L.prototype.SetMaxForce = function(b) {
        void 0 === b && (b = 0);
        this.m_maxForce = b
    };
    L.prototype.GetFrequency = function() {
        return this.m_frequencyHz
    };
    L.prototype.SetFrequency = function(b) {
        void 0 === b && (b = 0);
        this.m_frequencyHz = b
    };
    L.prototype.GetDampingRatio = function() {
        return this.m_dampingRatio
    };
    L.prototype.SetDampingRatio = function(b) {
        void 0 === b && (b = 0);
        this.m_dampingRatio = b
    };
    L.prototype.b2MouseJoint = function(b) {
        this.__super.b2Joint.call(this, b);
        this.m_target.SetV(b.target);
        var c = this.m_target.x - this.m_bodyB.m_xf.position.x,
            d = this.m_target.y - this.m_bodyB.m_xf.position.y,
            e = this.m_bodyB.m_xf.R;
        this.m_localAnchor.x = c * e.col1.x + d * e.col1.y;
        this.m_localAnchor.y =
            c * e.col2.x + d * e.col2.y;
        this.m_maxForce = b.maxForce;
        this.m_impulse.SetZero();
        this.m_frequencyHz = b.frequencyHz;
        this.m_dampingRatio = b.dampingRatio;
        this.m_gamma = this.m_beta = 0
    };
    L.prototype.InitVelocityConstraints = function(b) {
        var c = this.m_bodyB,
            d = c.GetMass(),
            e = 2 * Math.PI * this.m_frequencyHz,
            f = d * e * e;
        this.m_gamma = b.dt * (2 * d * this.m_dampingRatio * e + b.dt * f);
        this.m_gamma = 0 != this.m_gamma ? 1 / this.m_gamma : 0;
        this.m_beta = b.dt * f * this.m_gamma;
        var f = c.m_xf.R,
            d = this.m_localAnchor.x - c.m_sweep.localCenter.x,
            e = this.m_localAnchor.y -
            c.m_sweep.localCenter.y,
            j = f.col1.x * d + f.col2.x * e,
            e = f.col1.y * d + f.col2.y * e,
            d = j,
            f = c.m_invMass,
            j = c.m_invI;
        this.K1.col1.x = f;
        this.K1.col2.x = 0;
        this.K1.col1.y = 0;
        this.K1.col2.y = f;
        this.K2.col1.x = j * e * e;
        this.K2.col2.x = -j * d * e;
        this.K2.col1.y = -j * d * e;
        this.K2.col2.y = j * d * d;
        this.K.SetM(this.K1);
        this.K.AddM(this.K2);
        this.K.col1.x += this.m_gamma;
        this.K.col2.y += this.m_gamma;
        this.K.GetInverse(this.m_mass);
        this.m_C.x = c.m_sweep.c.x + d - this.m_target.x;
        this.m_C.y = c.m_sweep.c.y + e - this.m_target.y;
        c.m_angularVelocity *= 0.98;
        this.m_impulse.x *=
            b.dtRatio;
        this.m_impulse.y *= b.dtRatio;
        c.m_linearVelocity.x += f * this.m_impulse.x;
        c.m_linearVelocity.y += f * this.m_impulse.y;
        c.m_angularVelocity += j * (d * this.m_impulse.y - e * this.m_impulse.x)
    };
    L.prototype.SolveVelocityConstraints = function(b) {
        var c = this.m_bodyB,
            d, e = 0,
            f = 0;
        d = c.m_xf.R;
        var j = this.m_localAnchor.x - c.m_sweep.localCenter.x,
            m = this.m_localAnchor.y - c.m_sweep.localCenter.y,
            e = d.col1.x * j + d.col2.x * m,
            m = d.col1.y * j + d.col2.y * m,
            j = e,
            e = c.m_linearVelocity.x + -c.m_angularVelocity * m,
            g = c.m_linearVelocity.y + c.m_angularVelocity *
            j;
        d = this.m_mass;
        e = e + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x;
        f = g + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;
        g = -(d.col1.x * e + d.col2.x * f);
        f = -(d.col1.y * e + d.col2.y * f);
        d = this.m_impulse.x;
        e = this.m_impulse.y;
        this.m_impulse.x += g;
        this.m_impulse.y += f;
        b = b.dt * this.m_maxForce;
        this.m_impulse.LengthSquared() > b * b && this.m_impulse.Multiply(b / this.m_impulse.Length());
        g = this.m_impulse.x - d;
        f = this.m_impulse.y - e;
        c.m_linearVelocity.x += c.m_invMass * g;
        c.m_linearVelocity.y += c.m_invMass * f;
        c.m_angularVelocity +=
            c.m_invI * (j * f - m * g)
    };
    L.prototype.SolvePositionConstraints = function() {
        return !0
    };
    Box2D.inherit(Q, Box2D.Dynamics.Joints.b2JointDef);
    Q.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    Q.b2MouseJointDef = function() {
        Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
        this.target = new f
    };
    Q.prototype.b2MouseJointDef = function() {
        this.__super.b2JointDef.call(this);
        this.type = x.e_mouseJoint;
        this.maxForce = 0;
        this.frequencyHz = 5;
        this.dampingRatio = 0.7
    };
    Box2D.inherit(M, Box2D.Dynamics.Joints.b2Joint);
    M.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    M.b2PrismaticJoint = function() {
        Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
        this.m_localAnchor1 = new f;
        this.m_localAnchor2 = new f;
        this.m_localXAxis1 = new f;
        this.m_localYAxis1 = new f;
        this.m_axis = new f;
        this.m_perp = new f;
        this.m_K = new d;
        this.m_impulse = new j
    };
    M.prototype.GetAnchorA = function() {
        return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)
    };
    M.prototype.GetAnchorB = function() {
        return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)
    };
    M.prototype.GetReactionForce = function(b) {
        void 0 === b && (b = 0);
        return new f(b * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), b * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y))
    };
    M.prototype.GetReactionTorque = function(b) {
        void 0 === b && (b = 0);
        return b * this.m_impulse.y
    };
    M.prototype.GetJointTranslation = function() {
        var b = this.m_bodyA,
            c = this.m_bodyB,
            d = b.GetWorldPoint(this.m_localAnchor1),
            e = c.GetWorldPoint(this.m_localAnchor2),
            c = e.x - d.x,
            d = e.y - d.y,
            b = b.GetWorldVector(this.m_localXAxis1);
        return b.x * c + b.y * d
    };
    M.prototype.GetJointSpeed = function() {
        var b = this.m_bodyA,
            c = this.m_bodyB,
            d;
        d = b.m_xf.R;
        var e = this.m_localAnchor1.x - b.m_sweep.localCenter.x,
            f = this.m_localAnchor1.y - b.m_sweep.localCenter.y,
            j = d.col1.x * e + d.col2.x * f,
            f = d.col1.y * e + d.col2.y * f,
            e = j;
        d = c.m_xf.R;
        var m = this.m_localAnchor2.x - c.m_sweep.localCenter.x,
            g = this.m_localAnchor2.y - c.m_sweep.localCenter.y,
            j = d.col1.x * m + d.col2.x * g,
            g = d.col1.y * m + d.col2.y * g,
            m = j;
        d = c.m_sweep.c.x + m - (b.m_sweep.c.x +
            e);
        var j = c.m_sweep.c.y + g - (b.m_sweep.c.y + f),
            r = b.GetWorldVector(this.m_localXAxis1),
            p = b.m_linearVelocity,
            q = c.m_linearVelocity,
            b = b.m_angularVelocity,
            c = c.m_angularVelocity;
        return d * -b * r.y + j * b * r.x + (r.x * (q.x + -c * g - p.x - -b * f) + r.y * (q.y + c * m - p.y - b * e))
    };
    M.prototype.IsLimitEnabled = function() {
        return this.m_enableLimit
    };
    M.prototype.EnableLimit = function(b) {
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_enableLimit = b
    };
    M.prototype.GetLowerLimit = function() {
        return this.m_lowerTranslation
    };
    M.prototype.GetUpperLimit =
        function() {
            return this.m_upperTranslation
        };
    M.prototype.SetLimits = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_lowerTranslation = b;
        this.m_upperTranslation = c
    };
    M.prototype.IsMotorEnabled = function() {
        return this.m_enableMotor
    };
    M.prototype.EnableMotor = function(b) {
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_enableMotor = b
    };
    M.prototype.SetMotorSpeed = function(b) {
        void 0 === b && (b = 0);
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_motorSpeed = b
    };
    M.prototype.GetMotorSpeed = function() {
        return this.m_motorSpeed
    };
    M.prototype.SetMaxMotorForce = function(b) {
        void 0 === b && (b = 0);
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_maxMotorForce = b
    };
    M.prototype.GetMotorForce = function() {
        return this.m_motorImpulse
    };
    M.prototype.b2PrismaticJoint = function(b) {
        this.__super.b2Joint.call(this, b);
        this.m_localAnchor1.SetV(b.localAnchorA);
        this.m_localAnchor2.SetV(b.localAnchorB);
        this.m_localXAxis1.SetV(b.localAxisA);
        this.m_localYAxis1.x = -this.m_localXAxis1.y;
        this.m_localYAxis1.y = this.m_localXAxis1.x;
        this.m_refAngle = b.referenceAngle;
        this.m_impulse.SetZero();
        this.m_motorImpulse = this.m_motorMass = 0;
        this.m_lowerTranslation = b.lowerTranslation;
        this.m_upperTranslation = b.upperTranslation;
        this.m_maxMotorForce = b.maxMotorForce;
        this.m_motorSpeed = b.motorSpeed;
        this.m_enableLimit = b.enableLimit;
        this.m_enableMotor = b.enableMotor;
        this.m_limitState = x.e_inactiveLimit;
        this.m_axis.SetZero();
        this.m_perp.SetZero()
    };
    M.prototype.InitVelocityConstraints = function(c) {
        var d = this.m_bodyA,
            f = this.m_bodyB,
            j, m = 0;
        this.m_localCenterA.SetV(d.GetLocalCenter());
        this.m_localCenterB.SetV(f.GetLocalCenter());
        var p = d.GetTransform();
        f.GetTransform();
        j = d.m_xf.R;
        var s = this.m_localAnchor1.x - this.m_localCenterA.x,
            g = this.m_localAnchor1.y - this.m_localCenterA.y,
            m = j.col1.x * s + j.col2.x * g,
            g = j.col1.y * s + j.col2.y * g,
            s = m;
        j = f.m_xf.R;
        var r = this.m_localAnchor2.x - this.m_localCenterB.x,
            t = this.m_localAnchor2.y - this.m_localCenterB.y,
            m = j.col1.x * r + j.col2.x * t,
            t = j.col1.y * r + j.col2.y * t,
            r = m;
        j = f.m_sweep.c.x + r - d.m_sweep.c.x -
            s;
        m = f.m_sweep.c.y + t - d.m_sweep.c.y - g;
        this.m_invMassA = d.m_invMass;
        this.m_invMassB = f.m_invMass;
        this.m_invIA = d.m_invI;
        this.m_invIB = f.m_invI;
        this.m_axis.SetV(e.MulMV(p.R, this.m_localXAxis1));
        this.m_a1 = (j + s) * this.m_axis.y - (m + g) * this.m_axis.x;
        this.m_a2 = r * this.m_axis.y - t * this.m_axis.x;
        this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
        this.m_motorMass > Number.MIN_VALUE && (this.m_motorMass = 1 / this.m_motorMass);
        this.m_perp.SetV(e.MulMV(p.R, this.m_localYAxis1));
        this.m_s1 = (j + s) * this.m_perp.y - (m + g) * this.m_perp.x;
        this.m_s2 = r * this.m_perp.y - t * this.m_perp.x;
        p = this.m_invMassA;
        s = this.m_invMassB;
        g = this.m_invIA;
        r = this.m_invIB;
        this.m_K.col1.x = p + s + g * this.m_s1 * this.m_s1 + r * this.m_s2 * this.m_s2;
        this.m_K.col1.y = g * this.m_s1 + r * this.m_s2;
        this.m_K.col1.z = g * this.m_s1 * this.m_a1 + r * this.m_s2 * this.m_a2;
        this.m_K.col2.x = this.m_K.col1.y;
        this.m_K.col2.y = g + r;
        this.m_K.col2.z = g * this.m_a1 + r * this.m_a2;
        this.m_K.col3.x = this.m_K.col1.z;
        this.m_K.col3.y = this.m_K.col2.z;
        this.m_K.col3.z = p + s + g * this.m_a1 *
            this.m_a1 + r * this.m_a2 * this.m_a2;
        this.m_enableLimit ? (j = this.m_axis.x * j + this.m_axis.y * m, e.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b.b2_linearSlop ? this.m_limitState = x.e_equalLimits : j <= this.m_lowerTranslation ? this.m_limitState != x.e_atLowerLimit && (this.m_limitState = x.e_atLowerLimit, this.m_impulse.z = 0) : j >= this.m_upperTranslation ? this.m_limitState != x.e_atUpperLimit && (this.m_limitState = x.e_atUpperLimit, this.m_impulse.z = 0) : (this.m_limitState = x.e_inactiveLimit, this.m_impulse.z = 0)) : this.m_limitState =
            x.e_inactiveLimit;
        !1 == this.m_enableMotor && (this.m_motorImpulse = 0);
        c.warmStarting ? (this.m_impulse.x *= c.dtRatio, this.m_impulse.y *= c.dtRatio, this.m_motorImpulse *= c.dtRatio, c = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x, j = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y, m = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1, p = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse +
            this.m_impulse.z) * this.m_a2, d.m_linearVelocity.x -= this.m_invMassA * c, d.m_linearVelocity.y -= this.m_invMassA * j, d.m_angularVelocity -= this.m_invIA * m, f.m_linearVelocity.x += this.m_invMassB * c, f.m_linearVelocity.y += this.m_invMassB * j, f.m_angularVelocity += this.m_invIB * p) : (this.m_impulse.SetZero(), this.m_motorImpulse = 0)
    };
    M.prototype.SolveVelocityConstraints = function(b) {
        var c = this.m_bodyA,
            d = this.m_bodyB,
            m = c.m_linearVelocity,
            p = c.m_angularVelocity,
            s = d.m_linearVelocity,
            t = d.m_angularVelocity,
            g = 0,
            r = 0,
            v = 0,
            q = 0;
        this.m_enableMotor &&
            this.m_limitState != x.e_equalLimits && (q = this.m_motorMass * (this.m_motorSpeed - (this.m_axis.x * (s.x - m.x) + this.m_axis.y * (s.y - m.y) + this.m_a2 * t - this.m_a1 * p)), g = this.m_motorImpulse, b = b.dt * this.m_maxMotorForce, this.m_motorImpulse = e.Clamp(this.m_motorImpulse + q, -b, b), q = this.m_motorImpulse - g, g = q * this.m_axis.x, r = q * this.m_axis.y, v = q * this.m_a1, q *= this.m_a2, m.x -= this.m_invMassA * g, m.y -= this.m_invMassA * r, p -= this.m_invIA * v, s.x += this.m_invMassB * g, s.y += this.m_invMassB * r, t += this.m_invIB * q);
        v = this.m_perp.x * (s.x - m.x) + this.m_perp.y *
            (s.y - m.y) + this.m_s2 * t - this.m_s1 * p;
        r = t - p;
        this.m_enableLimit && this.m_limitState != x.e_inactiveLimit ? (b = this.m_axis.x * (s.x - m.x) + this.m_axis.y * (s.y - m.y) + this.m_a2 * t - this.m_a1 * p, g = this.m_impulse.Copy(), b = this.m_K.Solve33(new j, -v, -r, -b), this.m_impulse.Add(b), this.m_limitState == x.e_atLowerLimit ? this.m_impulse.z = e.Max(this.m_impulse.z, 0) : this.m_limitState == x.e_atUpperLimit && (this.m_impulse.z = e.Min(this.m_impulse.z, 0)), v = -v - (this.m_impulse.z - g.z) * this.m_K.col3.x, r = -r - (this.m_impulse.z - g.z) * this.m_K.col3.y,
            r = this.m_K.Solve22(new f, v, r), r.x += g.x, r.y += g.y, this.m_impulse.x = r.x, this.m_impulse.y = r.y, b.x = this.m_impulse.x - g.x, b.y = this.m_impulse.y - g.y, b.z = this.m_impulse.z - g.z, g = b.x * this.m_perp.x + b.z * this.m_axis.x, r = b.x * this.m_perp.y + b.z * this.m_axis.y, v = b.x * this.m_s1 + b.y + b.z * this.m_a1, q = b.x * this.m_s2 + b.y + b.z * this.m_a2) : (b = this.m_K.Solve22(new f, -v, -r), this.m_impulse.x += b.x, this.m_impulse.y += b.y, g = b.x * this.m_perp.x, r = b.x * this.m_perp.y, v = b.x * this.m_s1 + b.y, q = b.x * this.m_s2 + b.y);
        m.x -= this.m_invMassA * g;
        m.y -= this.m_invMassA *
            r;
        p -= this.m_invIA * v;
        s.x += this.m_invMassB * g;
        s.y += this.m_invMassB * r;
        t += this.m_invIB * q;
        c.m_linearVelocity.SetV(m);
        c.m_angularVelocity = p;
        d.m_linearVelocity.SetV(s);
        d.m_angularVelocity = t
    };
    M.prototype.SolvePositionConstraints = function() {
        var d = this.m_bodyA,
            m = this.m_bodyB,
            p = d.m_sweep.c,
            u = d.m_sweep.a,
            s = m.m_sweep.c,
            t = m.m_sweep.a,
            x, g = 0,
            r = 0,
            v = 0,
            q = 0,
            A = 0,
            r = !1,
            z = 0,
            B = c.FromAngle(u),
            C = c.FromAngle(t);
        x = B;
        var A = this.m_localAnchor1.x - this.m_localCenterA.x,
            E = this.m_localAnchor1.y - this.m_localCenterA.y,
            g = x.col1.x * A + x.col2.x *
            E,
            E = x.col1.y * A + x.col2.y * E,
            A = g;
        x = C;
        C = this.m_localAnchor2.x - this.m_localCenterB.x;
        v = this.m_localAnchor2.y - this.m_localCenterB.y;
        g = x.col1.x * C + x.col2.x * v;
        v = x.col1.y * C + x.col2.y * v;
        C = g;
        x = s.x + C - p.x - A;
        g = s.y + v - p.y - E;
        if (this.m_enableLimit) {
            this.m_axis = e.MulMV(B, this.m_localXAxis1);
            this.m_a1 = (x + A) * this.m_axis.y - (g + E) * this.m_axis.x;
            this.m_a2 = C * this.m_axis.y - v * this.m_axis.x;
            var l = this.m_axis.x * x + this.m_axis.y * g;
            e.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b.b2_linearSlop ? (z = e.Clamp(l, -b.b2_maxLinearCorrection,
                b.b2_maxLinearCorrection), q = e.Abs(l), r = !0) : l <= this.m_lowerTranslation ? (z = e.Clamp(l - this.m_lowerTranslation + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), q = this.m_lowerTranslation - l, r = !0) : l >= this.m_upperTranslation && (z = e.Clamp(l - this.m_upperTranslation + b.b2_linearSlop, 0, b.b2_maxLinearCorrection), q = l - this.m_upperTranslation, r = !0)
        }
        this.m_perp = e.MulMV(B, this.m_localYAxis1);
        this.m_s1 = (x + A) * this.m_perp.y - (g + E) * this.m_perp.x;
        this.m_s2 = C * this.m_perp.y - v * this.m_perp.x;
        B = new j;
        E = this.m_perp.x * x + this.m_perp.y *
            g;
        C = t - u - this.m_refAngle;
        q = e.Max(q, e.Abs(E));
        A = e.Abs(C);
        r ? (r = this.m_invMassA, v = this.m_invMassB, x = this.m_invIA, g = this.m_invIB, this.m_K.col1.x = r + v + x * this.m_s1 * this.m_s1 + g * this.m_s2 * this.m_s2, this.m_K.col1.y = x * this.m_s1 + g * this.m_s2, this.m_K.col1.z = x * this.m_s1 * this.m_a1 + g * this.m_s2 * this.m_a2, this.m_K.col2.x = this.m_K.col1.y, this.m_K.col2.y = x + g, this.m_K.col2.z = x * this.m_a1 + g * this.m_a2, this.m_K.col3.x = this.m_K.col1.z, this.m_K.col3.y = this.m_K.col2.z, this.m_K.col3.z = r + v + x * this.m_a1 * this.m_a1 + g * this.m_a2 * this.m_a2,
            this.m_K.Solve33(B, -E, -C, -z)) : (r = this.m_invMassA, v = this.m_invMassB, x = this.m_invIA, g = this.m_invIB, z = x * this.m_s1 + g * this.m_s2, l = x + g, this.m_K.col1.Set(r + v + x * this.m_s1 * this.m_s1 + g * this.m_s2 * this.m_s2, z, 0), this.m_K.col2.Set(z, l, 0), z = this.m_K.Solve22(new f, -E, -C), B.x = z.x, B.y = z.y, B.z = 0);
        z = B.x * this.m_perp.x + B.z * this.m_axis.x;
        r = B.x * this.m_perp.y + B.z * this.m_axis.y;
        E = B.x * this.m_s1 + B.y + B.z * this.m_a1;
        B = B.x * this.m_s2 + B.y + B.z * this.m_a2;
        p.x -= this.m_invMassA * z;
        p.y -= this.m_invMassA * r;
        u -= this.m_invIA * E;
        s.x += this.m_invMassB *
            z;
        s.y += this.m_invMassB * r;
        t += this.m_invIB * B;
        d.m_sweep.a = u;
        m.m_sweep.a = t;
        d.SynchronizeTransform();
        m.SynchronizeTransform();
        return q <= b.b2_linearSlop && A <= b.b2_angularSlop
    };
    Box2D.inherit(P, Box2D.Dynamics.Joints.b2JointDef);
    P.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    P.b2PrismaticJointDef = function() {
        Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
        this.localAnchorA = new f;
        this.localAnchorB = new f;
        this.localAxisA = new f
    };
    P.prototype.b2PrismaticJointDef = function() {
        this.__super.b2JointDef.call(this);
        this.type = x.e_prismaticJoint;
        this.localAxisA.Set(1, 0);
        this.referenceAngle = 0;
        this.enableLimit = !1;
        this.upperTranslation = this.lowerTranslation = 0;
        this.enableMotor = !1;
        this.motorSpeed = this.maxMotorForce = 0
    };
    P.prototype.Initialize = function(b, c, d, e) {
        this.bodyA = b;
        this.bodyB = c;
        this.localAnchorA = this.bodyA.GetLocalPoint(d);
        this.localAnchorB = this.bodyB.GetLocalPoint(d);
        this.localAxisA = this.bodyA.GetLocalVector(e);
        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle()
    };
    Box2D.inherit(C, Box2D.Dynamics.Joints.b2Joint);
    C.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    C.b2PulleyJoint = function() {
        Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
        this.m_groundAnchor1 = new f;
        this.m_groundAnchor2 = new f;
        this.m_localAnchor1 = new f;
        this.m_localAnchor2 = new f;
        this.m_u1 = new f;
        this.m_u2 = new f
    };
    C.prototype.GetAnchorA = function() {
        return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)
    };
    C.prototype.GetAnchorB = function() {
        return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)
    };
    C.prototype.GetReactionForce = function(b) {
        void 0 ===
            b && (b = 0);
        return new f(b * this.m_impulse * this.m_u2.x, b * this.m_impulse * this.m_u2.y)
    };
    C.prototype.GetReactionTorque = function() {
        return 0
    };
    C.prototype.GetGroundAnchorA = function() {
        var b = this.m_ground.m_xf.position.Copy();
        b.Add(this.m_groundAnchor1);
        return b
    };
    C.prototype.GetGroundAnchorB = function() {
        var b = this.m_ground.m_xf.position.Copy();
        b.Add(this.m_groundAnchor2);
        return b
    };
    C.prototype.GetLength1 = function() {
        var b = this.m_bodyA.GetWorldPoint(this.m_localAnchor1),
            c = b.x - (this.m_ground.m_xf.position.x + this.m_groundAnchor1.x),
            b = b.y - (this.m_ground.m_xf.position.y + this.m_groundAnchor1.y);
        return Math.sqrt(c * c + b * b)
    };
    C.prototype.GetLength2 = function() {
        var b = this.m_bodyB.GetWorldPoint(this.m_localAnchor2),
            c = b.x - (this.m_ground.m_xf.position.x + this.m_groundAnchor2.x),
            b = b.y - (this.m_ground.m_xf.position.y + this.m_groundAnchor2.y);
        return Math.sqrt(c * c + b * b)
    };
    C.prototype.GetRatio = function() {
        return this.m_ratio
    };
    C.prototype.b2PulleyJoint = function(b) {
        this.__super.b2Joint.call(this, b);
        this.m_ground = this.m_bodyA.m_world.m_groundBody;
        this.m_groundAnchor1.x =
            b.groundAnchorA.x - this.m_ground.m_xf.position.x;
        this.m_groundAnchor1.y = b.groundAnchorA.y - this.m_ground.m_xf.position.y;
        this.m_groundAnchor2.x = b.groundAnchorB.x - this.m_ground.m_xf.position.x;
        this.m_groundAnchor2.y = b.groundAnchorB.y - this.m_ground.m_xf.position.y;
        this.m_localAnchor1.SetV(b.localAnchorA);
        this.m_localAnchor2.SetV(b.localAnchorB);
        this.m_ratio = b.ratio;
        this.m_constant = b.lengthA + this.m_ratio * b.lengthB;
        this.m_maxLength1 = e.Min(b.maxLengthA, this.m_constant - this.m_ratio * C.b2_minPulleyLength);
        this.m_maxLength2 = e.Min(b.maxLengthB, (this.m_constant - C.b2_minPulleyLength) / this.m_ratio);
        this.m_limitImpulse2 = this.m_limitImpulse1 = this.m_impulse = 0
    };
    C.prototype.InitVelocityConstraints = function(c) {
        var d = this.m_bodyA,
            e = this.m_bodyB,
            f;
        f = d.m_xf.R;
        var j = this.m_localAnchor1.x - d.m_sweep.localCenter.x,
            m = this.m_localAnchor1.y - d.m_sweep.localCenter.y,
            p = f.col1.x * j + f.col2.x * m,
            m = f.col1.y * j + f.col2.y * m,
            j = p;
        f = e.m_xf.R;
        var g = this.m_localAnchor2.x - e.m_sweep.localCenter.x,
            r = this.m_localAnchor2.y - e.m_sweep.localCenter.y,
            p = f.col1.x * g + f.col2.x * r,
            r = f.col1.y * g + f.col2.y * r,
            g = p;
        f = e.m_sweep.c.x + g;
        var p = e.m_sweep.c.y + r,
            s = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x,
            q = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
        this.m_u1.Set(d.m_sweep.c.x + j - (this.m_ground.m_xf.position.x + this.m_groundAnchor1.x), d.m_sweep.c.y + m - (this.m_ground.m_xf.position.y + this.m_groundAnchor1.y));
        this.m_u2.Set(f - s, p - q);
        f = this.m_u1.Length();
        p = this.m_u2.Length();
        f > b.b2_linearSlop ? this.m_u1.Multiply(1 / f) : this.m_u1.SetZero();
        p > b.b2_linearSlop ?
            this.m_u2.Multiply(1 / p) : this.m_u2.SetZero();
        0 < this.m_constant - f - this.m_ratio * p ? (this.m_state = x.e_inactiveLimit, this.m_impulse = 0) : this.m_state = x.e_atUpperLimit;
        f < this.m_maxLength1 ? (this.m_limitState1 = x.e_inactiveLimit, this.m_limitImpulse1 = 0) : this.m_limitState1 = x.e_atUpperLimit;
        p < this.m_maxLength2 ? (this.m_limitState2 = x.e_inactiveLimit, this.m_limitImpulse2 = 0) : this.m_limitState2 = x.e_atUpperLimit;
        f = j * this.m_u1.y - m * this.m_u1.x;
        p = g * this.m_u2.y - r * this.m_u2.x;
        this.m_limitMass1 = d.m_invMass + d.m_invI * f * f;
        this.m_limitMass2 =
            e.m_invMass + e.m_invI * p * p;
        this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;
        this.m_limitMass1 = 1 / this.m_limitMass1;
        this.m_limitMass2 = 1 / this.m_limitMass2;
        this.m_pulleyMass = 1 / this.m_pulleyMass;
        c.warmStarting ? (this.m_impulse *= c.dtRatio, this.m_limitImpulse1 *= c.dtRatio, this.m_limitImpulse2 *= c.dtRatio, c = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.x, f = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.y, p = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.x, s = (-this.m_ratio *
            this.m_impulse - this.m_limitImpulse2) * this.m_u2.y, d.m_linearVelocity.x += d.m_invMass * c, d.m_linearVelocity.y += d.m_invMass * f, d.m_angularVelocity += d.m_invI * (j * f - m * c), e.m_linearVelocity.x += e.m_invMass * p, e.m_linearVelocity.y += e.m_invMass * s, e.m_angularVelocity += e.m_invI * (g * s - r * p)) : this.m_limitImpulse2 = this.m_limitImpulse1 = this.m_impulse = 0
    };
    C.prototype.SolveVelocityConstraints = function() {
        var b = this.m_bodyA,
            c = this.m_bodyB,
            d;
        d = b.m_xf.R;
        var f = this.m_localAnchor1.x - b.m_sweep.localCenter.x,
            j = this.m_localAnchor1.y -
            b.m_sweep.localCenter.y,
            m = d.col1.x * f + d.col2.x * j,
            j = d.col1.y * f + d.col2.y * j,
            f = m;
        d = c.m_xf.R;
        var p = this.m_localAnchor2.x - c.m_sweep.localCenter.x,
            g = this.m_localAnchor2.y - c.m_sweep.localCenter.y,
            m = d.col1.x * p + d.col2.x * g,
            g = d.col1.y * p + d.col2.y * g,
            p = m,
            r = 0,
            s = 0;
        this.m_state == x.e_atUpperLimit && (d = b.m_linearVelocity.x + -b.m_angularVelocity * j, m = b.m_linearVelocity.y + b.m_angularVelocity * f, r = c.m_linearVelocity.x + -c.m_angularVelocity * g, s = c.m_linearVelocity.y + c.m_angularVelocity * p, d = -(this.m_u1.x * d + this.m_u1.y * m) - this.m_ratio *
            (this.m_u2.x * r + this.m_u2.y * s), s = this.m_pulleyMass * -d, d = this.m_impulse, this.m_impulse = e.Max(0, this.m_impulse + s), s = this.m_impulse - d, d = -s * this.m_u1.x, m = -s * this.m_u1.y, r = -this.m_ratio * s * this.m_u2.x, s = -this.m_ratio * s * this.m_u2.y, b.m_linearVelocity.x += b.m_invMass * d, b.m_linearVelocity.y += b.m_invMass * m, b.m_angularVelocity += b.m_invI * (f * m - j * d), c.m_linearVelocity.x += c.m_invMass * r, c.m_linearVelocity.y += c.m_invMass * s, c.m_angularVelocity += c.m_invI * (p * s - g * r));
        this.m_limitState1 == x.e_atUpperLimit && (d = b.m_linearVelocity.x +
            -b.m_angularVelocity * j, m = b.m_linearVelocity.y + b.m_angularVelocity * f, d = -(this.m_u1.x * d + this.m_u1.y * m), s = -this.m_limitMass1 * d, d = this.m_limitImpulse1, this.m_limitImpulse1 = e.Max(0, this.m_limitImpulse1 + s), s = this.m_limitImpulse1 - d, d = -s * this.m_u1.x, m = -s * this.m_u1.y, b.m_linearVelocity.x += b.m_invMass * d, b.m_linearVelocity.y += b.m_invMass * m, b.m_angularVelocity += b.m_invI * (f * m - j * d));
        this.m_limitState2 == x.e_atUpperLimit && (r = c.m_linearVelocity.x + -c.m_angularVelocity * g, s = c.m_linearVelocity.y + c.m_angularVelocity * p,
            d = -(this.m_u2.x * r + this.m_u2.y * s), s = -this.m_limitMass2 * d, d = this.m_limitImpulse2, this.m_limitImpulse2 = e.Max(0, this.m_limitImpulse2 + s), s = this.m_limitImpulse2 - d, r = -s * this.m_u2.x, s = -s * this.m_u2.y, c.m_linearVelocity.x += c.m_invMass * r, c.m_linearVelocity.y += c.m_invMass * s, c.m_angularVelocity += c.m_invI * (p * s - g * r))
    };
    C.prototype.SolvePositionConstraints = function() {
        var c = this.m_bodyA,
            d = this.m_bodyB,
            f, j = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x,
            m = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y,
            p =
            this.m_ground.m_xf.position.x + this.m_groundAnchor2.x,
            s = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y,
            g = 0,
            r = 0,
            t = 0,
            q = 0,
            v = 0,
            A = 0,
            z = 0,
            B = 0;
        this.m_state == x.e_atUpperLimit && (f = c.m_xf.R, g = this.m_localAnchor1.x - c.m_sweep.localCenter.x, r = this.m_localAnchor1.y - c.m_sweep.localCenter.y, v = f.col1.x * g + f.col2.x * r, r = f.col1.y * g + f.col2.y * r, g = v, f = d.m_xf.R, t = this.m_localAnchor2.x - d.m_sweep.localCenter.x, q = this.m_localAnchor2.y - d.m_sweep.localCenter.y, v = f.col1.x * t + f.col2.x * q, q = f.col1.y * t + f.col2.y * q, t = v, f = c.m_sweep.c.x +
            g, v = c.m_sweep.c.y + r, A = d.m_sweep.c.x + t, z = d.m_sweep.c.y + q, this.m_u1.Set(f - j, v - m), this.m_u2.Set(A - p, z - s), f = this.m_u1.Length(), v = this.m_u2.Length(), f > b.b2_linearSlop ? this.m_u1.Multiply(1 / f) : this.m_u1.SetZero(), v > b.b2_linearSlop ? this.m_u2.Multiply(1 / v) : this.m_u2.SetZero(), f = this.m_constant - f - this.m_ratio * v, B = e.Max(B, -f), f = e.Clamp(f + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), z = -this.m_pulleyMass * f, f = -z * this.m_u1.x, v = -z * this.m_u1.y, A = -this.m_ratio * z * this.m_u2.x, z = -this.m_ratio * z * this.m_u2.y, c.m_sweep.c.x +=
            c.m_invMass * f, c.m_sweep.c.y += c.m_invMass * v, c.m_sweep.a += c.m_invI * (g * v - r * f), d.m_sweep.c.x += d.m_invMass * A, d.m_sweep.c.y += d.m_invMass * z, d.m_sweep.a += d.m_invI * (t * z - q * A), c.SynchronizeTransform(), d.SynchronizeTransform());
        this.m_limitState1 == x.e_atUpperLimit && (f = c.m_xf.R, g = this.m_localAnchor1.x - c.m_sweep.localCenter.x, r = this.m_localAnchor1.y - c.m_sweep.localCenter.y, v = f.col1.x * g + f.col2.x * r, r = f.col1.y * g + f.col2.y * r, g = v, f = c.m_sweep.c.x + g, v = c.m_sweep.c.y + r, this.m_u1.Set(f - j, v - m), f = this.m_u1.Length(), f > b.b2_linearSlop ?
            (this.m_u1.x *= 1 / f, this.m_u1.y *= 1 / f) : this.m_u1.SetZero(), f = this.m_maxLength1 - f, B = e.Max(B, -f), f = e.Clamp(f + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), z = -this.m_limitMass1 * f, f = -z * this.m_u1.x, v = -z * this.m_u1.y, c.m_sweep.c.x += c.m_invMass * f, c.m_sweep.c.y += c.m_invMass * v, c.m_sweep.a += c.m_invI * (g * v - r * f), c.SynchronizeTransform());
        this.m_limitState2 == x.e_atUpperLimit && (f = d.m_xf.R, t = this.m_localAnchor2.x - d.m_sweep.localCenter.x, q = this.m_localAnchor2.y - d.m_sweep.localCenter.y, v = f.col1.x * t + f.col2.x * q, q = f.col1.y *
            t + f.col2.y * q, t = v, A = d.m_sweep.c.x + t, z = d.m_sweep.c.y + q, this.m_u2.Set(A - p, z - s), v = this.m_u2.Length(), v > b.b2_linearSlop ? (this.m_u2.x *= 1 / v, this.m_u2.y *= 1 / v) : this.m_u2.SetZero(), f = this.m_maxLength2 - v, B = e.Max(B, -f), f = e.Clamp(f + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), z = -this.m_limitMass2 * f, A = -z * this.m_u2.x, z = -z * this.m_u2.y, d.m_sweep.c.x += d.m_invMass * A, d.m_sweep.c.y += d.m_invMass * z, d.m_sweep.a += d.m_invI * (t * z - q * A), d.SynchronizeTransform());
        return B < b.b2_linearSlop
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength =
            2
    });
    Box2D.inherit(S, Box2D.Dynamics.Joints.b2JointDef);
    S.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    S.b2PulleyJointDef = function() {
        Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
        this.groundAnchorA = new f;
        this.groundAnchorB = new f;
        this.localAnchorA = new f;
        this.localAnchorB = new f
    };
    S.prototype.b2PulleyJointDef = function() {
        this.__super.b2JointDef.call(this);
        this.type = x.e_pulleyJoint;
        this.groundAnchorA.Set(-1, 1);
        this.groundAnchorB.Set(1, 1);
        this.localAnchorA.Set(-1, 0);
        this.localAnchorB.Set(1,
            0);
        this.maxLengthB = this.lengthB = this.maxLengthA = this.lengthA = 0;
        this.ratio = 1;
        this.collideConnected = !0
    };
    S.prototype.Initialize = function(b, c, d, e, f, j, m) {
        void 0 === m && (m = 0);
        this.bodyA = b;
        this.bodyB = c;
        this.groundAnchorA.SetV(d);
        this.groundAnchorB.SetV(e);
        this.localAnchorA = this.bodyA.GetLocalPoint(f);
        this.localAnchorB = this.bodyB.GetLocalPoint(j);
        b = f.x - d.x;
        d = f.y - d.y;
        this.lengthA = Math.sqrt(b * b + d * d);
        d = j.x - e.x;
        e = j.y - e.y;
        this.lengthB = Math.sqrt(d * d + e * e);
        this.ratio = m;
        m = this.lengthA + this.ratio * this.lengthB;
        this.maxLengthA =
            m - this.ratio * C.b2_minPulleyLength;
        this.maxLengthB = (m - C.b2_minPulleyLength) / this.ratio
    };
    Box2D.inherit(N, Box2D.Dynamics.Joints.b2Joint);
    N.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    N.b2RevoluteJoint = function() {
        Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
        this.K = new c;
        this.K1 = new c;
        this.K2 = new c;
        this.K3 = new c;
        this.impulse3 = new j;
        this.impulse2 = new f;
        this.reduced = new f;
        this.m_localAnchor1 = new f;
        this.m_localAnchor2 = new f;
        this.m_impulse = new j;
        this.m_mass = new d
    };
    N.prototype.GetAnchorA =
        function() {
            return this.m_bodyA.GetWorldPoint(this.m_localAnchor1)
        };
    N.prototype.GetAnchorB = function() {
        return this.m_bodyB.GetWorldPoint(this.m_localAnchor2)
    };
    N.prototype.GetReactionForce = function(b) {
        void 0 === b && (b = 0);
        return new f(b * this.m_impulse.x, b * this.m_impulse.y)
    };
    N.prototype.GetReactionTorque = function(b) {
        void 0 === b && (b = 0);
        return b * this.m_impulse.z
    };
    N.prototype.GetJointAngle = function() {
        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle
    };
    N.prototype.GetJointSpeed = function() {
        return this.m_bodyB.m_angularVelocity -
            this.m_bodyA.m_angularVelocity
    };
    N.prototype.IsLimitEnabled = function() {
        return this.m_enableLimit
    };
    N.prototype.EnableLimit = function(b) {
        this.m_enableLimit = b
    };
    N.prototype.GetLowerLimit = function() {
        return this.m_lowerAngle
    };
    N.prototype.GetUpperLimit = function() {
        return this.m_upperAngle
    };
    N.prototype.SetLimits = function(b, c) {
        void 0 === b && (b = 0);
        void 0 === c && (c = 0);
        this.m_lowerAngle = b;
        this.m_upperAngle = c
    };
    N.prototype.IsMotorEnabled = function() {
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        return this.m_enableMotor
    };
    N.prototype.EnableMotor = function(b) {
        this.m_enableMotor = b
    };
    N.prototype.SetMotorSpeed = function(b) {
        void 0 === b && (b = 0);
        this.m_bodyA.SetAwake(!0);
        this.m_bodyB.SetAwake(!0);
        this.m_motorSpeed = b
    };
    N.prototype.GetMotorSpeed = function() {
        return this.m_motorSpeed
    };
    N.prototype.SetMaxMotorTorque = function(b) {
        void 0 === b && (b = 0);
        this.m_maxMotorTorque = b
    };
    N.prototype.GetMotorTorque = function() {
        return this.m_maxMotorTorque
    };
    N.prototype.b2RevoluteJoint = function(b) {
        this.__super.b2Joint.call(this, b);
        this.m_localAnchor1.SetV(b.localAnchorA);
        this.m_localAnchor2.SetV(b.localAnchorB);
        this.m_referenceAngle = b.referenceAngle;
        this.m_impulse.SetZero();
        this.m_motorImpulse = 0;
        this.m_lowerAngle = b.lowerAngle;
        this.m_upperAngle = b.upperAngle;
        this.m_maxMotorTorque = b.maxMotorTorque;
        this.m_motorSpeed = b.motorSpeed;
        this.m_enableLimit = b.enableLimit;
        this.m_enableMotor = b.enableMotor;
        this.m_limitState = x.e_inactiveLimit
    };
    N.prototype.InitVelocityConstraints = function(c) {
        var d = this.m_bodyA,
            f = this.m_bodyB,
            j, m = 0;
        j = d.m_xf.R;
        var p = this.m_localAnchor1.x - d.m_sweep.localCenter.x,
            s = this.m_localAnchor1.y - d.m_sweep.localCenter.y,
            m = j.col1.x * p + j.col2.x * s,
            s = j.col1.y * p + j.col2.y * s,
            p = m;
        j = f.m_xf.R;
        var g = this.m_localAnchor2.x - f.m_sweep.localCenter.x,
            r = this.m_localAnchor2.y - f.m_sweep.localCenter.y,
            m = j.col1.x * g + j.col2.x * r,
            r = j.col1.y * g + j.col2.y * r,
            g = m;
        j = d.m_invMass;
        var m = f.m_invMass,
            t = d.m_invI,
            q = f.m_invI;
        this.m_mass.col1.x = j + m + s * s * t + r * r * q;
        this.m_mass.col2.x = -s * p * t - r * g * q;
        this.m_mass.col3.x = -s * t - r * q;
        this.m_mass.col1.y = this.m_mass.col2.x;
        this.m_mass.col2.y = j + m + p * p * t + g * g * q;
        this.m_mass.col3.y =
            p * t + g * q;
        this.m_mass.col1.z = this.m_mass.col3.x;
        this.m_mass.col2.z = this.m_mass.col3.y;
        this.m_mass.col3.z = t + q;
        this.m_motorMass = 1 / (t + q);
        !1 == this.m_enableMotor && (this.m_motorImpulse = 0);
        if (this.m_enableLimit) {
            var v = f.m_sweep.a - d.m_sweep.a - this.m_referenceAngle;
            e.Abs(this.m_upperAngle - this.m_lowerAngle) < 2 * b.b2_angularSlop ? this.m_limitState = x.e_equalLimits : v <= this.m_lowerAngle ? (this.m_limitState != x.e_atLowerLimit && (this.m_impulse.z = 0), this.m_limitState = x.e_atLowerLimit) : v >= this.m_upperAngle ? (this.m_limitState !=
                x.e_atUpperLimit && (this.m_impulse.z = 0), this.m_limitState = x.e_atUpperLimit) : (this.m_limitState = x.e_inactiveLimit, this.m_impulse.z = 0)
        } else this.m_limitState = x.e_inactiveLimit;
        c.warmStarting ? (this.m_impulse.x *= c.dtRatio, this.m_impulse.y *= c.dtRatio, this.m_motorImpulse *= c.dtRatio, c = this.m_impulse.x, v = this.m_impulse.y, d.m_linearVelocity.x -= j * c, d.m_linearVelocity.y -= j * v, d.m_angularVelocity -= t * (p * v - s * c + this.m_motorImpulse + this.m_impulse.z), f.m_linearVelocity.x += m * c, f.m_linearVelocity.y += m * v, f.m_angularVelocity +=
            q * (g * v - r * c + this.m_motorImpulse + this.m_impulse.z)) : (this.m_impulse.SetZero(), this.m_motorImpulse = 0)
    };
    N.prototype.SolveVelocityConstraints = function(b) {
        var c = this.m_bodyA,
            d = this.m_bodyB,
            f = 0,
            j = 0,
            m = 0,
            p = 0,
            g = 0,
            r = c.m_linearVelocity,
            s = c.m_angularVelocity,
            q = d.m_linearVelocity,
            t = d.m_angularVelocity,
            v = c.m_invMass,
            A = d.m_invMass,
            z = c.m_invI,
            B = d.m_invI;
        this.m_enableMotor && this.m_limitState != x.e_equalLimits && (j = this.m_motorMass * -(t - s - this.m_motorSpeed), m = this.m_motorImpulse, p = b.dt * this.m_maxMotorTorque, this.m_motorImpulse =
            e.Clamp(this.m_motorImpulse + j, -p, p), j = this.m_motorImpulse - m, s -= z * j, t += B * j);
        if (this.m_enableLimit && this.m_limitState != x.e_inactiveLimit) {
            b = c.m_xf.R;
            j = this.m_localAnchor1.x - c.m_sweep.localCenter.x;
            m = this.m_localAnchor1.y - c.m_sweep.localCenter.y;
            f = b.col1.x * j + b.col2.x * m;
            m = b.col1.y * j + b.col2.y * m;
            j = f;
            b = d.m_xf.R;
            p = this.m_localAnchor2.x - d.m_sweep.localCenter.x;
            g = this.m_localAnchor2.y - d.m_sweep.localCenter.y;
            f = b.col1.x * p + b.col2.x * g;
            g = b.col1.y * p + b.col2.y * g;
            p = f;
            b = q.x + -t * g - r.x - -s * m;
            var l = q.y + t * p - r.y - s * j;
            this.m_mass.Solve33(this.impulse3, -b, -l, -(t - s));
            this.m_limitState == x.e_equalLimits ? this.m_impulse.Add(this.impulse3) : this.m_limitState == x.e_atLowerLimit ? (f = this.m_impulse.z + this.impulse3.z, 0 > f && (this.m_mass.Solve22(this.reduced, -b, -l), this.impulse3.x = this.reduced.x, this.impulse3.y = this.reduced.y, this.impulse3.z = -this.m_impulse.z, this.m_impulse.x += this.reduced.x, this.m_impulse.y += this.reduced.y, this.m_impulse.z = 0)) : this.m_limitState == x.e_atUpperLimit && (f = this.m_impulse.z + this.impulse3.z, 0 < f && (this.m_mass.Solve22(this.reduced, -b, -l),
                this.impulse3.x = this.reduced.x, this.impulse3.y = this.reduced.y, this.impulse3.z = -this.m_impulse.z, this.m_impulse.x += this.reduced.x, this.m_impulse.y += this.reduced.y, this.m_impulse.z = 0));
            r.x -= v * this.impulse3.x;
            r.y -= v * this.impulse3.y;
            s -= z * (j * this.impulse3.y - m * this.impulse3.x + this.impulse3.z);
            q.x += A * this.impulse3.x;
            q.y += A * this.impulse3.y;
            t += B * (p * this.impulse3.y - g * this.impulse3.x + this.impulse3.z)
        } else b = c.m_xf.R, j = this.m_localAnchor1.x - c.m_sweep.localCenter.x, m = this.m_localAnchor1.y - c.m_sweep.localCenter.y,
            f = b.col1.x * j + b.col2.x * m, m = b.col1.y * j + b.col2.y * m, j = f, b = d.m_xf.R, p = this.m_localAnchor2.x - d.m_sweep.localCenter.x, g = this.m_localAnchor2.y - d.m_sweep.localCenter.y, f = b.col1.x * p + b.col2.x * g, g = b.col1.y * p + b.col2.y * g, p = f, this.m_mass.Solve22(this.impulse2, -(q.x + -t * g - r.x - -s * m), -(q.y + t * p - r.y - s * j)), this.m_impulse.x += this.impulse2.x, this.m_impulse.y += this.impulse2.y, r.x -= v * this.impulse2.x, r.y -= v * this.impulse2.y, s -= z * (j * this.impulse2.y - m * this.impulse2.x), q.x += A * this.impulse2.x, q.y += A * this.impulse2.y, t += B * (p * this.impulse2.y -
                g * this.impulse2.x);
        c.m_linearVelocity.SetV(r);
        c.m_angularVelocity = s;
        d.m_linearVelocity.SetV(q);
        d.m_angularVelocity = t
    };
    N.prototype.SolvePositionConstraints = function() {
        var c = 0,
            d, f = this.m_bodyA,
            j = this.m_bodyB,
            m = 0,
            p = 0,
            s = 0,
            g = 0;
        if (this.m_enableLimit && this.m_limitState != x.e_inactiveLimit) {
            var c = j.m_sweep.a - f.m_sweep.a - this.m_referenceAngle,
                r = 0;
            this.m_limitState == x.e_equalLimits ? (c = e.Clamp(c - this.m_lowerAngle, -b.b2_maxAngularCorrection, b.b2_maxAngularCorrection), r = -this.m_motorMass * c, m = e.Abs(c)) : this.m_limitState ==
                x.e_atLowerLimit ? (c -= this.m_lowerAngle, m = -c, c = e.Clamp(c + b.b2_angularSlop, -b.b2_maxAngularCorrection, 0), r = -this.m_motorMass * c) : this.m_limitState == x.e_atUpperLimit && (m = c -= this.m_upperAngle, c = e.Clamp(c - b.b2_angularSlop, 0, b.b2_maxAngularCorrection), r = -this.m_motorMass * c);
            f.m_sweep.a -= f.m_invI * r;
            j.m_sweep.a += j.m_invI * r;
            f.SynchronizeTransform();
            j.SynchronizeTransform()
        }
        d = f.m_xf.R;
        r = this.m_localAnchor1.x - f.m_sweep.localCenter.x;
        c = this.m_localAnchor1.y - f.m_sweep.localCenter.y;
        p = d.col1.x * r + d.col2.x * c;
        c = d.col1.y *
            r + d.col2.y * c;
        r = p;
        d = j.m_xf.R;
        var t = this.m_localAnchor2.x - j.m_sweep.localCenter.x,
            q = this.m_localAnchor2.y - j.m_sweep.localCenter.y,
            p = d.col1.x * t + d.col2.x * q,
            q = d.col1.y * t + d.col2.y * q,
            t = p,
            s = j.m_sweep.c.x + t - f.m_sweep.c.x - r,
            g = j.m_sweep.c.y + q - f.m_sweep.c.y - c,
            v = s * s + g * g;
        d = Math.sqrt(v);
        var p = f.m_invMass,
            A = j.m_invMass,
            z = f.m_invI,
            B = j.m_invI,
            C = 10 * b.b2_linearSlop;
        v > C * C && (v = 1 / (p + A), s = v * -s, g = v * -g, f.m_sweep.c.x -= 0.5 * p * s, f.m_sweep.c.y -= 0.5 * p * g, j.m_sweep.c.x += 0.5 * A * s, j.m_sweep.c.y += 0.5 * A * g, s = j.m_sweep.c.x + t - f.m_sweep.c.x -
            r, g = j.m_sweep.c.y + q - f.m_sweep.c.y - c);
        this.K1.col1.x = p + A;
        this.K1.col2.x = 0;
        this.K1.col1.y = 0;
        this.K1.col2.y = p + A;
        this.K2.col1.x = z * c * c;
        this.K2.col2.x = -z * r * c;
        this.K2.col1.y = -z * r * c;
        this.K2.col2.y = z * r * r;
        this.K3.col1.x = B * q * q;
        this.K3.col2.x = -B * t * q;
        this.K3.col1.y = -B * t * q;
        this.K3.col2.y = B * t * t;
        this.K.SetM(this.K1);
        this.K.AddM(this.K2);
        this.K.AddM(this.K3);
        this.K.Solve(N.tImpulse, -s, -g);
        s = N.tImpulse.x;
        g = N.tImpulse.y;
        f.m_sweep.c.x -= f.m_invMass * s;
        f.m_sweep.c.y -= f.m_invMass * g;
        f.m_sweep.a -= f.m_invI * (r * g - c * s);
        j.m_sweep.c.x +=
            j.m_invMass * s;
        j.m_sweep.c.y += j.m_invMass * g;
        j.m_sweep.a += j.m_invI * (t * g - q * s);
        f.SynchronizeTransform();
        j.SynchronizeTransform();
        return d <= b.b2_linearSlop && m <= b.b2_angularSlop
    };
    Box2D.postDefs.push(function() {
        Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse = new f
    });
    Box2D.inherit(O, Box2D.Dynamics.Joints.b2JointDef);
    O.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    O.b2RevoluteJointDef = function() {
        Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
        this.localAnchorA = new f;
        this.localAnchorB =
            new f
    };
    O.prototype.b2RevoluteJointDef = function() {
        this.__super.b2JointDef.call(this);
        this.type = x.e_revoluteJoint;
        this.localAnchorA.Set(0, 0);
        this.localAnchorB.Set(0, 0);
        this.motorSpeed = this.maxMotorTorque = this.upperAngle = this.lowerAngle = this.referenceAngle = 0;
        this.enableMotor = this.enableLimit = !1
    };
    O.prototype.Initialize = function(b, c, d) {
        this.bodyA = b;
        this.bodyB = c;
        this.localAnchorA = this.bodyA.GetLocalPoint(d);
        this.localAnchorB = this.bodyB.GetLocalPoint(d);
        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle()
    };
    Box2D.inherit(Z, Box2D.Dynamics.Joints.b2Joint);
    Z.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    Z.b2WeldJoint = function() {
        Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
        this.m_localAnchorA = new f;
        this.m_localAnchorB = new f;
        this.m_impulse = new j;
        this.m_mass = new d
    };
    Z.prototype.GetAnchorA = function() {
        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA)
    };
    Z.prototype.GetAnchorB = function() {
        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB)
    };
    Z.prototype.GetReactionForce = function(b) {
        void 0 ===
            b && (b = 0);
        return new f(b * this.m_impulse.x, b * this.m_impulse.y)
    };
    Z.prototype.GetReactionTorque = function(b) {
        void 0 === b && (b = 0);
        return b * this.m_impulse.z
    };
    Z.prototype.b2WeldJoint = function(b) {
        this.__super.b2Joint.call(this, b);
        this.m_localAnchorA.SetV(b.localAnchorA);
        this.m_localAnchorB.SetV(b.localAnchorB);
        this.m_referenceAngle = b.referenceAngle;
        this.m_impulse.SetZero();
        this.m_mass = new d
    };
    Z.prototype.InitVelocityConstraints = function(b) {
        var c, d = 0,
            e = this.m_bodyA,
            f = this.m_bodyB;
        c = e.m_xf.R;
        var j = this.m_localAnchorA.x -
            e.m_sweep.localCenter.x,
            m = this.m_localAnchorA.y - e.m_sweep.localCenter.y,
            d = c.col1.x * j + c.col2.x * m,
            m = c.col1.y * j + c.col2.y * m,
            j = d;
        c = f.m_xf.R;
        var g = this.m_localAnchorB.x - f.m_sweep.localCenter.x,
            r = this.m_localAnchorB.y - f.m_sweep.localCenter.y,
            d = c.col1.x * g + c.col2.x * r,
            r = c.col1.y * g + c.col2.y * r,
            g = d;
        c = e.m_invMass;
        var d = f.m_invMass,
            p = e.m_invI,
            q = f.m_invI;
        this.m_mass.col1.x = c + d + m * m * p + r * r * q;
        this.m_mass.col2.x = -m * j * p - r * g * q;
        this.m_mass.col3.x = -m * p - r * q;
        this.m_mass.col1.y = this.m_mass.col2.x;
        this.m_mass.col2.y = c + d + j * j *
            p + g * g * q;
        this.m_mass.col3.y = j * p + g * q;
        this.m_mass.col1.z = this.m_mass.col3.x;
        this.m_mass.col2.z = this.m_mass.col3.y;
        this.m_mass.col3.z = p + q;
        b.warmStarting ? (this.m_impulse.x *= b.dtRatio, this.m_impulse.y *= b.dtRatio, this.m_impulse.z *= b.dtRatio, e.m_linearVelocity.x -= c * this.m_impulse.x, e.m_linearVelocity.y -= c * this.m_impulse.y, e.m_angularVelocity -= p * (j * this.m_impulse.y - m * this.m_impulse.x + this.m_impulse.z), f.m_linearVelocity.x += d * this.m_impulse.x, f.m_linearVelocity.y += d * this.m_impulse.y, f.m_angularVelocity += q *
            (g * this.m_impulse.y - r * this.m_impulse.x + this.m_impulse.z)) : this.m_impulse.SetZero()
    };
    Z.prototype.SolveVelocityConstraints = function() {
        var b, c = 0,
            d = this.m_bodyA,
            e = this.m_bodyB,
            f = d.m_linearVelocity,
            m = d.m_angularVelocity,
            p = e.m_linearVelocity,
            g = e.m_angularVelocity,
            r = d.m_invMass,
            s = e.m_invMass,
            q = d.m_invI,
            t = e.m_invI;
        b = d.m_xf.R;
        var v = this.m_localAnchorA.x - d.m_sweep.localCenter.x,
            x = this.m_localAnchorA.y - d.m_sweep.localCenter.y,
            c = b.col1.x * v + b.col2.x * x,
            x = b.col1.y * v + b.col2.y * x,
            v = c;
        b = e.m_xf.R;
        var A = this.m_localAnchorB.x -
            e.m_sweep.localCenter.x,
            z = this.m_localAnchorB.y - e.m_sweep.localCenter.y,
            c = b.col1.x * A + b.col2.x * z,
            z = b.col1.y * A + b.col2.y * z,
            A = c;
        b = p.x - g * z - f.x + m * x;
        var c = p.y + g * A - f.y - m * v,
            l = g - m,
            B = new j;
        this.m_mass.Solve33(B, -b, -c, -l);
        this.m_impulse.Add(B);
        f.x -= r * B.x;
        f.y -= r * B.y;
        m -= q * (v * B.y - x * B.x + B.z);
        p.x += s * B.x;
        p.y += s * B.y;
        g += t * (A * B.y - z * B.x + B.z);
        d.m_angularVelocity = m;
        e.m_angularVelocity = g
    };
    Z.prototype.SolvePositionConstraints = function() {
        var c, d = 0,
            f = this.m_bodyA,
            m = this.m_bodyB;
        c = f.m_xf.R;
        var p = this.m_localAnchorA.x - f.m_sweep.localCenter.x,
            s = this.m_localAnchorA.y - f.m_sweep.localCenter.y,
            d = c.col1.x * p + c.col2.x * s,
            s = c.col1.y * p + c.col2.y * s,
            p = d;
        c = m.m_xf.R;
        var t = this.m_localAnchorB.x - m.m_sweep.localCenter.x,
            g = this.m_localAnchorB.y - m.m_sweep.localCenter.y,
            d = c.col1.x * t + c.col2.x * g,
            g = c.col1.y * t + c.col2.y * g,
            t = d;
        c = f.m_invMass;
        var d = m.m_invMass,
            r = f.m_invI,
            v = m.m_invI,
            q = m.m_sweep.c.x + t - f.m_sweep.c.x - p,
            x = m.m_sweep.c.y + g - f.m_sweep.c.y - s,
            A = m.m_sweep.a - f.m_sweep.a - this.m_referenceAngle,
            z = 10 * b.b2_linearSlop,
            B = Math.sqrt(q * q + x * x),
            C = e.Abs(A);
        B > z && (r *= 1, v *= 1);
        this.m_mass.col1.x = c + d + s * s * r + g * g * v;
        this.m_mass.col2.x = -s * p * r - g * t * v;
        this.m_mass.col3.x = -s * r - g * v;
        this.m_mass.col1.y = this.m_mass.col2.x;
        this.m_mass.col2.y = c + d + p * p * r + t * t * v;
        this.m_mass.col3.y = p * r + t * v;
        this.m_mass.col1.z = this.m_mass.col3.x;
        this.m_mass.col2.z = this.m_mass.col3.y;
        this.m_mass.col3.z = r + v;
        z = new j;
        this.m_mass.Solve33(z, -q, -x, -A);
        f.m_sweep.c.x -= c * z.x;
        f.m_sweep.c.y -= c * z.y;
        f.m_sweep.a -= r * (p * z.y - s * z.x + z.z);
        m.m_sweep.c.x += d * z.x;
        m.m_sweep.c.y += d * z.y;
        m.m_sweep.a += v * (t * z.y - g * z.x + z.z);
        f.SynchronizeTransform();
        m.SynchronizeTransform();
        return B <= b.b2_linearSlop && C <= b.b2_angularSlop
    };
    Box2D.inherit(T, Box2D.Dynamics.Joints.b2JointDef);
    T.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    T.b2WeldJointDef = function() {
        Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
        this.localAnchorA = new f;
        this.localAnchorB = new f
    };
    T.prototype.b2WeldJointDef = function() {
        this.__super.b2JointDef.call(this);
        this.type = x.e_weldJoint;
        this.referenceAngle = 0
    };
    T.prototype.Initialize = function(b, c, d) {
        this.bodyA = b;
        this.bodyB = c;
        this.localAnchorA.SetV(this.bodyA.GetLocalPoint(d));
        this.localAnchorB.SetV(this.bodyB.GetLocalPoint(d));
        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle()
    }
})();
(function() {
    var b = Box2D.Dynamics.b2DebugDraw;
    b.b2DebugDraw = function() {
        this.m_xformScale = this.m_fillAlpha = this.m_alpha = this.m_lineThickness = this.m_drawScale = 1;
        var b = this;
        this.m_sprite = {
            graphics: {
                clear: function() {
                    b.m_ctx.clearRect(0, 0, b.m_ctx.canvas.width, b.m_ctx.canvas.height)
                }
            }
        }
    };
    b.prototype._color = function(b, d) {
        return "rgba(" + ((b & 16711680) >> 16) + "," + ((b & 65280) >> 8) + "," + (b & 255) + "," + d + ")"
    };
    b.prototype.b2DebugDraw = function() {
        this.m_drawFlags = 0
    };
    b.prototype.SetFlags = function(b) {
        void 0 === b && (b = 0);
        this.m_drawFlags =
            b
    };
    b.prototype.GetFlags = function() {
        return this.m_drawFlags
    };
    b.prototype.AppendFlags = function(b) {
        void 0 === b && (b = 0);
        this.m_drawFlags |= b
    };
    b.prototype.ClearFlags = function(b) {
        void 0 === b && (b = 0);
        this.m_drawFlags &= ~b
    };
    b.prototype.SetSprite = function(b) {
        this.m_ctx = b
    };
    b.prototype.GetSprite = function() {
        return this.m_ctx
    };
    b.prototype.SetDrawScale = function(b) {
        void 0 === b && (b = 0);
        this.m_drawScale = b
    };
    b.prototype.GetDrawScale = function() {
        return this.m_drawScale
    };
    b.prototype.SetLineThickness = function(b) {
        void 0 === b && (b =
            0);
        this.m_lineThickness = b;
        this.m_ctx.strokeWidth = b
    };
    b.prototype.GetLineThickness = function() {
        return this.m_lineThickness
    };
    b.prototype.SetAlpha = function(b) {
        void 0 === b && (b = 0);
        this.m_alpha = b
    };
    b.prototype.GetAlpha = function() {
        return this.m_alpha
    };
    b.prototype.SetFillAlpha = function(b) {
        void 0 === b && (b = 0);
        this.m_fillAlpha = b
    };
    b.prototype.GetFillAlpha = function() {
        return this.m_fillAlpha
    };
    b.prototype.SetXFormScale = function(b) {
        void 0 === b && (b = 0);
        this.m_xformScale = b
    };
    b.prototype.GetXFormScale = function() {
        return this.m_xformScale
    };
    b.prototype.DrawPolygon = function(b, d, e) {
        if (d) {
            var f = this.m_ctx,
                j = this.m_drawScale;
            f.beginPath();
            f.strokeStyle = this._color(e.color, this.m_alpha);
            f.moveTo(b[0].x * j, b[0].y * j);
            for (e = 1; e < d; e++) f.lineTo(b[e].x * j, b[e].y * j);
            f.lineTo(b[0].x * j, b[0].y * j);
            f.closePath();
            f.stroke()
        }
    };
    b.prototype.DrawSolidPolygon = function(b, d, e) {
        if (d) {
            var f = this.m_ctx,
                j = this.m_drawScale;
            f.beginPath();
            f.strokeStyle = this._color(e.color, this.m_alpha);
            f.fillStyle = this._color(e.color, this.m_fillAlpha);
            f.moveTo(b[0].x * j, b[0].y * j);
            for (e =
                1; e < d; e++) f.lineTo(b[e].x * j, b[e].y * j);
            f.lineTo(b[0].x * j, b[0].y * j);
            f.closePath();
            f.fill();
            f.stroke()
        }
    };
    b.prototype.DrawCircle = function(b, d, e) {
        if (d) {
            var f = this.m_ctx,
                j = this.m_drawScale;
            f.beginPath();
            f.strokeStyle = this._color(e.color, this.m_alpha);
            f.arc(b.x * j, b.y * j, d * j, 0, 2 * Math.PI, !0);
            f.closePath();
            f.stroke()
        }
    };
    b.prototype.DrawSolidCircle = function(b, d, e, f) {
        if (d) {
            var j = this.m_ctx,
                p = this.m_drawScale,
                m = b.x * p,
                s = b.y * p;
            j.moveTo(0, 0);
            j.beginPath();
            j.strokeStyle = this._color(f.color, this.m_alpha);
            j.fillStyle =
                this._color(f.color, this.m_fillAlpha);
            j.arc(m, s, d * p, 0, 2 * Math.PI, !0);
            j.moveTo(m, s);
            j.lineTo((b.x + e.x * d) * p, (b.y + e.y * d) * p);
            j.closePath();
            j.fill();
            j.stroke()
        }
    };
    b.prototype.DrawSegment = function(b, d, e) {
        var f = this.m_ctx,
            j = this.m_drawScale;
        f.strokeStyle = this._color(e.color, this.m_alpha);
        f.beginPath();
        f.moveTo(b.x * j, b.y * j);
        f.lineTo(d.x * j, d.y * j);
        f.closePath();
        f.stroke()
    };
    b.prototype.DrawTransform = function(b) {
        var d = this.m_ctx,
            e = this.m_drawScale;
        d.beginPath();
        d.strokeStyle = this._color(16711680, this.m_alpha);
        d.moveTo(b.position.x * e, b.position.y * e);
        d.lineTo((b.position.x + this.m_xformScale * b.R.col1.x) * e, (b.position.y + this.m_xformScale * b.R.col1.y) * e);
        d.strokeStyle = this._color(65280, this.m_alpha);
        d.moveTo(b.position.x * e, b.position.y * e);
        d.lineTo((b.position.x + this.m_xformScale * b.R.col2.x) * e, (b.position.y + this.m_xformScale * b.R.col2.y) * e);
        d.closePath();
        d.stroke()
    }
})();
var i;
for (i = 0; i < Box2D.postDefs.length; ++i) Box2D.postDefs[i]();
delete Box2D.postDefs;
"undefined" != typeof global && (global.Box2D = Box2D);
ig.baked = !0;
ig.module("plugins.box2d.lib").defines(function() {});
ig.baked = !0;
ig.module("plugins.box2d.separator").requires("plugins.box2d.lib").defines(function() {
    (function() {
        var b = Box2D.Collision.Shapes.b2PolygonShape,
            c = Box2D.Common.Math.b2Vec2,
            d = function(b, c, d, e, s, v) {
                var A;
                if (A = (d + 0.1 >= b && b >= s - 0.1 || d - 0.1 <= b && b <= s + 0.1) && (e + 0.1 >= c && c >= v - 0.1 || e - 0.1 <= c && c <= v + 0.1)) 0.1 < s - d || 0.1 < d - s ? (b = (v - e) / (s - d) * (b - d) + e, A = 0.1 > (b > c ? b - c : c - b)) : A = 0.1 > b - d || 0.1 > d - b;
                return A
            },
            e = function() {
                throw Error("A problem has occurred. Use the Validate() method to see where the problem is.");
            };
        this.Box2DSeparator = {
            separate: function(f, j, p, m) {
                m = null != m ? m : 30;
                var s, v = p.length,
                    A, B, z = [];
                for (s = 0; s < v; s++) z.push(new c(p[s].x * m, p[s].y * m));
                var x, I, E, t, H, L, Q, M, P, C, S, N, O, Z, T = [];
                p = [];
                for (p.push(z); p.length;) {
                    s = p[0];
                    v = s.length;
                    Z = !0;
                    for (x = 0; x < v; x++)
                        if (z = x, Q = x < v - 1 ? x + 1 : x + 1 - v, E = x < v - 2 ? x + 2 : x + 2 - v, M = s[z], P = s[Q], E = s[E], E = M.x * P.y + P.x * E.y + E.x * M.y - M.y * P.x - P.y * E.x - E.y * M.x, 0 > E) {
                            Z = !1;
                            L = Number.MAX_VALUE;
                            for (I = 0; I < v; I++)
                                if (I != z && I != Q) {
                                    x = I;
                                    E = I < v - 1 ? I + 1 : 0;
                                    C = s[x];
                                    S = s[E];
                                    t = M.x;
                                    H = M.y;
                                    var n = P.x,
                                        y = P.y;
                                    N = C.x;
                                    C = C.y;
                                    var F = S.x;
                                    S = S.y;
                                    var u = n - t,
                                        G = y - H,
                                        J = F - N,
                                        W = S - C,
                                        g = void 0,
                                        g = (J * (C - H) - W * (N - t)) / (G * J - u * W),
                                        u = t + g * u,
                                        G = H + g * G;
                                    t = d(n, y, t, H, u, G);
                                    N = d(u, G, N, C, F, S);
                                    if (N = t && N ? new c(u, G) : null) t = P.x - N.x, H = P.y - N.y, t = t * t + H * H, t < L && (B = x, A = E, O = N, L = t)
                                }
                            L == Number.MAX_VALUE && e();
                            I = [];
                            L = [];
                            x = B;
                            E = A;
                            C = s[x];
                            S = s[E];
                            0.1 > (S.x >= O.x ? S.x - O.x : O.x - S.x) && 0.1 > (S.y >= O.y ? S.y - O.y : O.y - S.y) || I.push(O);
                            0.1 > (C.x >= O.x ? C.x - O.x : O.x - C.x) && 0.1 > (C.y >= O.y ? C.y - O.y : O.y - C.y) || L.push(O);
                            B = -1;
                            for (A = z;;) {
                                if (A != E) I.push(s[A]);
                                else {
                                    (0 > B || B >= v) && e();
                                    d(S.x, S.y, s[B].x, s[B].y, M.x, M.y) || I.push(s[A]);
                                    break
                                }
                                B = A;
                                0 > A - 1 ? A = v - 1 : A--
                            }
                            I = I.reverse();
                            B = -1;
                            for (A = Q;;) {
                                if (A != x) L.push(s[A]);
                                else {
                                    (0 > B || B >= v) && e();
                                    A == x && !d(C.x, C.y, s[B].x, s[B].y, P.x, P.y) && L.push(s[A]);
                                    break
                                }
                                B = A;
                                A + 1 > v - 1 ? A = 0 : A++
                            }
                            p.push(I, L);
                            p.shift();
                            break
                        }
                    Z && T.push(p.shift())
                }
                v = T.length;
                for (s = 0; s < v; s++) {
                    p = [];
                    z = T[s];
                    B = z.length;
                    for (A = 0; A < B; A++) p.push(new c(z[A].x / m, z[A].y / m));
                    A = new b;
                    A.SetAsVector(p);
                    j.shape = A;
                    f.CreateFixture(j)
                }
            },
            validate: function(b) {
                var e, p = b.length,
                    m, s, v, A, B, z = 0,
                    x, I = !1;
                for (e = 0; e < p; e++) {
                    v = e < p - 1 ? e + 1 : 0;
                    A = 0 < e ? e - 1 : p - 1;
                    x = !1;
                    for (m = 0; m < p; m++)
                        if (m !=
                            e && m != v && (x || (B = b[e].x * b[v].y + b[v].x * b[m].y + b[m].x * b[e].y - b[e].y * b[v].x - b[v].y * b[m].x - b[m].y * b[e].x, 0 < B && (x = !0)), m != A)) {
                            s = m < p - 1 ? m + 1 : 0;
                            var E = b[e].x,
                                t = b[e].y,
                                H = b[v].x,
                                L = b[v].y;
                            B = b[m].x;
                            var Q = b[m].y,
                                M = b[s].x;
                            s = b[s].y;
                            var P = H - E,
                                C = L - t,
                                S = M - B,
                                N = s - Q,
                                O = void 0,
                                O = (S * (Q - t) - N * (B - E)) / (C * S - P * N),
                                P = E + O * P,
                                C = t + O * C,
                                E = d(P, C, E, t, H, L);
                            B = d(P, C, B, Q, M, s);
                            (B = E && B ? new c(P, C) : null) && (z = 1)
                        }
                    x || (I = !0)
                }
                I && (z = 1 == z ? 3 : 2);
                return z
            }
        }
    }).call(window)
});
ig.baked = !0;
ig.module("plugins.box2d.game").requires("plugins.box2d.lib", "plugins.box2d.separator", "impact.game").defines(function() {
    ig.Box2DGame = ig.Game.extend({
        collisionRects: [],
        debugCollisionRects: !1,
        worldVelocityIterations: 6,
        worldPositionIterations: 6,
        updateTimestep: 1 / 30,
        updateTimestepAccumulator: 0,
        updateTimestepAccumulatorRatio: 0,
        lastUpdateTime: -1,
        nWorldSteps: 0,
        bodyDestroyQueue: [],
        defaultTileSegmentsDef: {},
        defaultTileVerticesDef: {},
        loadLevel: function(b) {
            this.collisionMap = ig.CollisionMap.staticNoCollision;
            for (var c = 0; c < b.layer.length; c++) {
                var d = b.layer[c];
                "collision" == d.name && (this.collisionMap = new ig.CollisionMap(d.tilesize, d.data))
            }
            ig.world = this.createWorldFromCollisionMap(this.collisionMap);
            this.setupContactListener();
            this.parent(b)
        },
        createWorldFromMap: function(b, c, d, e) {
            var f = new Box2D.Collision.b2AABB;
            f.lowerBound.Set(0, 0);
            f.upperBound.Set((c + 1) * e * Box2D.SCALE, (d + 1) * e * Box2D.SCALE);
            f = new Box2D.Common.Math.b2Vec2(0, ig.game.gravity * Box2D.SCALE);
            world = new Box2D.Dynamics.b2World(f, !0);
            b = ig.copy(b);
            this.collisionRects = [];
            for (f = 0; f < d; f++)
                for (var j = 0; j < c; j++)
                    if (b[f][j]) {
                        var p = this._extractRectFromMap(b, c, d, j, f);
                        this.collisionRects.push(p)
                    }
            for (c = 0; c < this.collisionRects.length; c++) d = this.collisionRects[c], b = new Box2D.Dynamics.b2BodyDef, b.position.Set(d.x * e * Box2D.SCALE + d.width * e / 2 * Box2D.SCALE, d.y * e * Box2D.SCALE + d.height * e / 2 * Box2D.SCALE), b = world.CreateBody(b), f = new Box2D.Collision.Shapes.b2PolygonShape, f.SetAsBox(d.width * e / 2 * Box2D.SCALE, d.height * e / 2 * Box2D.SCALE), b.CreateFixture2(f);
            return world
        },
        _extractRectFromMap: function(b,
            c, d, e, f) {
            for (var j = {
                x: e,
                y: f,
                width: 1,
                height: 1
            }, p = e + 1; p < c && b[f][p]; p++) j.width++, b[f][p] = 0;
            for (c = f + 1; c < d; c++) {
                f = 0;
                for (p = e; p < e + j.width && b[c][p]; p++) f++;
                if (f == j.width) {
                    j.height++;
                    for (p = e; p < e + j.width; p++) b[c][p] = 0
                } else break
            }
            return j
        },
        update: function() {
            if (!ig.game.box2dPaused && ig.world) {
                var b = ig.system.clock.delta() - this.lastUpdateTime;
                this.lastUpdateTime = ig.system.clock.delta();
                this.updateTimestepAccumulator += b;
                this.nWorldSteps = Math.floor(this.updateTimestepAccumulator / this.updateTimestep);
                0 < this.nWorldSteps &&
                    (this.updateTimestepAccumulator -= this.nWorldSteps * this.updateTimestep);
                this.updateTimestepAccumulatorRatio = this.updateTimestepAccumulator / this.updateTimestep;
                for (var b = Math.min(this.nWorldSteps, 5), c = 0; c < b; c++) {
                    this.resetSmoothStates();
                    ig.world.Step(this.updateTimestep, this.worldVelocityIterations, this.worldPositionIterations);
                    for (var d = ig.world.GetBodyList(); d; d = d.m_next)
                        if (d.IsAwake()) {
                            var e = d.GetFixtureList();
                            if (!e || !e.IsSensor()) {
                                var e = 0.6 > Math.abs(d.GetAngularVelocity()),
                                    f = 0.6 > Math.abs(d.GetLinearVelocity().Length());
                                e && f ? 30 < d.slowTime ? (d.slowTime = 0, d.SetAwake(!1)) : d.slowTime += 1 : d.slowTime = 0
                            }
                        }
                }
                ig.world.ClearForces();
                this.smoothStates()
            }
            this.parent();
            if (0 < this.bodyDestroyQueue.length) {
                for (c = 0; c < this.bodyDestroyQueue.length; c++) ig.world.DestroyBody(this.bodyDestroyQueue[c]);
                this.bodyDestroyQueue = []
            }
        },
        smoothStates: function() {
            for (var b = 1 - this.updateTimestepAccumulatorRatio, c = 0; c < this.entities.length; c++) {
                var d = this.entities[c];
                null != d.body && d.dynamicType != Box2D.Dynamics.b2Body.b2_staticBody && (d.pos.x = this.updateTimestepAccumulatorRatio *
                    d.body.GetPosition().x + b * d.previousBodyPosition.x, d.pos.y = this.updateTimestepAccumulatorRatio * d.body.GetPosition().y + b * d.previousBodyPosition.y, d.angle = this.updateTimestepAccumulatorRatio * d.body.GetAngle() + b * d.previousBodyAngle, d.currentAnim && (d.currentAnim.update(), d.currentAnim.angle = d.angle))
            }
        },
        resetSmoothStates: function() {
            for (var b = 0; b < this.entities.length; b++) {
                var c = this.entities[b];
                null != c.body && c.dynamicType != Box2D.Dynamics.b2Body.b2_staticBody && (c.pos.x = c.body.GetPosition().x, c.previousBodyPosition.x =
                    c.pos.x, c.pos.y = c.body.GetPosition().y, c.previousBodyPosition.y = c.pos.y, c.angle = c.body.GetAngle(), c.previousBodyAngle = c.body.GetAngle(), c.currentAnim && (c.currentAnim.update(), c.currentAnim.angle = c.angle))
            }
        },
        draw: function() {
            this.parent();
            if (this.debugCollisionRects)
                for (var b = this.collisionMap.tilesize, c = 0; c < this.collisionRects.length; c++) {
                    var d = this.collisionRects[c];
                    ig.system.context.strokeStyle = "#00ff00";
                    ig.system.context.strokeRect(ig.system.getDrawPos(d.x * b - this.screen.x), ig.system.getDrawPos(d.y *
                        b - this.screen.y), ig.system.getDrawPos(d.width * b), ig.system.getDrawPos(d.height * b))
                }
        },
        queueDestroyBody: function(b) {
            this.bodyDestroyQueue.push(b)
        },
        createWorldFromCollisionMap: function() {
            var b = new Box2D.Common.Math.b2Vec2(0, 0),
                b = new Box2D.Common.Math.b2Vec2(0, ig.game.gravity * Box2D.SCALE);
            world = new Box2D.Dynamics.b2World(b, !0);
            for (var b = this._shapesFromCollisionMap(this.collisionMap, {
                rectangles: !0
            }).edges, c = 0; c < b.length; c++) {
                for (var d = b[c], e = d.settings.size.x, f = d.settings.size.y, j = d.settings.vertices,
                    p = 0; p < j.length; p++) j[p].x *= Box2D.SCALE, j[p].y *= Box2D.SCALE;
                p = new Box2D.Dynamics.b2BodyDef;
                p.position.Set(d.x * Box2D.SCALE + e / 2 * Box2D.SCALE, d.y * Box2D.SCALE + f / 2 * Box2D.SCALE);
                e = world.CreateBody(p);
                this._polygonIsConvex(j) ? (d = new Box2D.Collision.Shapes.b2PolygonShape, d.SetAsArray(j, j.length), e.CreateFixture2(d)) : (d = new Box2D.Dynamics.b2FixtureDef, Box2DSeparator.separate(e, d, j, 1))
            }
            return world
        },
        _polygonIsConvex: function(b) {
            var c = this._pointsToConvexHull(b);
            return b.length === c.length - 1
        },
        setupContactListener: function() {
            var b =
                function(b, c, f) {
                    var j = c.GetFixtureA().GetBody().entity,
                        p = c.GetFixtureB().GetBody().entity;
                    if (j && p) j[b](p, c, f), p[b](j, c, f);
                    else if (j && !p) j[b](null, c, f);
                    else if (p && !j) p[b](null, c, f)
                },
                c = new Box2D.Dynamics.b2ContactListener;
            c.BeginContact = function(c) {
                b("beginContact", c)
            };
            c.EndContact = function(c) {
                b("endContact", c)
            };
            c.PostSolve = function(c, e) {
                b("postSolve", c, e)
            };
            c.PreSolve = function(c, e) {
                b("preSolve", c, e)
            };
            ig.world.SetContactListener(c)
        },
        _shapesFromCollisionMap: function(b, c) {
            var d = {
                edges: []
            };
            if (b instanceof ig.CollisionMap) {
                c = c || {};
                var e = ig.copy(b.data),
                    f = b.tilesize,
                    j = b.width,
                    p = b.height,
                    m = [],
                    s, v, A, B, z, x, I, E, t, H;
                for (x = 0; x < p; x++)
                    for (z = 0; z < j; z++) {
                        H = this._shapeFromTile(b, z, x);
                        t = {
                            id: b.data[x][z],
                            ix: z,
                            iy: x,
                            x: z * f,
                            y: x * f,
                            width: f,
                            height: f,
                            shape: H
                        };
                        if (0 < H.vertices.length) {
                            v = [];
                            s = H.vertices;
                            A = H.segments;
                            I = 0;
                            for (E = A.length; I < E; I++) {
                                B = A[I];
                                var L = s[B.a];
                                v[B.a] = {
                                    x: t.x + L.x * f,
                                    y: t.y + L.y * f
                                }
                            }
                            H.vertices = v;
                            m.push(t)
                        }
                        e[x][z] = t
                    }
                f = c.rectangles;
                c.rectangles = "undefined" !== typeof f ? f : !c.contourSolids;
                d.edges = d.edges.concat(this._shapedTilesToShapes(m,
                    e, c))
            }
            return d
        },
        _shapeFromTile: function(b, c, d) {
            var e;
            e = b.data[d][c];
            b = this._verticesFromTile(b, c, d);
            var f;
            if (b)
                if (this.defaultTileSegmentsDef[e]) f = this.defaultTileSegmentsDef[e];
                else {
                    this.defaultTileSegmentsDef[e] = f = [];
                    e = 0;
                    for (c = b.length; e < c; e++) {
                        var j = b[e];
                        d = e === c - 1 ? 0 : e + 1;
                        var p = b[d],
                            m = p.x - j.x,
                            j = p.y - j.y,
                            p = Math.sqrt(m * m + j * j);
                        f.push({
                            a: e,
                            b: d,
                            normal: {
                                x: j / p,
                                y: -m / p
                            }
                        })
                    }
                }
            return {
                vertices: b,
                segments: f || []
            }
        },
        _verticesFromTile: function(b, c, d) {
            c = b.data[d][c];
            if (this.defaultTileVerticesDef[c]) d = this.defaultTileVerticesDef[c];
            else if (1 === c) d = [{
                x: 0,
                y: 0
            }, {
                x: 1,
                y: 0
            }, {
                x: 1,
                y: 1
            }, {
                x: 0,
                y: 1
            }];
            else {
                d = [];
                if (b = b.tiledef[c]) {
                    var e = d[0] = {
                            x: b[0],
                            y: b[1]
                        },
                        f = d[1] = {
                            x: b[2],
                            y: b[3]
                        };
                    b = e.x;
                    var e = e.y,
                        j = f.x,
                        f = f.y,
                        p = j - b,
                        m = f - e,
                        s = d[2] = {
                            x: 0 > m ? 1 : 0,
                            y: 0 < p ? 1 : 0
                        },
                        v = s.x,
                        s = s.y,
                        A;
                    A = !1;
                    if (1 > Math.abs(p) && 1 > Math.abs(m)) {
                        var p = _utv2.pointQuadrant(b, e, 0.5, 0.5),
                            m = _utv2.pointQuadrant(j, f, 0.5, 0.5),
                            B = _utv2.pointQuadrant(v, s, 0.5, 0.5);
                        !(p & B) && !(m & B) && (A = !0)
                    }!0 === A ? (v !== s ? (A = v, m = s, 1 == v ? (s = 1, p = 0) : (s = 0, p = 1)) : (p = v, m = 1 == v ? A = 0 : A = 1), d[3] = {
                        x: A,
                        y: s
                    }, d[4] = {
                        x: p,
                        y: m
                    }) : (v !== s ? (A =
                        v, m = s, 1 == v ? (s = Math.max(e, f), p = Math.min(b, j)) : (s = Math.min(e, f), p = Math.max(b, j))) : (p = v, 1 == v ? (A = Math.min(b, j), m = Math.min(e, f)) : (A = Math.max(b, j), m = Math.max(e, f))), A === b && s === e || A === j && s === f ? p === b && m === e || p === j && m === f || (d[3] = {
                        x: p,
                        y: m
                    }) : d[3] = {
                        x: A,
                        y: s
                    });
                    d = this._pointsToConvexHull(d)
                }
                this.defaultTileVerticesDef[c] = d
            }
            return d
        },
        _pointsToConvexHull: function(b) {
            if (3 > b.length) return b;
            var c, d, e = 0,
                f = b[e],
                j;
            c = 1;
            for (d = b.length; c < d; c++) j = b[c], j.y === f.y ? j.x < f.x && (e = c, f = j) : j.y < f.y && (e = c, f = j);
            var p = [],
                m;
            c = 0;
            for (d = b.length; c <
                d; c++) c !== e && (j = b[c], m = {
                x: j.x,
                y: j.y
            }, m.angle = Math.atan((j.y - f.y) / (j.x - f.x)), 0 > m.angle && (m.angle += Math.PI), m.distance = (j.x - f.x) * (j.x - f.x) + (j.y - f.y) * (j.y - f.y), m.index = c, p.push(m));
            p.sort(function(b, c) {
                return b.angle < c.angle ? -1 : b.angle > c.angle ? 1 : b.distance < c.distance ? -1 : b.distance > c.distance ? 1 : 0
            });
            p.unshift(p[p.length - 1], {
                x: f.x,
                y: f.y,
                index: e
            });
            e = 2;
            c = 3;
            for (d = b.length; c <= d; c++) {
                for (; 0 >= this._pointsCW(p[e - 1], p[e], p[c]);) e--;
                e++;
                f = p[c];
                p[c] = p[e];
                p[e] = f
            }
            d = [];
            for (c = 0; c <= e; c++) d[c] = b[p[c].index];
            return d
        },
        _pointsCW: function(b, c, d) {
            return (c.x - b.x) * (d.y - b.y) - (c.y - b.y) * (d.x - b.x)
        },
        _shapedTilesToShapes: function(b, c, d) {
            d = d || {};
            var e = [],
                f = [],
                j = [],
                p, m, s, v;
            if (d.groupByTileId) {
                delete d.groupByTileId;
                var j = [],
                    A = {};
                p = 0;
                for (m = b.length; p < m; p++) f = b[p], A[f.id] ? A[f.id].push(f) : (j.push(f.id), A[f.id] = [f]);
                p = 0;
                for (m = j.length; p < m; p++) b = j[p], f = A[b], d.id = b, e = e.concat(this._shapedTilesToShapes(f, c, d))
            } else {
                if (d.rectangles) {
                    p = b.slice(0);
                    for (b = []; 0 < p.length;) {
                        m = this._findShapedTileLine(p);
                        this._arrayCautiousRemoveMulti(p, m);
                        f = m.length;
                        A = m;
                        for (s = !0; s;)
                            if (s = !1, v = m[0], v = c[v.iy][v.ix + 1]) v = this._indexOfValue(p, v), -1 !== v && (m = this._findShapedTileLine(p, !1, v, f), m.length === f && (this._arrayCautiousRemoveMulti(p, m), A = A.concat(m), s = !0));
                        0 < A.length && b.push(A)
                    }
                    s = 0;
                    for (v = b.length; s < v; s++) {
                        A = b[s];
                        f = [];
                        p = 0;
                        for (m = A.length; p < m; p++) f = f.concat(this._getNonDuplicateSegmentVertices(A[p], c, A));
                        j = j.concat(this._verticesToContours(f, d))
                    }
                } else {
                    p = 0;
                    for (m = b.length; p < m; p++) f = f.concat(this._getNonDuplicateSegmentVertices(b[p], c, b));
                    j = this._verticesToContours(f,
                        d)
                }
                p = 0;
                for (m = j.length; p < m; p++) c = j[p], e.push({
                    id: d.id,
                    x: c.minX,
                    y: c.minY,
                    settings: {
                        size: {
                            x: c.width,
                            y: c.height
                        },
                        vertices: c.vertices
                    }
                })
            }
            return e
        },
        _findShapedTileLine: function(b, c, d, e) {
            e = e || 0;
            d = b[d || 0];
            for (var f = [], j = !0; j;) {
                j = !1;
                f.push(d);
                if (f.length === e) break;
                var p = c ? this._stepShapedTileHorizontally(b, d) : this._stepShapedTileVertically(b, d);
                d !== p && (j = !0, d = p)
            }
            return f
        },
        _stepShapedTileHorizontally: function(b, c) {
            for (var d = 0, e = b.length; d < e; d++) {
                var f = b[d];
                if (c.iy === f.iy && c.ix + 1 === f.ix) return f
            }
            return c
        },
        _stepShapedTileVertically: function(b,
            c) {
            for (var d = 0, e = b.length; d < e; d++) {
                var f = b[d];
                if (c.ix === f.ix && c.iy + 1 === f.iy) return f
            }
            return c
        },
        _arrayCautiousRemoveMulti: function(b, c) {
            var d;
            c = this._toArray(c);
            for (var e = 0, f = c.length; e < f; e++) d = c[e], d !== b && (d = this._indexOfValue(b, d), -1 !== d && b.splice(d, 1));
            return b
        },
        _toArray: function(b) {
            return b ? !0 !== this._isArray(b) ? [b] : b : []
        },
        _isArray: function(b) {
            return "[object Array]" === Object.prototype.toString.call(b)
        },
        _indexOfValue: function(b, c) {
            for (var d = 0, e = b.length; d < e; d++)
                if (c === b[d]) return d;
            return -1
        },
        _getNonDuplicateSegmentVertices: function(b,
            c, d) {
            var e = b.shape,
                f = e.vertices,
                e = e.segments,
                j = [],
                p, m, s, v;
            p = 0;
            for (m = e.length; p < m; p++) {
                s = e[p];
                var A = f[s.a],
                    B = f[s.b],
                    z = s.normal,
                    x = !1;
                if (0 === z.x && 0 !== z.y || 0 !== z.x && 0 === z.y) {
                    var I = this._getTouchingTilesByDirection(b, z, c, d);
                    s = 0;
                    for (v = I.length; s < v; s++) {
                        var E = I[s];
                        if (0 < E.shape.vertices.length && (x = this._getSegmentOverlapWithTile(A, B, z, E))) break
                    }
                }!1 === x ? j.push(A, B) : x.segmentA && j.push(x.segmentA.va, x.segmentA.vb)
            }
            return j
        },
        _getTouchingTilesByDirection: function(b, c, d, e) {
            var f = b.ix;
            b = b.iy;
            var j = c.x;
            c = c.y;
            var p = [],
                m;
            0 !== j && (m = d[b], 0 < j ? f < m.length - 1 && (j = m[f + 1], (!e || -1 !== this._indexOfValue(e, j)) && p.push(j)) : 0 < f && (j = m[f - 1], (!e || -1 !== this._indexOfValue(e, j)) && p.push(j)));
            0 !== c && (0 < c ? b < d.length - 1 && (j = d[b + 1][f], (!e || -1 !== this._indexOfValue(e, j)) && p.push(j)) : 0 < b && (j = d[b - 1][f], (!e || -1 !== this._indexOfValue(e, j)) && p.push(j)));
            return p
        },
        _getSegmentOverlapWithTile: function(b, c, d, e) {
            var f = !1,
                j = e.shape;
            e = j.vertices;
            var j = j.segments,
                p, m, s, v, A;
            p = 0;
            for (m = j.length; p < m; p++)
                if (s = j[p], v = s.normal, d.x === -v.x && d.y === -v.y) {
                    A = s;
                    break
                }
            if (A) {
                d =
                    e[A.a];
                A = e[A.b];
                p = b.x;
                m = b.y;
                e = c.x;
                j = c.y;
                v = d.x;
                var B = d.y,
                    z = A.x,
                    x = A.y,
                    I = e - p;
                s = j - m;
                var E = Math.sqrt(I * I + s * s),
                    I = I / E,
                    E = s / E;
                s = v - z;
                var t = B - x,
                    H = Math.sqrt(s * s + t * t);
                0 === I * (t / H) - E * (s / H) && (0 !== I ? (s = Math.min(p, z), x = Math.max(p, z), z = Math.min(e, v), B = Math.max(e, v), v = I, m = e, e = "x") : (s = Math.min(m, x), x = Math.max(m, x), z = Math.min(j, B), B = Math.max(j, B), v = E, p = m, m = j, e = "y"), s === x && z === B ? f = !0 : (j = 0 > v ? s - B : z - x, 0 < j && (f = {
                    segmentA: {
                        va: {
                            x: b.x,
                            y: b.y
                        },
                        vb: {
                            x: c.x,
                            y: c.y
                        }
                    },
                    segmentB: {
                        va: {
                            x: d.x,
                            y: d.y
                        },
                        vb: {
                            x: A.x,
                            y: A.y
                        }
                    }
                }, b = !0, 0 > v ? (c = s === x ? 0 : s ===
                    p ? 2 : 1, d = z === B ? 0 : B === m ? 2 : 1, 1 === c ? (f.segmentA.vb[e] += j, b = !1) : 2 === c && (f.segmentB.va[e] += j), 1 === d ? (f.segmentA.va[e] -= j, b = !1) : 2 === d && (f.segmentB.vb[e] -= j)) : (c = s === x ? 0 : s === p ? 1 : 2, d = z === B ? 0 : B === m ? 1 : 2, 1 === c ? (f.segmentA.vb[e] -= j, b = !1) : 2 === c && (f.segmentB.va[e] -= j), 1 === d ? (f.segmentA.va[e] += j, b = !1) : 2 === d && (f.segmentB.vb[e] += j)), !0 === b && (f = !0))))
            }
            return f
        },
        _verticesToContours: function(b, c) {
            var d = [];
            if (1 < b.length) {
                c = c || {};
                for (var e = b.slice(0), f = {
                    vertices: [],
                    minX: Number.MAX_VALUE,
                    minY: Number.MAX_VALUE,
                    maxX: -Number.MAX_VALUE,
                    maxY: -Number.MAX_VALUE
                }, j = f.vertices, p = e.pop(), m = e.pop(), s, v, A, B, z, x; - 2 < e.length;) {
                    m = !1;
                    A = j[0];
                    if (2 >= j.length || p.x !== A.x || p.y !== A.y) {
                        B = 0;
                        for (z = e.length; B < z; B += 2)
                            if (s = e[B], v = e[B + 1], p.x === s.x && p.y === s.y) {
                                m = !0;
                                break
                            }
                    }
                    j.push(p);
                    p.x < f.minX && (f.minX = p.x);
                    p.x > f.maxX && (f.maxX = p.x);
                    p.y < f.minY && (f.minY = p.y);
                    p.y > f.maxY && (f.maxY = p.y);
                    if (!0 === m) e.splice(B, 2), m = s, p = v;
                    else if (3 <= f.vertices.length && d.push(f), 0 < e.length) f = {
                            vertices: []
                        }, f.minX = f.minY = Number.MAX_VALUE, f.maxX = f.maxY = -Number.MAX_VALUE, j = f.vertices, p =
                        e.pop(), m = e.pop();
                    else break
                }
                B = 0;
                for (z = d.length; B < z; B++) f = d[B], f.width = f.maxX - f.minX, f.height = f.maxY - f.minY;
                d.sort(function(b, c) {
                    return c.width * c.width + c.height * c.height - (b.width * b.width + b.height * b.height)
                });
                z = d.slice(0);
                j = [];
                m = [];
                for (f = z.pop(); - 1 < z.length;) {
                    p = !1;
                    if (f) {
                        for (B = d.length - 1; - 1 < B; B--)
                            if (x = d[B], f !== x && this._AABBContains(f.minX, f.minY, f.maxX, f.maxY, x.minX, x.minY, x.maxX, x.maxY)) {
                                p = !0;
                                break
                            }
                        m.push(f)
                    }
                    if (p) z.erase(x), f = x;
                    else if (1 < m.length && j.push(m), 0 < z.length) m = [], f = z.pop();
                    else break
                }
                A = [];
                e = [];
                B = 0;
                for (z = j.length; B < z; B++) {
                    m = j[B];
                    s = m[m.length - 1];
                    v = m[m.length - 2];
                    x = 0 === m.length % 2 ? 0 : 1;
                    for (p = m.length; x < p; x += 2) f = m[x], -1 === this._indexOfValue(A, f) && (f.vertices.reverse(), A.push(f));
                    !c.retainBoundaryOuter && -1 === this._indexOfValue(e, s) && (e.push(s), this._arrayCautiousRemove(d, s));
                    c.discardBoundaryInner && -1 === this._indexOfValue(e, v) && (e.push(v), this._arrayCautiousRemove(d, v));
                    c.discardEdgesInner && 2 < m.length && (f = m.slice(2), e = e.concat(f), this._arrayCautiousRemoveMulti(d, f))
                }
                B = 0;
                for (z = d.length; B < z; B++) {
                    f =
                        d[B];
                    j = f.vertices;
                    if (!c.discardCollinear) {
                        A = j[0];
                        for (x = j.length - 1; 0 < x; x--) m = j[x], p = j[x - 1], 0 === this._pointsCW(A, m, p) ? j.splice(x, 1) : A = m, m = p;
                        0 === this._pointsCW(j[x + 1], j[x], j[j.length - 1]) && j.splice(0, 1)
                    }
                    c.reverse && j.reverse();
                    A = f.minX;
                    e = f.minY;
                    s = f.width;
                    f = f.height;
                    x = 0;
                    for (p = j.length; x < p; x++) m = j[x], m.x -= A + 0.5 * s, m.y -= e + 0.5 * f
                }
            }
            return d
        },
        _AABBContains: function(b, c, d, e, f, j, p, m) {
            return b >= f && d <= p && c >= j && e <= m ? !0 : !1
        },
        _arrayCautiousRemove: function(b, c) {
            var d = this._indexOfValue(b, c); - 1 !== d && b.splice(d, 1);
            return b
        }
    });
    Box2D.Common.b2Settings.b2_maxTranslation = 10;
    Box2D.Common.b2Settings.b2_maxTranslationSquared = 100
});
ig.baked = !0;
ig.module("plugins.box2d.entity").requires("impact.entity", "plugins.box2d.game").defines(function() {
    ig.Box2DEntity = ig.Entity.extend({
        body: null,
        angle: 0,
        box2dType: null,
        dynamicType: null,
        density: null,
        friction: null,
        restitution: null,
        rotate: null,
        previousBodyPosition: {
            x: 0,
            y: 0
        },
        previousBodyAngle: 0,
        slowTime: 0,
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.global.wm || this.createBody();
            0 < this.rotate && (this.angle = this.rotate * Math.PI / 180)
        },
        createBody: function() {
            var b = new Box2D.Dynamics.b2BodyDef;
            b.position = new Box2D.Common.Math.b2Vec2((this.pos.x +
                this.size.x / 2) * Box2D.SCALE, (this.pos.y + this.size.y / 2) * Box2D.SCALE);
            this.previousBodyPosition = {
                x: b.position.x,
                y: b.position.y
            };
            this.rotate && (b.angle = this.rotate * Math.PI / 180);
            this.previousBodyAngle = b.angle;
            null == this.dynamicType || 0 == this.dynamicType ? b.type = Box2D.Dynamics.b2Body.b2_dynamicBody : 1 == this.dynamicType ? b.type = Box2D.Dynamics.b2Body.b2_kinematicBody : 2 == this.dynamicType && (b.type = Box2D.Dynamics.b2Body.b2_staticBody);
            this.body = ig.world.CreateBody(b);
            b = new Box2D.Dynamics.b2FixtureDef;
            null == this.box2dType ||
                0 == this.box2dType ? (b.shape = new Box2D.Collision.Shapes.b2PolygonShape, b.shape.SetAsBox(this.size.x / 2 * Box2D.SCALE, this.size.y / 2 * Box2D.SCALE)) : 1 == this.box2dType ? (b.shape = new Box2D.Collision.Shapes.b2CircleShape, b.shape.SetRadius(this.size.x / 2 * Box2D.SCALE)) : 2 == this.box2dType && (b.shape = new Box2D.Collision.Shapes.b2PolygonShape, b.shape.SetAsArray(this.vertices, this.vertices.length));
            this.density && (b.density = this.density);
            this.friction && (b.friction = this.friction);
            this.restitution && (b.restitution = this.restitution);
            this.body.CreateFixture(b);
            this.body.SetUserData(this)
        },
        update: function() {
            var b = this.body.GetPosition();
            this.previousBodyPosition = {
                x: this.pos.x,
                y: this.pos.y
            };
            this.pos = {
                x: b.x / Box2D.SCALE - this.size.x / 2,
                y: b.y / Box2D.SCALE - this.size.y / 2
            };
            this.previousBodyAngle = this.angle;
            this.angle = this.body.GetAngle().round(2);
            this.currentAnim && (this.currentAnim.update(), this.currentAnim.angle = this.angle)
        },
        kill: function() {
            ig.game.queueDestroyBody(this.body);
            this.parent()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.characters.farmer").requires("impact.entity", "plugins.box2d.entity").defines(function() {
    EntityFarmer = ig.Box2DEntity.extend({
        zIndex: 1250,
        type: ig.Entity.TYPE.B,
        checkAgainst: ig.Entity.TYPE.A,
        size: {
            x: 30,
            y: 60
        },
        offset: {
            x: 5,
            y: -1
        },
        box2dType: 0,
        dynamicType: 0,
        density: 0.5,
        friction: 0.7,
        restitution: 0.3,
        type: 1,
        signalStep: 0,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/farmer.png", 47, 59.98),
        sign: new ig.Image("media/graphics/game/characters/signal.png"),
        init: function(b, c,
            d) {
            this.parent(b, c, d);
            this.addAnim("empty", 0, [100]);
            this.addAnim("idle", 0.03, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
            this.currentAnim = this.anims.empty;
            ig.global.wm && (this.currentAnim = this.anims.idle)
        },
        update: function() {
            this.parent();
            !1 == this.hidden && !this.appeared && (ig.game.spawnEntity(EntityGrenadeSmokeSmall, this.pos.x + this.size.x / 2 + 10, this.pos.y - 5, {
                mother: this,
                bodySize: 1
            }), this.currentAnim = this.anims.idle, this.appeared = !0)
        },
        kill: function() {
            this.parent()
        },
        check: function(b) {
            b && b.body ? !0 != b.body.m_fixtureList.m_isSensor && (this.body.GetLinearVelocity().Length(), b.body.GetLinearVelocity().Length(), 8 < this.body.GetLinearVelocity().Length() + b.body.GetLinearVelocity().Length() && this.currentAnim == this.anims.idle && (this.body.m_fixtureList.m_isSensor = !0, this.kill(), this.hitted = ig.game.spawnEntity(EntityFarmerHitted, this.pos.x + this.size.x / 2 - 23.5 + 5, this.pos.y + 20, {
                mother: this
            }))) : (this.body.GetLinearVelocity().Length(), 10 < this.body.GetLinearVelocity().Length() &&
                this.currentAnim == this.anims.idle && (this.body.m_fixtureList.m_isSensor = !0, this.kill(), this.hitted = ig.game.spawnEntity(EntityFarmerHitted, this.pos.x + this.size.x / 2 - 23.5 + 5, this.pos.y + 20, {
                    mother: this
                })))
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            if (!ig.global.wm) {
                if (0 < ig.game.getEntitiesByType(EntityGrenade).length) this.grenade = ig.game.getEntitiesByType(EntityGrenade)[0];
                else if (0 < ig.game.getEntitiesByType(EntityGrenadeBoom).length) this.grenade = ig.game.getEntitiesByType(EntityGrenadeBoom)[0];
                else if (0 < ig.game.getEntitiesByType(EntityGrenadeChild).length)
                    for (var c = 0; c < ig.game.getEntitiesByType(EntityGrenadeChild).length; c++) this.grenade = ig.game.getEntitiesByType(EntityGrenadeChild)[c];
                else this.grenade = null;
                this.grenade && (this.grenade.pos.x > this.pos.x - 150 && this.grenade.pos.x < this.pos.x + this.size.x + 150 ? this.grenade.pos.y > this.pos.y - 150 && this.grenade.pos.y < this.pos.y + this.size.y + 150 && this.drawSignal(b) : 0 != this.signalStep && (this.signalStep = 0))
            }
        },
        drawSignal: function(b) {
            2 > this.signalStep &&
                !this.signalZoomOut ? this.signalStep += 0.15 : (!1 == this.signalZoomOut && (this.signalZoomOut = !0), !0 == this.signalZoomOut && 0.15 < this.signalStep ? this.signalStep -= 0.15 : this.signalZoomOut = !1);
            0.01 < this.signalStep && b.drawImage(this.sign.data, 0, this.sign.height / 3 * Math.floor(this.signalStep), this.sign.width, this.sign.height / 3, this.pos.x + this.size.x / 2 - this.sign.width / 2 - 2, this.pos.y - 20, this.sign.width, this.sign.height / 3)
        }
    });
    EntityFarmerHitted = ig.Entity.extend({
        zIndex: 1500,
        gravityFactor: 0,
        size: {
            x: 47,
            y: 46
        },
        hitted: new ig.Image("media/graphics/game/characters/hitted.png"),
        score: 200,
        size: 0,
        alpha: 1,
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.pos.x = this.mother.pos.x + this.mother.size.x / 2 - 23.5 + 5;
            this.pos.y = this.mother.pos.y + 20;
            ig.game.playPopSound();
            ig.game.bonus += this.score;
            ig.game.bonusFontSize = 40
        },
        update: function() {
            this.parent();
            0.08 < this.alpha && 0.2 < this.size ? this.alpha -= 0.08 : 0.08 >= this.alpha && this.kill();
            this.size += 0.2
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            b.save();
            b.globalAlpha = this.alpha;
            b.drawImage(this.hitted.data, 0, 0, this.hitted.width, this.hitted.height,
                this.pos.x - 20 * this.size, this.pos.y - 20 * this.size, this.hitted.width * this.size, this.hitted.height * this.size);
            b.restore()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.characters.grenadeShadow").requires("impact.entity").defines(function() {
    EntityGrenadeShadow = ig.Entity.extend({
        size: {
            x: 10,
            y: 10
        },
        offset: {
            x: 1,
            y: 1
        },
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/grenade.png", 38, 35),
        gravityFactor: 0,
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.game.sortEntitiesDeferred();
            this.addAnim("idle", 0.25, [0]);
            this.currentAnim = this.anims.idle;
            this.grenade instanceof EntityGrenade && (this.offset = this.grenade.offset, this.size = this.grenade.size,
                this.currentAnim.alpha = this.alpha, this.currentAnim.angle = this.rotation)
        },
        update: function() {
            this.grenade instanceof EntityGrenade && (this.previousBodyAngle = this.currentAnim.angle, this.previousBodyPosition = {
                x: this.pos.x,
                y: this.pos.y
            }, this.parent(), 0 === this.ID ? (this.currentAnim.angle = this.grenade.previousBodyAngle, this.pos = this.grenade.previousBodyPosition) : (this.currentAnim.angle = this.grenade.shadows[this.ID - 1].previousBodyAngle, this.pos = this.grenade.shadows[this.ID - 1].previousBodyPosition))
        },
        draw: function() {
            this.parent()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.characters.grenade").requires("impact.entity", "plugins.box2d.entity", "game.entities.characters.grenadeShadow").defines(function() {
    EntityGrenade = ig.Box2DEntity.extend({
        zIndex: 1300,
        type: ig.Entity.TYPE.A,
        checkAgainst: ig.Entity.TYPE.B,
        size: {
            x: 20,
            y: 20
        },
        offset: {
            x: 9,
            y: 8
        },
        box2dType: 1,
        dynamicType: 0,
        density: 30,
        friction: 0.35,
        restitution: 0.237,
        setStartPoint: {
            x: 0,
            y: 0
        },
        mass: 1,
        INERTIA: 3.8E-4,
        ANGULAR_DAMPING: 2.715,
        USE_SHADOWS: !1,
        primed: !1,
        shadowCount: 3,
        shadowDelay: 3,
        EXPLODED: !1,
        EXPLOSION_RADIUS: 165,
        FUSE_TIME: 259,
        posCheckSkip: 0,
        POS_CHECK_SKIP: 2,
        stationaryTime: 0,
        STATIONARY_TIME: 10,
        MAX_MOVE: 0.118,
        activePowerups: !1,
        powerUpsVel: 2E3,
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.TrajectoryTime = new ig.Timer;
            1 == this.type ? this.animSheet = new ig.AnimationSheet("media/graphics/game/characters/grenade.png", 38, 35) : 2 == this.type ? this.animSheet = new ig.AnimationSheet("media/graphics/game/characters/grenade2.png", 38, 35) : 3 == this.type && (this.animSheet = new ig.AnimationSheet("media/graphics/game/characters/grenade3.png",
                38, 35));
            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.moo);
            this.addAnim("idle", 0.25, [0]);
            this.currentAnim = this.anims.idle;
            this.body.m_angularDamping = this.ANGULAR_DAMPING;
            this.body.m_mass = 10.037;
            this.body.m_I = this.INERTIA;
            this.fuse = this.FUSE_TIME;
            this.posCheckSkip = this.POS_CHECK_SKIP;
            this.body && this.body.SetBullet(!0)
        },
        prime: function() {
            this.primed || (this.primed = !0)
        },
        explode: function() {
            this.EXPLODED || (this.EXPLODED = !0, this.kill(), ig.game.spawnEntity(EntityGrenadeSmoke, this.pos.x - this.size.x / 2, this.pos.y -
                this.size.y / 2, {
                    mother: this,
                    bodySize: 1
                }))
        },
        powerUps: function() {
            if (!0 != ig.game.tutorialPowerUpsStopped) {
                if (1 == this.type && 0 <= this.body.m_angularVelocity && 1 > this.body.m_angularVelocity) {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.accelerate);
                    var b = this.powerUpsVel,
                        b = new Box2D.Common.Math.b2Vec2(b, 0);
                    this.body.ApplyImpulse(b, this.body.GetPosition());
                    this.USE_SHADOWS = !0
                } else if (2 == this.type && 0 <= this.body.m_angularVelocity && 1 > this.body.m_angularVelocity) {
                    var c = this.powerUpsVel / 4 * Math.cos(this.rotation1),
                        d = this.powerUpsVel / 4 * Math.sin(this.rotation1),
                        e = this.powerUpsVel / 4 * Math.cos(this.rotation2),
                        f = this.powerUpsVel / 4 * Math.sin(this.rotation2),
                        b = this.powerUpsVel / 4 * Math.cos(this.rotation3),
                        j = this.powerUpsVel / 4 * Math.sin(this.rotation3),
                        c = new Box2D.Common.Math.b2Vec2(c, d),
                        e = new Box2D.Common.Math.b2Vec2(e, f),
                        b = new Box2D.Common.Math.b2Vec2(b, j);
                    if (0 == c.y) {
                        this.waitPowerUps = !0;
                        return
                    }
                    ig.game.spawnEntity(EntityGrenadeSmoke, this.pos.x - this.size.x / 2, this.pos.y - this.size.y / 2, {
                        mother: this,
                        bodySize: 1
                    });
                    this.children ||
                        (this.child1 = ig.game.spawnEntity(EntityGrenadeChild, this.pos.x + this.size.x / 2, this.pos.y + this.size.y / 2, {
                            trooper: this.trooper
                        }), this.child2 = ig.game.spawnEntity(EntityGrenadeChild, this.pos.x + this.size.x / 2, this.pos.y + this.size.y / 2, {
                            trooper: this.trooper
                        }), this.child3 = ig.game.spawnEntity(EntityGrenadeChild, this.pos.x + this.size.x / 2, this.pos.y + this.size.y / 2, {
                            trooper: this.trooper
                        }), this.killByPowerups = !0, this.kill(), this.children = !0);
                    this.child1.body.ApplyImpulse(c, this.child1.body.GetPosition());
                    this.child2.body.ApplyImpulse(e,
                        this.child1.body.GetPosition());
                    this.child3.body.ApplyImpulse(b, this.child1.body.GetPosition());
                    this.child1.body.ApplyTorque(0.24);
                    this.child2.body.ApplyTorque(0.24);
                    this.child3.body.ApplyTorque(0.24)
                } else 3 == this.type && (this.killByPowerups = !0, this.kill(), ig.game.spawnEntity(EntityGrenadeSmoke, this.pos.x - this.size.x / 2, this.pos.y - this.size.y / 2, {
                        mother: this,
                        bodySize: 2
                    }), b = new Box2D.Common.Math.b2Vec2(1E4, 0), this.boom = ig.game.spawnEntity(EntityGrenadeBoom, this.pos.x, this.pos.y - 20, {
                        trooper: this.trooper
                    }),
                    this.boom.body.ApplyImpulse(b, this.boom.body.GetPosition()));
                this.activePowerups = !0
            }
        },
        kill: function() {
            this.USE_SHADOWS && this.destroyShadows();
            this.killByPowerups || (this.trooper.currentGrenade = null, this.trooper.canThrow = !0);
            this.parent()
        },
        onOutOFBounds: function() {
            if (this.pos.x < -this.size.x || this.pos.x > ig.system.width || this.pos.y > ig.system.height) {
                try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.out_of_bounds)
                } catch (b) {
                    console.log(b)
                }
                this.kill()
            }
        },
        getDistance: function(b, c, d, e) {
            return Math.sqrt(Math.pow(d -
                b, 2) + Math.pow(e - c, 2))
        },
        setTrajectory: function() {
            this.TrajectoryTime && 0.1 > this.TrajectoryTime.delta() ? this.setStartPointDone || (this.setStartPoint.x = this.pos.x + this.size.x / 2, this.setStartPoint.y = this.pos.y, this.setStartPointDone = !0) : (this.setStartPointDone = !1, this.TrajectoryTime.reset());
            var b = this.pos.y - this.setStartPoint.y,
                c = this.pos.x + this.size.x / 2 - this.setStartPoint.x,
                d = this.pos.x - this.setStartPoint.x;
            this.rotation1 = Math.atan2(b, this.pos.x + this.size.x - this.setStartPoint.x);
            this.rotation2 = Math.atan2(b,
                c);
            this.rotation3 = Math.atan2(b, d)
        },
        waitingPowerUps: function() {
            var b = this.powerUpsVel / 4 * Math.cos(this.rotation1),
                c = this.powerUpsVel / 4 * Math.sin(this.rotation1),
                d = this.powerUpsVel / 4 * Math.cos(this.rotation2),
                e = this.powerUpsVel / 4 * Math.sin(this.rotation2),
                f = this.powerUpsVel / 4 * Math.cos(this.rotation3),
                j = this.powerUpsVel / 4 * Math.sin(this.rotation3),
                b = new Box2D.Common.Math.b2Vec2(b, c),
                d = new Box2D.Common.Math.b2Vec2(d, e),
                f = new Box2D.Common.Math.b2Vec2(f, j);
            !0 == this.waitPowerUps && 0 != b.y && (ig.game.spawnEntity(EntityGrenadeSmoke,
                this.pos.x - this.size.x / 2, this.pos.y - this.size.y / 2, {
                    mother: this,
                    bodySize: 1
                }), this.children || (this.child1 = ig.game.spawnEntity(EntityGrenadeChild, this.pos.x, this.pos.y, {
                trooper: this.trooper
            }), this.child2 = ig.game.spawnEntity(EntityGrenadeChild, this.pos.x, this.pos.y, {
                trooper: this.trooper
            }), this.child3 = ig.game.spawnEntity(EntityGrenadeChild, this.pos.x, this.pos.y, {
                trooper: this.trooper
            }), this.killByPowerups = !0, this.kill(), this.children = !0), this.child1.body.ApplyImpulse(b, this.child1.body.GetPosition()), this.child2.body.ApplyImpulse(d,
                this.child1.body.GetPosition()), this.child3.body.ApplyImpulse(f, this.child1.body.GetPosition()), this.child1.body.ApplyTorque(0.24), this.child2.body.ApplyTorque(0.24), this.child3.body.ApplyTorque(0.24), this.waitPowerUps = !1)
        },
        update: function() {
            this.onOutOFBounds();
            this.setTrajectory();
            this.waitingPowerUps();
            this.parent();
            0 === this.posCheckSkip ? (this.posCheckSkip = this.POS_CHECK_SKIP, this.getDistance(this.pos.x, this.pos.y, this.previousBodyPosition.x, this.previousBodyPosition.y) <= this.MAX_MOVE ? (this.stationaryTime++,
                this.stationaryTime >= this.STATIONARY_TIME && (this.fuse = 0)) : this.stationaryTime = 0) : this.posCheckSkip--;
            this.body.GetLinearVelocity() && 0.38 > this.body.GetLinearVelocity().Length() && (this.USE_SHADOWS = !1, this.destroyShadows(), this.explode());
            this.USE_SHADOWS && this.createShadows();
            try {
                ig.soundHandler.playSound(ig.soundHandler.SOUNDID.prime_grenade_01)
            } catch (b) {
                console.log(b)
            }
            this.body.GetContactList() && this.body.GetContactList().contact.IsTouching() && (this.USE_SHADOWS = !1, this.destroyShadows());
            0 >= this.body.GetLinearVelocity().Length() &&
                this.explode()
        },
        createShadows: function() {
            if (!this.shadows) {
                this.shadows = [];
                for (var b = 0; b < this.shadowCount; ++b) this.shadows[b] = ig.game.spawnEntity(EntityGrenadeShadow, this.pos.x, this.pos.y, {
                    ID: b,
                    grenade: this,
                    zIndex: this.zIndex - 1 - b,
                    alpha: 0.3 - 0.3 / this.shadowCount * b,
                    rotation: this.currentAnim.angle
                })
            }
        },
        destroyShadows: function() {
            if (this.shadows) {
                for (var b = 0; b < this.shadowCount; ++b) this.shadows[b].kill(), this.shadows[b] = null;
                this.shadows = null
            }
        },
        draw: function() {
            this.parent()
        },
        check: function() {
            this.body.GetLinearVelocity().Length()
        }
    });
    EntityGrenadeChild = ig.Box2DEntity.extend({
        zIndex: 1300,
        type: ig.Entity.TYPE.A,
        checkAgainst: ig.Entity.TYPE.B,
        size: {
            x: 15,
            y: 15
        },
        offset: {
            x: 4,
            y: 4
        },
        box2dType: 1,
        dynamicType: 0,
        density: 5,
        friction: 0.35,
        restitution: 0.237,
        mass: 1,
        INERTIA: 3.8E-4,
        ANGULAR_DAMPING: 2.715,
        EXPLODED: !1,
        EXPLOSION_RADIUS: 165,
        FUSE_TIME: 259,
        posCheckSkip: 0,
        POS_CHECK_SKIP: 2,
        stationaryTime: 0,
        STATIONARY_TIME: 10,
        MAX_MOVE: 0.118,
        activePowerups: !1,
        powerUpsVel: 2E3,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/grenadeChild.png", 25,
            23),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("idle", 0.25, [0]);
            this.currentAnim = this.anims.idle;
            this.body.m_angularDamping = this.ANGULAR_DAMPING;
            this.body.m_mass = 10.037;
            this.body.m_I = this.INERTIA;
            this.fuse = this.FUSE_TIME;
            this.posCheckSkip = this.POS_CHECK_SKIP;
            this.body && this.body.SetBullet(!0)
        },
        prime: function() {
            this.primed || (this.primed = !0)
        },
        explode: function() {
            if (!this.EXPLODED) {
                this.EXPLODED = !0;
                try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.explosion_01)
                } catch (b) {
                    console.log(b)
                }
                this.kill();
                ig.game.spawnEntity(EntityGrenadeSmoke, this.pos.x - this.size.x / 2, this.pos.y - this.size.y / 2, {
                    mother: this,
                    bodySize: 0.5
                })
            }
        },
        kill: function() {
            2 > ig.game.killedChild ? ig.game.killedChild += 1 : (this.trooper.currentGrenade = null, this.trooper.canThrow = !0, ig.game.killedChild = 0);
            this.parent()
        },
        onOutOFBounds: function() {
            (this.pos.x < -this.size.x || this.pos.x > ig.system.width || this.pos.y > ig.system.height) && this.kill()
        },
        getDistance: function(b, c, d, e) {
            return Math.sqrt(Math.pow(d - b, 2) + Math.pow(e - c, 2))
        },
        update: function() {
            this.onOutOFBounds();
            this.parent();
            this.body.GetLinearVelocity() && 0.38 > this.body.GetLinearVelocity().Length() && this.explode();
            0 >= this.body.GetLinearVelocity().Length() && this.explode()
        },
        check: function() {
            this.body.GetLinearVelocity().Length()
        }
    });
    EntityGrenadeBoom = ig.Box2DEntity.extend({
        zIndex: 1300,
        type: ig.Entity.TYPE.A,
        checkAgainst: ig.Entity.TYPE.B,
        size: {
            x: 45,
            y: 45
        },
        offset: {
            x: 8,
            y: 6
        },
        box2dType: 1,
        dynamicType: 0,
        density: 100,
        friction: 0.35,
        restitution: 0.237,
        mass: 1,
        INERTIA: 3.8E-4,
        ANGULAR_DAMPING: 2.715,
        EXPLODED: !1,
        EXPLOSION_RADIUS: 165,
        FUSE_TIME: 100,
        posCheckSkip: 0,
        POS_CHECK_SKIP: 2,
        stationaryTime: 0,
        STATIONARY_TIME: 10,
        MAX_MOVE: 0.118,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/grenadeBoom.png", 55, 60),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("idle", 0.25, [0]);
            this.currentAnim = this.anims.idle;
            this.body.m_angularDamping = this.ANGULAR_DAMPING;
            this.body.m_mass = 100;
            this.body.m_I = this.INERTIA;
            this.fuse = this.FUSE_TIME;
            this.posCheckSkip = this.POS_CHECK_SKIP;
            this.body && this.body.SetBullet(!0)
        },
        prime: function() {
            this.primed ||
                (this.primed = !0)
        },
        explode: function() {
            if (!this.EXPLODED) {
                this.EXPLODED = !0;
                try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.explosion_01)
                } catch (b) {
                    console.log(b)
                }
                this.kill();
                ig.game.spawnEntity(EntityGrenadeSmoke, this.pos.x - this.size.x / 2, this.pos.y - this.size.y / 2, {
                    mother: this,
                    bodySize: 2
                })
            }
        },
        kill: function() {
            this.trooper.currentGrenade = null;
            this.trooper.canThrow = !0;
            this.parent()
        },
        onOutOFBounds: function() {
            if (this.pos.x < -this.size.x || this.pos.x > ig.system.width || this.pos.y > ig.system.height) {
                try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.out_of_bounds)
                } catch (b) {
                    console.log(b)
                }
                this.kill()
            }
        },
        getDistance: function(b, c, d, e) {
            return Math.sqrt(Math.pow(d - b, 2) + Math.pow(e - c, 2))
        },
        update: function() {
            this.onOutOFBounds();
            this.parent();
            this.body.GetLinearVelocity() && 0.38 > this.body.GetLinearVelocity().Length() && 0.3 < this.body.GetLinearVelocity().Length() && (this.fusePlus = !0);
            this.fusePlus && (this.fuse--, 10 > this.fuse && this.explode());
            0 >= this.body.GetLinearVelocity().Length() && this.explode()
        },
        check: function() {
            this.body.GetLinearVelocity().Length()
        }
    });
    EntityGrenadeSmoke = ig.Entity.extend({
        zIndex: 1400,
        gravityFactor: 0,
        size: {
            x: 40,
            y: 40
        },
        offset: {
            x: 60,
            y: 40
        },
        ignorePause: !0,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/smoke.png", 100, 81),
        init: function(b, c, d) {
            ig.game.sortEntitiesDeferred();
            this.parent(b, c, d);
            ig.game.playPopSound();
            1 < this.bodySize && (this.pos.x += this.size.x / 2, this.pos.y += this.size.y / 4);
            1 > this.bodySize && (this.pos.x -= this.size.x / 6, this.pos.y -= this.size.y / 6);
            this.addAnim("idle", 0.05, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
            this.currentAnim = this.anims.idle
        },
        update: function() {
            this.parent();
            this.currentAnim.loopCount && this.kill();
            this.setScale(this.bodySize, this.bodySize);
            ig.game.paused ? this.currentAnim.timer.pause() : this.currentAnim.timer.unpause()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.characters.cannon").requires("impact.entity", "game.entities.characters.grenade").defines(function() {
    EntityCannon = ig.Entity.extend({
        size: {
            x: 95,
            y: 96
        },
        gravityFactor: 0,
        animationFrame: 0,
        maxPowerRate: 80,
        powerRate: 80,
        MIN_POWER: 28,
        MAX_POWER: 101.55,
        TOTAL_POWER: 73.55,
        POWER_MULTIPLIER: 0.622,
        hasGrenade: !0,
        canThrow: !0,
        chargingSpeed: 3,
        bulletSize: 0,
        bulletType: 1,
        cannon: new ig.Image("media/graphics/game/characters/cannon.png"),
        tower: new ig.Image("media/graphics/game/characters/cannon-tower.png"),
        arrowBg: new ig.Image("media/graphics/game/characters/arrow-bg.png"),
        arrow: new ig.Image("media/graphics/game/characters/arrow.png"),
        bullet: new ig.Image("media/graphics/game/characters/bullet.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
            ig.input.bind(ig.KEY.SPACE, "SPACE")
        },
        update: function() {
            this.parent();
            if (ig.game.gameStart && !0 != ig.game.gameEnd && (this.bulletType = this.mother.bulletType, this.automaticSwtichBullet(), ig.game.gameStart && !ig.game.btnClicked &&
                (this.throwBullet(), ig.input.pressed("SPACE") && !ig.game.gameEnd))) {
                0 < ig.game.getEntitiesByType(EntityGrenade).length && ig.game.getEntitiesByType(EntityGrenade)[0].explode();
                0 < ig.game.getEntitiesByType(EntityGrenadeBoom).length && ig.game.getEntitiesByType(EntityGrenadeBoom)[0].explode();
                if (0 < ig.game.getEntitiesByType(EntityGrenadeChild).length)
                    for (var b = ig.game.getEntitiesByType(EntityGrenadeChild).length - 1; 0 <= b; b--) ig.game.getEntitiesByType(EntityGrenadeChild)[b].explode();
                this.bulletSize = 0;
                if (3 > this.mother.bulletType)
                    if (0 <
                        this.mother.bulletAmount[1] && 2 != this.mother.bulletType) this.mother.bulletType = 2;
                    else if (0 < this.mother.bulletAmount[2] && 3 != this.mother.bulletType) this.mother.bulletType = 3;
                else if (0 < this.mother.bulletAmount[0] && 1 != this.mother.bulletType) this.mother.bulletType = 1;
                else
                    for (b = 0; b < this.mother.bulletAmount.length; b++)
                        if (0 != this.mother.bulletAmount[b]) {
                            this.mother.bulletType = b + 1;
                            break
                        } else this.mother.bulletType = 0;
                else if (0 < this.mother.bulletAmount[0] && 1 != this.mother.bulletType) this.mother.bulletType = 1;
                else if (0 <
                    this.mother.bulletAmount[1] && 2 != this.mother.bulletType) this.mother.bulletType = 2;
                else if (0 < this.mother.bulletAmount[2] && 3 != this.mother.bulletType) this.mother.bulletType = 3;
                else
                    for (b = 0; b < this.mother.bulletAmount.length; b++)
                        if (0 != this.mother.bulletAmount[b]) {
                            this.mother.bulletType = b + 1;
                            break
                        } else this.mother.bulletType = 0
            }
        },
        automaticSwtichBullet: function() {
            if (ig.game.gameStart)
                for (var b = 0; b < this.mother.bulletAmount.length; b++) 0 == this.mother.bulletAmount[0] && 0 == this.mother.bulletAmount[1] && 0 == this.mother.bulletAmount[2] ?
                    this.bulletType = this.mother.bulletType = 0 : 0 == this.mother.bulletAmount[this.bulletType - 1] && 3 > this.bulletType ? (this.mother.bulletType += 1, this.bulletType += 1) : 0 == this.mother.bulletAmount[this.bulletType - 1] && (this.bulletType = this.mother.bulletType = 1)
        },
        charge: function() {
            !0 != ig.game.gameEnd && ig.game.allowCannonFire && (!ig.game.blockCharge && ig.game.gameStart) && (ig.input.state("click") && !this.currentGrenade && !0 != ig.game.btnClicked && null == ig.game.pointedButton && 400 > this.pointer.pos.y ? !ig.game.gameEnd && !(1 > this.bulletType) &&
                (this.charging = !0, this.setPowerPosX || (this.setPowerPosX = this.pointer.pos.x), 2 > this.animationFrame && (this.animationFrame += 0.3), 0 <= this.powerRate && this.powerRate <= this.maxPowerRate ? this.setPowerPosX < this.pointer.pos.x ? (this.powerRate += this.chargingSpeed, this.setPowerPosX = this.pointer.pos.x) : this.setPowerPosX > this.pointer.pos.x && (this.powerRate -= this.chargingSpeed, this.setPowerPosX = this.pointer.pos.x) : this.powerRate >= this.maxPowerRate ? this.powerRate = this.maxPowerRate : 0 > this.powerRate && (this.powerRate =
                    0)) : this.setPowerPosX = null)
        },
        activePowerUps: function() {
            ig.game.gameStart && ig.input.pressed("click") && null == ig.game.pointedButton && this.currentGrenade && !0 != this.currentGrenade.activePowerups && this.currentGrenade.powerUps()
        },
        throwBullet: function() {
            this.charge();
            this.activePowerUps();
            if (!0 != ig.game.gameEnd)
                if (ig.game.allowCannonFire) {
                    if (ig.game.gameStart) {
                        if (ig.input.released("click") && !this.shoot && !this.currentGrenade && !0 != ig.game.btnClicked && null == ig.game.pointedButton && 400 > this.pointer.pos.y) {
                            if (5 >
                                this.powerRate) return;
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.woosh);
                            if (ig.game.gameEnd || 1 > this.bulletType) return;
                            this.shoot = !0;
                            this.bulletSize = 0;
                            this.mother.bulletAmount[this.bulletType - 1] -= 1;
                            var b = this.MIN_POWER + this.powerRate * this.TOTAL_POWER,
                                c = b * Math.cos(this.rotation),
                                d = b * Math.sin(this.rotation),
                                c = new Box2D.Common.Math.b2Vec2(c, d);
                            this.currentGrenade || (this.currentGrenade = ig.game.spawnEntity(EntityGrenade, this.pos.x + 100 * Math.cos(this.rotation - 0.17) - 10, this.pos.y + (0.5 * this.size.y + 100 *
                                Math.sin(this.rotation - 0.17)) - 10, {
                                size: {
                                    x: 20,
                                    y: 20
                                },
                                trooper: this,
                                zIndex: this.zIndex + 1,
                                destPos: this.pointer.pos,
                                type: this.bulletType,
                                power: b
                            }));
                            this.currentGrenade.body && (this.currentGrenade.body.ApplyImpulse(c, this.currentGrenade.body.GetPosition()), this.currentGrenade.body.ApplyTorque(0.24), this.currentGrenade.prime());
                            this.charging = !1
                        }
                        this.shoot && (18 > this.animationFrame ? this.animationFrame += 0.5 : (this.shoot = !1, this.animationFrame = 0))
                    }
                } else this.powerRate = 80
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.tower.draw(this.pos.x - 3, this.pos.y);
            this.drawGun(b);
            this.drawBullet(b)
        },
        drawGun: function(b) {
            if (this.pointer) {
                this.setTargetX = this.pointer.pos.x + 20 - (this.pos.x + 5);
                var c = this.setTargetY = this.pointer.pos.y + 25 - (this.pos.y + this.size.y / 2),
                    d = this.setTargetX;
                0 > Math.atan2(c, d) ? this.rotation = Math.atan2(c, d) : -0.1 <= this.rotation && (this.rotation = 0); - 1.22 < Math.atan2(c, d) && 0 > Math.atan2(c, d) ? this.rotation = Math.atan2(c, d) : -1.2 >= this.rotation && (this.rotation = -1.22);
                b.save();
                b.translate(this.pos.x + 5, this.pos.y +
                    this.size.y / 2);
                b.rotate(this.rotation);
                b.drawImage(this.cannon.data, 0, 95 * Math.round(this.animationFrame), this.cannon.width, this.cannon.height / 19, -5, 0 - this.size.y / 2, this.cannon.width, this.cannon.height / 19);
                c = this.powerRate / this.maxPowerRate;
                0.9999 < c ? c = 1 : 0.02 > c && (c = 0.01);
                !0 == this.charging && 0.01 <= c && !ig.game.paused && !0 != ig.game.btnClicked && !ig.game.gameEnd && 400 > this.pointer.pos.y ? (this.arrowBg.draw(0 + this.size.x, -35), b.drawImage(this.arrow.data, 0, 0, this.arrow.width * c, this.arrow.height, 0 + this.size.x, -35, this.arrow.width * c, this.arrow.height)) : 400 <= this.pointer.pos.y && (this.charging = !1);
                b.restore()
            }
        },
        drawBullet: function(b) {
            1 > this.bulletSize && !this.currentGrenade ? this.bulletSize += 0.1 : 1 < this.bulletSize && (ig.game.btnClicked = !1, this.bulletSize = 1);
            0 >= this.bulletSize || (b.save(), b.translate(this.pos.x + 5, this.pos.y + this.size.y / 2), b.rotate(this.rotation), b.drawImage(this.bullet.data, 0, 23 * (this.bulletType - 1), this.bullet.width, this.bullet.height / 3, 44 - 10 * this.bulletSize, -24 - 10 * this.bulletSize, this.bullet.width *
                this.bulletSize, this.bullet.height / 3 * this.bulletSize), b.restore())
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-yes").requires("impact.entity").defines(function() {
    EntityBtnYes = ig.Entity.extend({
        size: {
            x: 282,
            y: 55
        },
        type: ig.Entity.TYPE.B,
        zIndex: 2E3,
        gravityFactor: 0,
        ignorePause: !0,
        btnStatus: 0,
        type: 5,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons-long.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.tweenIn()
        },
        update: function() {
            this.parent();
            this.CheckTouch();
            ig.game.paused || this.kill()
        },
        tweenIn: function() {
            this.tween({
                pos: {
                    y: ig.system.height /
                        2
                }
            }, 0.8, {
                onComplete: function() {}.bind(this),
                easing: ig.Tween.Easing.Quartic.EaseOut,
                delay: 0
            }).start()
        },
        tweenOut: function() {
            ig.game.paused && (ig.game.director.loadLevel(ig.game.director.currentLevel), ig.game.paused = !ig.game.paused, ig.game.btnClicked = !1)
        },
        CheckTouch: function() {
            var b = this.mother.mother.pointer;
            if (b.pos.x >= this.pos.x - 80 && b.pos.x <= this.pos.x + this.size.x - 80 && b.pos.y >= this.pos.y - 20 && b.pos.y <= this.pos.y + this.size.y - 20) {
                if (ig.input.pressed("click")) try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                } catch (c) {
                    console.log(c)
                }
                ig.input.released("click") &&
                    (this.isClicked = ig.game.btnClicked = !0);
                this.btnStatus = 1
            } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0)
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, this.tweenOut()));
            b.save();
            ig.system.context.font = "40px hole";
            ig.system.context.fillStyle = "#ffffff";
            ig.system.context.textAlign = "center";
            ig.system.context.fillText("Replay ?", ig.system.width / 2, ig.system.height / 2 - 50);
            b.restore();
            b.drawImage(this.btn.data, this.btnStatus * this.size.x + 0.5, this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 90 * this.sizeOfButton.x + 10, this.pos.y - 25 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y)
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-no").requires("impact.entity").defines(function() {
    EntityBtnNo = ig.Entity.extend({
        size: {
            x: 282,
            y: 55
        },
        type: ig.Entity.TYPE.B,
        zIndex: 2E3,
        gravityFactor: 0,
        ignorePause: !0,
        btnStatus: 0,
        type: 6,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons-long.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.tweenIn()
        },
        update: function() {
            this.parent();
            this.CheckTouch();
            ig.game.paused || this.kill()
        },
        tweenIn: function() {
            this.tween({
                pos: {
                    y: ig.system.height /
                        2 + 70
                }
            }, 0.8, {
                onComplete: function() {}.bind(this),
                easing: ig.Tween.Easing.Quartic.EaseOut,
                delay: 0
            }).start()
        },
        tweenOut: function() {
            ig.game.paused && (ig.game.paused = !ig.game.paused, ig.game.btnClicked = !1)
        },
        CheckTouch: function() {
            var b = this.mother.mother.pointer;
            if (b.pos.x >= this.pos.x - 80 && b.pos.x <= this.pos.x + this.size.x - 80 && b.pos.y >= this.pos.y - 20 && b.pos.y <= this.pos.y + this.size.y - 20) {
                if (ig.input.pressed("click")) try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                } catch (c) {
                    console.log(c)
                }
                ig.input.released("click") &&
                    (this.isClicked = ig.game.btnClicked = !0);
                this.btnStatus = 1
            } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0)
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, this.tweenOut()));
            b.save();
            b.drawImage(this.btn.data, this.btnStatus * this.size.x, this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 90 * this.sizeOfButton.x + 10, this.pos.y - 25 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y);
            b.restore()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-replay").requires("impact.entity", "game.entities.buttons.btn-yes", "game.entities.buttons.btn-no").defines(function() {
    EntityBtnReplay = ig.Entity.extend({
        size: {
            x: 65,
            y: 40
        },
        type: ig.Entity.TYPE.B,
        zIndex: 1600,
        gravityFactor: 0,
        btnStatus: 0,
        type: 1,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons.png"),
        init: function(b, c, d) {
            this.parent(b, c, d)
        },
        update: function() {
            this.parent();
            this.CheckTouch()
        },
        CheckTouch: function() {
            var b = this.mother.pointer;
            if (b.pos.x >=
                this.pos.x && b.pos.x <= this.pos.x + this.size.x && b.pos.y >= this.pos.y && b.pos.y <= this.pos.y + this.size.y) {
                if (ig.game.gameStart && !ig.game.paused && !ig.game.gameEnd && !0 != ig.game.tutorial) {
                    ig.game.pointedButton = this;
                    if (ig.input.pressed("click")) try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                    } catch (c) {
                        console.log(c)
                    }
                    ig.input.released("click") && (this.isClicked = ig.game.btnClicked = !0);
                    this.btnStatus = 1
                }
            } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0)
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.05), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.1 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, ig.game.paused || (ig.game.pointedButton == this && (ig.game.pointedButton = null), ig.game.paused = !ig.game.paused, ig.game.spawnEntity(EntityBtnYes, ig.system.width /
                2 - 70.5, ig.system.height / 2 + 100, {
                    mother: this
                }), ig.game.spawnEntity(EntityBtnNo, ig.system.width / 2 - 70.5, ig.system.height / 2 + 250, {
                mother: this
            })), ig.game.btnClicked = !1));
            b.drawImage(this.btn.data, this.btnStatus * (this.size.x - 0.5), this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 10 * this.sizeOfButton.x + 10, this.pos.y - 10 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y)
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-resume").requires("impact.entity").defines(function() {
    EntityBtnResume = ig.Entity.extend({
        size: {
            x: 282,
            y: 55
        },
        type: ig.Entity.TYPE.B,
        zIndex: 2E3,
        gravityFactor: 0,
        ignorePause: !0,
        btnStatus: 0,
        type: 3,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons-long.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.tweenIn()
        },
        update: function() {
            this.parent();
            this.CheckTouch();
            ig.game.paused || this.kill()
        },
        tweenIn: function() {
            this.tween({
                pos: {
                    y: ig.system.height /
                        2
                }
            }, 0.8, {
                onComplete: function() {}.bind(this),
                easing: ig.Tween.Easing.Quartic.EaseOut,
                delay: 0
            }).start()
        },
        tweenOut: function() {
            ig.game.paused && (ig.game.paused = !ig.game.paused, ig.game.btnClicked = !1)
        },
        CheckTouch: function() {
            var b = this.mother.mother.pointer;
            if (b.pos.x >= this.pos.x - 80 && b.pos.x <= this.pos.x + this.size.x - 80 && b.pos.y >= this.pos.y - 20 && b.pos.y <= this.pos.y + this.size.y - 20) {
                if (ig.input.pressed("click")) try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                } catch (c) {
                    console.log(c)
                }
                ig.input.released("click") &&
                    (this.isClicked = ig.game.btnClicked = !0);
                this.btnStatus = 1
            } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0)
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, this.tweenOut()));
            b.drawImage(this.btn.data, this.btnStatus * this.size.x + 0.2, this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 90 * this.sizeOfButton.x + 10, this.pos.y - 25 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y)
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-exit").requires("impact.entity").defines(function() {
    EntityBtnExit = ig.Entity.extend({
        size: {
            x: 282,
            y: 55
        },
        type: ig.Entity.TYPE.B,
        zIndex: 2E3,
        gravityFactor: 0,
        ignorePause: !0,
        btnStatus: 0,
        type: 2,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons-long.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.tweenIn()
        },
        update: function() {
            this.parent();
            this.CheckTouch();
            ig.game.paused || this.kill()
        },
        tweenIn: function() {
            this.tween({
                pos: {
                    y: ig.system.height /
                        2 + 70
                }
            }, 0.8, {
                onComplete: function() {}.bind(this),
                easing: ig.Tween.Easing.Quartic.EaseOut,
                delay: 0
            }).start()
        },
        tweenOut: function() {
            ig.game.paused && (ig.game.paused = !ig.game.paused, ig.game.director.loadLevel(1), ig.game.btnClicked = !1)
        },
        CheckTouch: function() {
            var b = this.mother.mother.pointer;
            if (b.pos.x >= this.pos.x - 80 && b.pos.x <= this.pos.x + this.size.x - 80 && b.pos.y >= this.pos.y - 20 && b.pos.y <= this.pos.y + this.size.y - 20) {
                if (ig.input.pressed("click")) try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                } catch (c) {
                    console.log(c)
                }
                ig.input.released("click") &&
                    (this.isClicked = ig.game.btnClicked = !0);
                this.btnStatus = 1
            } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0)
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, this.tweenOut()));
            b.save();
            b.drawImage(this.btn.data, this.btnStatus * this.size.x + 0.2, this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 90 * this.sizeOfButton.x + 10, this.pos.y - 25 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y);
            b.restore()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-pause").requires("impact.entity", "game.entities.buttons.btn-resume", "game.entities.buttons.btn-exit").defines(function() {
    EntityBtnPause = ig.Entity.extend({
        size: {
            x: 65,
            y: 40
        },
        type: ig.Entity.TYPE.B,
        zIndex: 1600,
        gravityFactor: 0,
        btnStatus: 0,
        type: 0,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        btn: new ig.Image("media/graphics/game/buttons/buttons.png"),
        init: function(b, c, d) {
            this.parent(b, c, d)
        },
        update: function() {
            this.parent();
            this.CheckTouch()
        },
        CheckTouch: function() {
            var b = this.mother.pointer;
            if (b.pos.x >= this.pos.x && b.pos.x <= this.pos.x + this.size.x && b.pos.y >= this.pos.y && b.pos.y <= this.pos.y + this.size.y) {
                if (!ig.game.gameStart || ig.game.paused || ig.game.gameEnd || !0 == ig.game.tutorial) return;
                ig.game.pointedButton = this;
                if (ig.input.pressed("click")) try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                } catch (c) {
                    console.log(c)
                }
                ig.input.released("click") && (this.isClicked = ig.game.btnClicked = !0);
                this.btnStatus = 1
            } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus =
                0);
            ig.game.paused && (this.btnStatus = 1)
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, ig.game.paused || (ig.game.paused = !ig.game.paused, ig.game.spawnEntity(EntityBtnResume, ig.system.width / 2 -
                70.5, ig.system.height / 2 + 100, {
                    mother: this
                }), ig.game.spawnEntity(EntityBtnExit, ig.system.width / 2 - 70.5, ig.system.height / 2 + 250, {
                mother: this
            })), ig.game.btnClicked = !1));
            b.drawImage(this.btn.data, this.btnStatus * (this.size.x - 0.5), this.type * this.size.y, this.size.x, this.size.y, this.pos.x - 10 * this.sizeOfButton.x + 10, this.pos.y - 10 * this.sizeOfButton.y + 10, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y)
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.btn-next").requires("impact.entity").defines(function() {
    EntityBtnNext = ig.Entity.extend({
        size: {
            x: 65,
            y: 40
        },
        type: ig.Entity.TYPE.B,
        zIndex: 3010,
        gravityFactor: 0,
        btnStatus: 0,
        type: 2,
        ignorePause: !0,
        sizeOfButton: {
            x: 1,
            y: 1
        },
        rotation: 0,
        btn: new ig.Image("media/graphics/game/buttons/buttons.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.game.sortEntities();
            this.rotation = !0 == this.win ? 180 * Math.PI / 180 : 0
        },
        update: function() {
            this.parent();
            this.CheckTouch()
        },
        CheckTouch: function() {
            var b =
                ig.game.getEntitiesByType(EntityPointer)[0];
            if (b.pos.x >= this.pos.x && b.pos.x <= this.pos.x + this.size.x && b.pos.y >= this.pos.y && b.pos.y <= this.pos.y + this.size.y) {
                ig.game.pointedButton = this;
                if (ig.input.pressed("click")) try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.click)
                } catch (c) {
                    console.log(c)
                }
                ig.input.released("click") && (this.isClicked = ig.game.btnClicked = !0);
                this.btnStatus = 1
            } else ig.game.pointedButton == this && (ig.game.pointedButton = null), this.isClicked || (this.btnStatus = 0);
            ig.game.paused && (this.btnStatus =
                1)
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.isClicked && !this.isReleased ? (0.8 < this.sizeOfButton.x && (this.sizeOfButton.x -= 0.1), 0.7 < this.sizeOfButton.y ? this.sizeOfButton.y -= 0.15 : this.isReleased = !0) : this.isClicked && (1 > this.sizeOfButton.x && (this.sizeOfButton.x += 0.05), 1 > this.sizeOfButton.y ? this.sizeOfButton.y += 0.1 : (this.isClicked = this.isReleased = !1, !0 == this.win ? (ig.game.gameEnd = !1, ig.game.director.levels.length == ig.game.director.currentLevel + 2 ? ig.game.director.jumpTo(LevelMain) : ig.game.director.loadLevel(ig.game.director.currentLevel +
                1)) : (ig.game.gameEnd = !1, ig.game.director.loadLevel(ig.game.director.currentLevel)), ig.game.pointedButton == this && (ig.game.pointedButton = null), ig.game.btnClicked = !1));
            b.save();
            b.translate(this.pos.x + this.size.x / 2, this.pos.y + this.size.y / 2);
            b.rotate(this.rotation);
            b.drawImage(this.btn.data, this.btnStatus * (this.size.x - 0.5), this.type * this.size.y, this.size.x, this.size.y, 0 - this.size.x / 2, 0 - this.size.y / 2, this.size.x * this.sizeOfButton.x, this.size.y * this.sizeOfButton.y);
            b.restore()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.characters.kids").requires("impact.entity").defines(function() {
    EntityKids = ig.Entity.extend({
        zIndex: 3200,
        type: ig.Entity.TYPE.B,
        size: {
            x: 212,
            y: 180
        },
        type: null,
        gravityFactor: 0,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/kids.png", 212, 180),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("idle", 1, [this.type]);
            0 == this.type && (this.delay = 0);
            1 == this.type && (this.delay = 0.6);
            2 == this.type && (this.delay = 0.2);
            3 == this.type && (this.delay = 0.5);
            this.tweenIN()
        },
        tweenIN: function() {
            this.tween({
                    pos: {
                        y: 350
                    }
                },
                0.8, {
                    onComplete: function() {
                        this.tweenComplete = !0
                    }.bind(this),
                    easing: ig.Tween.Easing.Elastic.EaseOut,
                    delay: this.delay
                }).start()
        },
        update: function() {
            this.parent();
            !0 == this.tweenComplete && (!this.rotateRight && 0.2 > this.currentAnim.angle ? this.currentAnim.angle += 0.0070 : (this.rotateLeftStart = this.rotateRight = !0, !0 == this.rotateLeftStart && -0.2 < this.currentAnim.angle ? this.currentAnim.angle -= 0.0070 : this.rotateLeftStart = this.rotateRight = !1))
        }
    })
});
ig.baked = !0;
ig.module("game.entities.common.finish").requires("impact.entity", "game.entities.buttons.btn-next", "game.entities.characters.kids").defines(function() {
    EntityFinish = ig.Entity.extend({
        size: {
            x: 640,
            y: 480
        },
        zIndex: 3E3,
        fontSize: 50,
        gravityFactor: 0,
        kid: [],
        background: new ig.Image("media/graphics/game/background/finish.png"),
        milk: new ig.Image("media/graphics/game/prop/milks.png"),
        IceCream: 0,
        milkLevel: [500, 1E3, 1500],
        milkSize: [0, 0, 0],
        transform: [!1, !1, !1],
        GameScore: [],
        GameLevel: [],
        GameDone: [],
        NewGameStorage: [],
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.tweenIN();
            ig.game.storage && this.saveGameStorage()
        },
        update: function() {
            this.parent();
            this.deco1 && (this.deco1.pos.x = this.pos.x + 18, this.deco1.pos.y = this.pos.y + 300, this.deco2.pos.x = this.pos.x + 7, this.deco2.pos.y = this.pos.y + 9, this.deco3.pos.x = this.pos.x + 602, this.deco3.pos.y = this.pos.y + 270, this.deco4.pos.y = this.pos.y + 303, this.deco5.pos.y = this.pos.y + 268, this.btnNext.pos.x = this.pos.x + 550, this.btnNext.pos.y = this.pos.y + 310)
        },
        saveGameStorage: function() {
            this.GameStorage =
                ig.game.storage.get("BABY-COW-STORAGE :");
            for (var b = 0; b < ig.game.director.levels.length - 3; b++) this.GameLevel[b] = this.GameStorage[b].Level, this.GameScore[b] = this.GameStorage[b].Score, this.GameDone[b] = this.GameStorage[b].Completed, ig.game.bonus > this.milkLevel[2] && 3 > this.GameStorage[ig.game.director.currentLevel - 2].Score ? this.GameScore[ig.game.director.currentLevel - 2] = 3 : ig.game.bonus > this.milkLevel[1] && 2 > this.GameStorage[ig.game.director.currentLevel - 2].Score ? this.GameScore[ig.game.director.currentLevel -
                2] = 2 : ig.game.bonus > this.milkLevel[0] && 1 > this.GameStorage[ig.game.director.currentLevel - 2].Score ? this.GameScore[ig.game.director.currentLevel - 2] = 1 : this.GameScore[ig.game.director.currentLevel - 1] = this.GameStorage[ig.game.director.currentLevel - 2].Score, !0 == this.win && (this.GameDone[ig.game.director.currentLevel - 2] = !0), this.NewGameStorage.push({
                Level: this.GameLevel[b],
                Score: this.GameScore[b],
                Completed: this.GameDone[b]
            }), ig.game.storage.set("BABY-COW-STORAGE :", this.NewGameStorage)
        },
        tweenIN: function() {
            this.tween({
                    pos: {
                        y: 0
                    }
                },
                0.8, {
                    onComplete: function() {
                        this.tweenCompleted = !0
                    }.bind(this),
                    easing: ig.Tween.Easing.Quartic.EaseOut,
                    delay: 1
                }).start()
        },
        drawMilk: function(b) {
            if (this.tweenCompleted) {
                if (!0 == this.win)
                    for (var c = 0; 4 > c; c++) this.kid[c] || (this.kid[c] = ig.game.spawnEntity(EntityKids, 212 / 1.3 * c - 25, ig.system.height, {
                        type: c
                    }));
                if (ig.game.bonus > this.milkLevel[0] && !0 == this.win) {
                    if (!this.sound1) {
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.win)
                        } catch (d) {
                            console.log(d)
                        }
                        this.sound1 = !0
                    }
                    1.2 > this.milkSize[0] && !1 == this.transform[0] ?
                        this.milkSize[0] += 0.08 : (this.transform[0] = !0, 1 < this.milkSize[0] && (this.milkSize[0] -= 0.05));
                    b.drawImage(this.milk.data, 0, 0, this.milk.width / 2, this.milk.height, 36, 100 - 60 * this.milkSize[0], this.milk.width / 2, this.milk.height * this.milkSize[0])
                } else {
                    if (!this.sound1) {
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.win)
                        } catch (e) {
                            console.log(e)
                        }
                        this.sound1 = !0
                    }
                    1.2 > this.milkSize[0] && !1 == this.transform[0] ? this.milkSize[0] += 0.08 : (this.transform[0] = !0, 1 < this.milkSize[0] && (this.milkSize[0] -= 0.05));
                    b.drawImage(this.milk.data,
                        this.milk.width / 2, 0, this.milk.width / 2, this.milk.height, 36, 100 - 60 * this.milkSize[0], this.milk.width / 2, this.milk.height * this.milkSize[0])
                } if (ig.game.bonus > this.milkLevel[1] && !0 == this.transform[0] && !0 == this.win) {
                    if (!this.sound2) {
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.win)
                        } catch (f) {
                            console.log(f)
                        }
                        this.sound2 = !0
                    }
                    1.2 > this.milkSize[1] && !1 == this.transform[1] ? this.milkSize[1] += 0.08 : (this.transform[1] = !0, 1 < this.milkSize[1] && (this.milkSize[1] -= 0.05));
                    b.drawImage(this.milk.data, 0, 0, this.milk.width /
                        2, this.milk.height, this.milk.width / 2 + 54, 100 - 60 * this.milkSize[0], this.milk.width / 2, this.milk.height * this.milkSize[1])
                } else if (!0 == this.transform[0]) {
                    if (!this.sound2) {
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.win)
                        } catch (j) {
                            console.log(j)
                        }
                        this.sound2 = !0
                    }
                    1.2 > this.milkSize[1] && !1 == this.transform[1] ? this.milkSize[1] += 0.08 : (this.transform[1] = !0, 1 < this.milkSize[1] && (this.milkSize[1] -= 0.05));
                    b.drawImage(this.milk.data, this.milk.width / 2, 0, this.milk.width / 2, this.milk.height, this.milk.width / 2 + 54,
                        100 - 60 * this.milkSize[0], this.milk.width / 2, this.milk.height * this.milkSize[1])
                }
                if (ig.game.bonus > this.milkLevel[2] && !0 == this.transform[1] && !0 == this.win) {
                    if (!this.sound3) {
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.win)
                        } catch (p) {
                            console.log(p)
                        }
                        this.sound3 = !0
                    }
                    1.2 > this.milkSize[2] && !1 == this.transform[2] ? this.milkSize[2] += 0.08 : (this.transform[2] = !0, 1 < this.milkSize[2] && (this.milkSize[2] -= 0.05));
                    b.drawImage(this.milk.data, 0, 0, this.milk.width / 2, this.milk.height, 36 + this.milk.width + 34, 100 - 60 * this.milkSize[0],
                        this.milk.width / 2, this.milk.height * this.milkSize[2])
                } else if (!0 == this.transform[1]) {
                    if (!this.sound3) {
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.win)
                        } catch (m) {
                            console.log(m)
                        }
                        this.sound3 = !0
                    }
                    1.2 > this.milkSize[2] && !1 == this.transform[2] ? this.milkSize[2] += 0.08 : (this.transform[2] = !0, 1 < this.milkSize[2] && (this.milkSize[2] -= 0.05));
                    b.drawImage(this.milk.data, this.milk.width / 2, 0, this.milk.width / 2, this.milk.height, 36 + this.milk.width + 34, 100 - 60 * this.milkSize[0], this.milk.width / 2, this.milk.height * this.milkSize[2])
                }
            }
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            this.background.draw(this.pos.x, this.pos.y);
            this.deco1 || (this.deco1 = ig.game.spawnEntity(EntityDeco1, 0, -480), this.deco2 = ig.game.spawnEntity(EntityDeco2, 0, -480), this.deco3 = ig.game.spawnEntity(EntityDeco3, 0, -480), this.deco4 = ig.game.spawnEntity(EntityDeco4, 200, -480), this.deco5 = ig.game.spawnEntity(EntityDeco5, 462, -480, {
                initPosX: 462
            }), this.btnNext = ig.game.spawnEntity(EntityBtnNext, 0, -480, {
                win: this.win
            }));
            this.drawMilk(b);
            this.tweenCompleted && (this.totalIceCream =
                ig.game.bonus / 100, this.IceCream < this.totalIceCream ? (this.IceCream += 0.25, Math.round(this.IceCream) === this.IceCream && (this.fontSize = 60), 50 < this.fontSize && (this.fontSize -= 3)) : 50 < this.fontSize && !this.zoomIn ? this.fontSize -= 0.1 : (this.zoomIn = !0) && 55 > this.fontSize ? this.fontSize += 0.1 : this.zoomIn = !1, b.save(), ig.system.context.font = this.fontSize + "px hole", ig.system.context.fillStyle = "#A75520", ig.system.context.textAlign = "left", ig.system.context.fillText("x" + Math.floor(this.IceCream), this.pos.x + this.size.x - 135,
                    this.pos.y + 180), b.restore())
        }
    });
    EntityDeco1 = ig.Entity.extend({
        size: {
            x: 36,
            y: 37
        },
        zIndex: 3010,
        gravityFactor: 0,
        animSheet: new ig.AnimationSheet("media/graphics/game/background/decorations.png", 36, 37),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("idle", 1, [0]);
            this.currentAnim = this.anims.idle;
            ig.game.sortEntities()
        },
        update: function() {
            this.parent();
            this.currentAnim.angle += 0.05
        }
    });
    EntityDeco2 = ig.Entity.extend({
        size: {
            x: 36,
            y: 37
        },
        zIndex: 3010,
        gravityFactor: 0,
        animSheet: new ig.AnimationSheet("media/graphics/game/background/decorations.png",
            36, 37),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("idle", 1, [2]);
            this.currentAnim = this.anims.idle;
            ig.game.sortEntities()
        },
        update: function() {
            this.parent();
            this.currentAnim.angle += 0.02
        }
    });
    EntityDeco3 = ig.Entity.extend({
        size: {
            x: 36,
            y: 37
        },
        zIndex: 3010,
        gravityFactor: 0,
        animSheet: new ig.AnimationSheet("media/graphics/game/background/decorations.png", 36, 37),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("idle", 1, [2]);
            this.currentAnim = this.anims.idle;
            ig.game.sortEntities()
        },
        update: function() {
            this.parent();
            this.currentAnim.angle -= 0.05
        }
    });
    EntityDeco4 = ig.Entity.extend({
        size: {
            x: 36,
            y: 37
        },
        zIndex: 3010,
        gravityFactor: 0,
        animSheet: new ig.AnimationSheet("media/graphics/game/background/decorations.png", 36, 37),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("idle", 1, [3]);
            this.currentAnim = this.anims.idle;
            ig.game.sortEntities()
        },
        update: function() {
            this.parent();
            180 < this.pos.x && !this.return ? this.vel.x -= 5 : (this.return = !0) && 190 > this.pos.x ? this.vel.x += 5 : this.return = !1
        }
    });
    EntityDeco5 = ig.Entity.extend({
        size: {
            x: 36,
            y: 37
        },
        zIndex: 3010,
        alpha: 0,
        gravityFactor: 0,
        posX: 0,
        animSheet: new ig.AnimationSheet("media/graphics/game/background/decorations.png", 36, 37),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("idle", 1, [4]);
            this.currentAnim = this.anims.idle;
            ig.game.sortEntities()
        },
        update: function() {
            this.parent();
            this.currentAnim.alpha = this.alpha;
            this.pos.x = this.initPosX + 41 * this.posX;
            0.9 > this.alpha && !this.hidden && 2 > this.posX ? this.alpha += 0.02 : 2 > this.posX && (this.hidden = !0, 0.1 < this.alpha ? this.alpha -= 0.02 : (this.hidden = !1, this.posX +=
                1));
            0.9 > this.alpha && !this.hidden && 1 < this.posX ? this.alpha += 0.02 : 1 < this.posX && (this.hidden = !0, 0.1 < this.alpha ? this.alpha -= 0.02 : (this.hidden = !1, this.posX = 0))
        }
    })
});
ig.baked = !0;
ig.module("game.entities.characters.customBox").requires("impact.entity", "plugins.box2d.entity").defines(function() {
    EntityCustomBox = ig.Box2DEntity.extend({
        zIndex: 900,
        type: ig.Entity.TYPE.B,
        size: {
            x: 10,
            y: 10
        },
        offset: {
            x: 30,
            y: 22
        },
        box2dType: 2,
        dynamicType: 0,
        density: 1,
        friction: 0,
        restitution: 0,
        gravityFactor: 0,
        hidden: !0,
        bodyAngle: 0,
        customAngle: 0,
        vertices: [{
            x: -1,
            y: 0
        }, {
            x: -0.5,
            y: -0.25
        }, {
            x: 0,
            y: -0.5
        }, {
            x: 0.5,
            y: -0.25
        }, {
            x: 1,
            y: 0
        }, {
            x: 0.5,
            y: 0.25
        }, {
            x: 0,
            y: 0.5
        }, {
            x: -0.5,
            y: 0.5
        }],
        wooden: new ig.Image("media/graphics/game/prop/wood.jpeg"),
        ice: new ig.Image("media/graphics/game/characters/ice-small.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.initX = this.pos.x;
            this.initY = this.pos.y;
            this.imgWood = new Image;
            this.imgIce = new Image;
            this.imgWood.src = "media/graphics/game/prop/wood.jpeg";
            this.imgIce.src = "media/graphics/game/characters/ice-small.png";
            1 == this.specialPin && !ig.global.wm && (this.body.SetAwake(!1), this.body.m_angularVelocity = 24);
            ig.global.wm ? this.hidden = !1 : (this.body.SetAngle(this.customAngle), !0 == this.leaf && (this.leafTimer = new ig.Timer,
                this.hidden = !1), this.strength = 1 == this.wood ? 30 : 20, this.leaf || this.checkJoint());
            ig.global.wm && (this.hidden = !1)
        },
        checkJoint: function() {
            var b = ig.game.getEntitiesByType(EntityCustomBox);
            if (!this.revolute && !this.pin)
                for (var c = 0; c < b.length; c++)
                    if (this.joint1 = this, b[c] != this && b[c].pos.x == this.pos.x && b[c].pos.y == this.pos.y) {
                        this.joint2 = b[c];
                        var d = new Box2D.Dynamics.Joints.b2WeldJointDef;
                        d.bodyA = this.joint1.body;
                        d.bodyB = this.joint2.body;
                        d.collideConnected = !1;
                        d.localAnchorA = new Box2D.Common.Math.b2Vec2(0, 0);
                        d.localAnchorB = new Box2D.Common.Math.b2Vec2(0, 0);
                        d.referenceAngle = this.customAngle;
                        this.BoxJoint = ig.world.CreateJoint(d)
                    }
            if (1 == this.revolute)
                for (c = 0; c < b.length; c++) this.joint1 = this, b[c] != this && b[c].pos.x == this.pos.x && b[c].pos.y == this.pos.y && 1 == b[c].pin && (this.joint2 = b[c], d = new Box2D.Dynamics.Joints.b2RevoluteJointDef, d.bodyA = this.joint1.body, d.bodyB = this.joint2.body, d.collideConnected = !1, d.localAnchorA = new Box2D.Common.Math.b2Vec2(0, 0), d.localAnchorB = new Box2D.Common.Math.b2Vec2(0, 0), d.referenceAngle =
                    this.customAngle, this.BoxJoint = ig.world.CreateJoint(d))
        },
        updateVertices: function() {
            if (this.customVertices) {
                for (var b = [], c = this.customVertices.split(" "), d = 0; d < c.length; d++) {
                    var e = c[d].split(",");
                    if (2 === e.length) {
                        var f = parseFloat(e[0]),
                            e = parseFloat(e[1]);
                        b.push({
                            x: f,
                            y: e
                        })
                    }
                }
                3 <= b.length && (this.vertices = b)
            }
        },
        createBody: function() {
            this.updateVertices();
            this.parent()
        },
        check: function(b) {
            if (1 != this.hard)
                if (b && b.body) {
                    if (!0 != this.leaf) {
                        var c = this.body.GetLinearVelocity().Length();
                        b.body.GetLinearVelocity().Length();
                        b instanceof EntityGrenadeChild && 1 != this.wood && 1 != this.hard && !this.leaf ? (this.breakingAnimation = ig.game.spawnEntity(EntityIceBreak, this.pos.x, this.pos.y, {
                            mother: this,
                            bonus: c
                        }), this.kill()) : this.body.GetLinearVelocity().Length() + b.body.GetLinearVelocity().Length() > this.strength && (this.kill(), this.breakingAnimation = 1 == this.wood ? ig.game.spawnEntity(EntityWoodBreak2, this.pos.x, this.pos.y, {
                            mother: this,
                            bonus: c
                        }) : ig.game.spawnEntity(EntityIceBreak, this.pos.x, this.pos.y, {
                            mother: this,
                            bonus: c
                        }))
                    }
                } else !0 != this.leaf &&
                    (c = this.body.GetLinearVelocity().Length(), this.body.GetLinearVelocity().Length() > this.strength && this.currentAnim == this.anims.idle && (this.breakingAnimation = 1 == this.wood ? ig.game.spawnEntity(EntityWoodBreak2, this.pos.x, this.pos.y, {
                        mother: this,
                        bonus: c
                    }) : ig.game.spawnEntity(EntityIceBreak, this.pos.x, this.pos.y, {
                        mother: this,
                        bonus: c
                    }), this.kill()))
        },
        update: function() {
            this.parent();
            this.onOutOFBounds();
            if (!0 == this.leaf) {
                if (this.leafTimer && 0.2 < this.leafTimer.delta()) {
                    var b = Math.random() * (Math.abs(-10) + -40),
                        b = new Box2D.Common.Math.b2Vec2(0, b);
                    this.body.ApplyImpulse(b, this.body.GetPosition());
                    this.leafTimer.reset()
                }
                this.body.m_fixtureList.m_isSensor = !0
            }!1 == this.hidden && !this.appeared && !this.leaf && (this.appeared = ig.game.spawnEntity(EntityGrenadeSmokeSmall, this.pos.x + 10, this.pos.y - 15, {
                mother: this,
                bodySize: 1
            }))
        },
        draw: function() {
            var b = ig.system.context;
            if (!this.killed && (ig.global.wm && (this.customAngle && (this.angle = this.customAngle), this.updateVertices()), !this.hidden)) {
                b.save();
                b.translate(-ig.game.screen.x +
                    this.pos.x + this.size.x / 2, -ig.game.screen.y + this.pos.y + this.size.y / 2);
                b.rotate(this.angle);
                b.beginPath();
                b.moveTo(10 * this.vertices[0].x, 10 * this.vertices[0].y);
                for (var c = 1; c < this.vertices.length; c++) b.lineTo(10 * this.vertices[c].x, 10 * this.vertices[c].y);
                b.closePath();
                var d = this.leaf ? "#CCFF00" : 1 == this.wood ? b.createPattern(this.imgWood, "repeat") : b.createPattern(this.imgIce, "repeat");
                b.fillStyle = d;
                b.fill();
                b.restore();
                if (1 == this.hard) {
                    b.save();
                    b.translate(-ig.game.screen.x + this.pos.x + this.size.x / 2, -ig.game.screen.y +
                        this.pos.y + this.size.y / 2);
                    b.rotate(this.angle);
                    b.beginPath();
                    b.globalAlpha = 0.2;
                    b.moveTo(10 * this.vertices[0].x, 10 * this.vertices[0].y);
                    for (c = 1; c < this.vertices.length; c++) b.lineTo(10 * this.vertices[c].x, 10 * this.vertices[c].y);
                    b.closePath();
                    b.fillStyle = "#000000";
                    b.fill();
                    b.restore()
                }
                if (this.revolute) {
                    this.zIndex = 1E3;
                    b.save();
                    var c = this.pos.x + this.size.x / 2 - ig.game.screen.x,
                        e = this.pos.y + this.size.y / 2 - ig.game.screen.y;
                    b.beginPath();
                    b.arc(c, e, 15, 0, 2 * Math.PI, !1);
                    b.fillStyle = d;
                    b.fill();
                    b.restore()
                }
            }
        },
        kill: function() {
            this.parent()
        },
        onOutOFBounds: function() {
            (0 > this.pos.x + this.size.x || this.pos.x > ig.system.width + 200) && this.kill()
        }
    });
    EntityGrenadeSmokeSmall = ig.Entity.extend({
        zIndex: 1400,
        gravityFactor: 0,
        size: {
            x: 10,
            y: 10
        },
        offset: {
            x: 85,
            y: 40
        },
        ignorePause: !0,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/smoke.png", 100, 81),
        init: function(b, c, d) {
            ig.game.sortEntitiesDeferred();
            this.parent(b, c, d);
            ig.game.playPopSound();
            1 < this.bodySize && (this.pos.x += this.size.x / 2, this.pos.y += this.size.y / 4);
            1 > this.bodySize && (this.pos.x -= this.size.x /
                6, this.pos.y -= this.size.y / 6);
            this.addAnim("idle", 0.05, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
            this.currentAnim = this.anims.idle
        },
        update: function() {
            this.parent();
            this.currentAnim.loopCount && this.kill();
            this.setScale(this.bodySize, this.bodySize);
            ig.game.paused ? this.currentAnim.timer.pause() : this.currentAnim.timer.unpause()
        }
    });
    EntityWoodBreak2 = ig.Entity.extend({
        zIndex: 1250,
        fontSize: 0,
        ignorePause: !0,
        gravityFactor: 0,
        size: {
            x: 36,
            y: 36
        },
        offset: {
            x: 30,
            y: 22
        },
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/woodenBox2.png",
            97, 80),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("explode", 0.05, [9, 10, 11, 12, 13, 14, 15, 16, 17]);
            this.currentAnim = this.anims.explode;
            this.currentAnim.angle = this.mother.angle;
            this.initPosY = this.pos.y;
            ig.game.bonus += Math.floor(this.bonus);
            ig.game.bonusFontSize = 40
        },
        update: function() {
            this.parent();
            this.currentAnim.loopCount && this.kill();
            ig.game.paused ? this.currentAnim.timer.pause() : (this.fontSize += 0.8, this.currentAnim.timer.unpause())
        },
        draw: function() {
            this.parent()
        }
    })
});
ig.baked = !0;
ig.module("game.entities.common.level-setting").requires("impact.entity", "game.entities.characters.customBox").defines(function() {
    EntityLevelSetting = ig.Entity.extend({
        size: {
            x: 100,
            y: 100
        },
        gravityFactor: 0,
        block1: [],
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.world.m_gravity.x = 0;
            this.setBulletAmount()
        },
        update: function() {
            this.parent();
            this.spawnLeaf()
        },
        setBulletAmount: function() {
            var b = ig.game.director.currentLevel;
            2 == b && (this.bulletAmount = [3, 0, 0]);
            3 == b && (this.bulletAmount = [3, 0, 0]);
            4 == b && (this.bulletAmount = [3, 0, 0]);
            5 == b && (this.bulletAmount = [2, 1, 0]);
            6 == b && (this.bulletAmount = [1, 2, 0]);
            7 == b && (this.bulletAmount = [2, 1, 0]);
            8 == b && (this.bulletAmount = [1, 1, 1]);
            9 == b && (this.bulletAmount = [1, 1, 1]);
            10 == b && (this.bulletAmount = [2, 0, 1]);
            11 == b && (this.bulletAmount = [1, 1, 2]);
            12 == b && (this.bulletAmount = [2, 0, 1]);
            13 == b && (this.bulletAmount = [3, 1, 0], ig.world.m_gravity.x = -40);
            14 == b && (this.bulletAmount = [3, 1, 0]);
            15 == b && (this.bulletAmount = [1, 2, 1]);
            16 == b && (this.bulletAmount = [4, 0, 0]);
            17 == b && (this.bulletAmount = [4, 0, 0]);
            18 == b && (this.bulletAmount = [4, 0, 1]);
            19 == b && (this.bulletAmount = [4, 0, 1]);
            20 == b && (this.bulletAmount = [4, 0, 1]);
            21 == b && (this.bulletAmount = [4, 1, 1])
        },
        spawnLeaf: function() {
            if (!0 != ig.game.gameEnd && (0 > ig.world.m_gravity.x || 0 < ig.world.m_gravity.x)) this.leafTimer || (this.leafTimer = new ig.Timer), this.leafTimer && this.leafTimer.delta() > Math.random() * (Math.abs(2) + 4) && (ig.game.spawnEntity(EntityCustomBox, ig.system.width + 20, Math.random() * ig.system.height - 40, {
                mother: this,
                leaf: !0
            }), this.leafTimer.reset())
        }
    })
});
ig.baked = !0;
ig.module("game.entities.buttons.hand").requires("impact.entity").defines(function() {
    EntityHand = ig.Entity.extend({
        size: {
            x: 107,
            y: 109
        },
        zIndex: 2E3,
        gravityFactor: 0,
        ignorePause: !0,
        animSheet: new ig.AnimationSheet("media/graphics/game/prop/cursor.png", 107, 109),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("hold", 0.1, [0]);
            this.addAnim("drag", 0.1, [0]);
            this.addAnim("release", 0.1, [0])
        },
        update: function() {
            this.parent()
        },
        kill: function() {
            this.parent();
            this.mother.hand = null
        },
        drag: function() {
            this.currentAnim =
                this.anims.drag;
            this.tween({
                pos: {
                    x: this.mother.dragPos.x,
                    y: this.mother.dragPos.y
                }
            }, 0.8, {
                onComplete: function() {}.bind(this),
                easing: ig.Tween.Easing.Quartic.EaseOut,
                delay: 0
            }).start()
        },
        hold: function() {
            this.currentAnim = this.anims.hold
        },
        release: function() {
            this.currentAnim = this.anims.release
        }
    })
});
ig.baked = !0;
ig.module("game.entities.common.brain-control").requires("impact.entity", "game.entities.characters.cannon", "game.entities.buttons.btn-replay", "game.entities.buttons.btn-pause", "game.entities.buttons.btn-music", "game.entities.common.finish", "game.entities.common.level-setting", "game.entities.buttons.hand").defines(function() {
    EntityBrainControl = ig.Entity.extend({
        zIndex: 1900,
        size: {
            x: 95,
            y: 96
        },
        gravityFactor: 0,
        bullet: new ig.Image("media/graphics/game/buttons/bullets.png"),
        arrow: new ig.Image("media/graphics/game/prop/arrow.png"),
        maxBulletType: 3,
        bulletType: 1,
        bulletBonus: 1E3,
        emptySpace: [0, 0, 0],
        alpha: 0,
        GameScore: [],
        GameLevel: [],
        GameDone: [],
        NewGameStorage: [],
        ignorePause: !0,
        gameStartLine: 480,
        init: function(b, c, d) {
            this.parent(b, c, d);
            if (!ig.global.wm) {
                this.resetGame();
                this.levelSetting = ig.game.spawnEntity(EntityLevelSetting, 0, 0);
                this.InitLevel();
                ig.game.storage && ig.game.storage.set("BABY-COW-LEVEL :", ig.game.director.currentLevel);
                for (b = 1; b <= this.maxBulletType; b++) 0 == this.bulletAmount[0] && 0 == this.bulletAmount[1] ? this.emptySpace[2] =
                    150 : 0 < this.bulletAmount[0] && 0 == this.bulletAmount[1] ? this.emptySpace[2] = 75 : 0 == this.bulletAmount[0] && (this.emptySpace[1] = 75, this.emptySpace[2] = 75);
                this.pointer = ig.game.spawnEntity(EntityPointer, this.pos.x, this.pos.y);
                this.setupListener();
                this.cannon = ig.game.spawnEntity(EntityCannon, 70, 350, {
                    mother: this
                });
                this.btnreplay = ig.game.spawnEntity(EntityBtnReplay, ig.system.width - 150, 10, {
                    mother: this
                });
                this.btnPause = ig.game.spawnEntity(EntityBtnPause, ig.system.width - 80, 10, {
                    mother: this
                });
                this.btnMusic = ig.game.spawnEntity(EntityBtnMusic,
                    20, 10, {
                        mother: this
                    })
            }
        },
        InitLevel: function() {
            this.bulletAmount = this.levelSetting.bulletAmount;
            for (var b = this.bulletAmount.length - 1; 0 <= b; b--) 0 < this.bulletAmount[b] && (this.bulletType = b + 1)
        },
        resetGame: function() {
            ig.game.blockCharge = !1;
            ig.game.bonus = 0;
            ig.game.gameStart = !1;
            pointedButton = null;
            ig.game.tutorial = !1;
            ig.game.tutorialStage = 1;
            ig.game.disableChangeGrenade = !1;
            if (ig.game.storage) {
                this.GameStorage = ig.game.storage.get("BABY-COW-STORAGE :");
                for (var b = 0; b < ig.game.director.levels.length - 3; b++) this.GameLevel[b] =
                    this.GameStorage[b].Level, this.GameScore[b] = this.GameStorage[b].Score, this.GameDone[b] = this.GameStorage[b].Completed, this.GameDone[ig.game.director.currentLevel - 2] = !0, this.NewGameStorage.push({
                        Level: this.GameLevel[b],
                        Score: this.GameScore[b],
                        Completed: this.GameDone[b]
                    }), ig.game.storage && ig.game.storage.set("BABY-COW-STORAGE :", this.NewGameStorage)
            }
        },
        setupListener: function() {
            var b = new Box2D.Dynamics.b2ContactListener;
            b.entities = ig.game.entities;
            b.BeginContact = function(b) {
                b.IsTouching() && (b.m_fixtureA.m_body.m_userData ?
                    b.m_fixtureA.m_body.m_userData.check(b.m_fixtureB.m_body.m_userData, b) : b.m_fixtureB.m_body.m_userData && b.m_fixtureB.m_body.m_userData.check(b.m_fixtureA.m_body.m_userData, b))
            };
            ig.world.SetContactListener(b)
        },
        update: function() {
            this.parent();
            this.pointer.update();
            ig.game.gameStart || this.gameStart();
            this.gameEnd()
        },
        gameStart: function() {
            0 < this.gameStartLine ? this.gameStartLine -= 6 : ig.game.tutorial || (ig.game.gameStart = !0);
            for (var b = ig.game.getEntitiesByType(EntityCustomBox), c = 0; c < b.length; c++) b[c].pos.y >
                this.gameStartLine && (b[c].hidden = !1);
            b = ig.game.getEntitiesByType(EntityWoodenBox);
            for (c = 0; c < b.length; c++) b[c].pos.y > this.gameStartLine && (b[c].hidden = !1);
            b = ig.game.getEntitiesByType(EntityIce);
            for (c = 0; c < b.length; c++) b[c].pos.y > this.gameStartLine && (b[c].hidden = !1);
            b = ig.game.getEntitiesByType(EntityRock);
            for (c = 0; c < b.length; c++) b[c].pos.y > this.gameStartLine && (b[c].hidden = !1);
            b = ig.game.getEntitiesByType(EntityRoller);
            for (c = 0; c < b.length; c++) b[c].pos.y > this.gameStartLine && (b[c].hidden = !1);
            b = ig.game.getEntitiesByType(EntityFarmer);
            for (c = 0; c < b.length; c++) b[c].pos.y > this.gameStartLine && (b[c].hidden = !1)
        },
        gameEnd: function() {
            if (0 == ig.game.getEntitiesByType(EntityFarmer).length) {
                if (!0 == ig.game.tutorial && 2 == ig.game.director.currentLevel) {
                    ig.game.tutorialStage = 5;
                    return
                }
                0 == ig.game.getEntitiesByType(EntityGrenade).length && 0 == ig.game.getEntitiesByType(EntityGrenadeChild).length && 0 == ig.game.getEntitiesByType(EntityGrenadeBoom).length && (!this.endGameTimer && !ig.game.paused && (ig.game.gameEnd = !0, this.endGameTimer = new ig.Timer), this.endGameTimer &&
                    0.5 < this.endGameTimer.delta() && (0 < this.bulletAmount[2] ? (this.bulletAmount[2] -= 1, ig.game.bonus += this.bulletBonus, ig.game.bonusFontSize = 40, this.endGameTimer.reset()) : 0 < this.bulletAmount[1] ? (this.bulletAmount[1] -= 1, ig.game.bonus += this.bulletBonus, ig.game.bonusFontSize = 40, this.endGameTimer.reset()) : 0 < this.bulletAmount[0] && (this.bulletAmount[0] -= 1, ig.game.bonus += this.bulletBonus, ig.game.bonusFontSize = 40, this.endGameTimer.reset()), 0 == this.bulletAmount[0] && 0 == this.bulletAmount[1] && 0 == this.bulletAmount[2] &&
                        (this.win = this.gameEnded = !0)))
            } else 0 == this.bulletAmount[0] && 0 == this.bulletAmount[1] && 0 == this.bulletAmount[2] && 0 == ig.game.getEntitiesByType(EntityGrenade).length && (0 == ig.game.getEntitiesByType(EntityGrenadeChild).length && 0 == ig.game.getEntitiesByType(EntityGrenadeBoom).length) && (this.gameEnded = !0, ig.game.gameEnd = !0, this.win = !1);
            !0 == ig.game.gameEnd && !this.displayGameEnd && !0 == this.gameEnded && (this.displayGameEnd = ig.game.spawnEntity(EntityFinish, 0, -480, {
                win: this.win
            }))
        },
        draw: function() {
            this.parent();
            var b = ig.system.context;
            b.save();
            if (!ig.global.wm) {
                for (var c = 1; c <= this.maxBulletType; c++) {
                    if (0 < this.bulletAmount[c - 1]) {
                        0 == this.bulletAmount[0] && 0 == this.bulletAmount[1] ? 150 > this.emptySpace[2] && (this.emptySpace[2] += 15) : 0 < this.bulletAmount[0] && 0 == this.bulletAmount[1] ? 75 > this.emptySpace[2] && (this.emptySpace[2] += 15) : 0 == this.bulletAmount[0] && 75 > this.emptySpace[2] && (this.emptySpace[1] += 15, this.emptySpace[2] += 15);
                        b.drawImage(this.bullet.data, 0, 47 * (c - 1), this.bullet.width, this.bullet.height / 3, 55 + 75 * c - this.emptySpace[c -
                            1], ig.system.height - 60, this.bullet.width, this.bullet.height / 3);
                        b.save();
                        ig.system.context.font = "28px hole";
                        ig.system.context.fillStyle = "#ffffff";
                        ig.system.context.textAlign = "center";
                        var d = 115 + 75 * c - this.emptySpace[c - 1];
                        ig.system.context.fillText(this.bulletAmount[c - 1], d, ig.system.height - 25);
                        b.restore()
                    }
                    if (!ig.global.wm)
                        if (this.pointer.pos.x + 20 >= 55 + 75 * c - this.emptySpace[c - 1] && this.pointer.pos.x <= 75 * c + 102 - this.emptySpace[c - 1] && this.pointer.pos.y + 20 >= ig.system.height - 60 && this.pointer.pos.y <= ig.system.height -
                            60 + 47) {
                            if (ig.game.pointedButton = c, ig.input.released("click") && !ig.game.disableChangeGrenade && 0 < this.bulletAmount[c - 1]) {
                                this.cannon.bulletSize = 0;
                                0 < ig.game.getEntitiesByType(EntityGrenade).length && ig.game.getEntitiesByType(EntityGrenade)[0].explode();
                                0 < ig.game.getEntitiesByType(EntityGrenadeBoom).length && ig.game.getEntitiesByType(EntityGrenadeBoom)[0].explode();
                                if (0 < ig.game.getEntitiesByType(EntityGrenadeChild).length)
                                    for (c = ig.game.getEntitiesByType(EntityGrenadeChild).length - 1; 0 <= c; c--) ig.game.getEntitiesByType(EntityGrenadeChild)[c].explode();
                                this.bulletType = c
                            }
                        } else ig.game.pointedButton == c && (ig.game.pointedButton = null)
                }
                b.restore();
                b = ig.system.context;
                b.save();
                ig.game.bonusFontSize = 25 < ig.game.bonusFontSize ? ig.game.bonusFontSize - 1 : 25;
                ig.system.context.font = ig.game.bonusFontSize + "px hole";
                ig.system.context.fillStyle = "#ffffff";
                ig.system.context.textAlign = "center";
                d = ig.system.width / 2;
                ig.system.context.fillText(ig.game.bonus, d, 25);
                b.restore();
                ig.game.paused ? (ig.game.sortEntities(), 0.5 > this.alpha && (this.alpha += 0.05), b.save(), ig.system.context.globalAlpha =
                    this.alpha, b.fillStyle = "#584D3C", b.fillRect(0, 0, ig.system.width, ig.system.height), b.restore()) : 0 != this.alpha && (this.alpha = 0);
                ig.game.gameStart && this.GamesTutorial(b)
            }
        },
        GamesTutorial: function(b) {
            if (2 == ig.game.director.currentLevel || 3 == ig.game.director.currentLevel || 5 == ig.game.director.currentLevel || 8 == ig.game.director.currentLevel)!ig.game.tutorial && !this.tutorialDone ? ig.game.tutorial = !0 : this.tutorialDone && (ig.game.tutorial = !1, ig.game.tutorialStage = 1), 2 == ig.game.director.currentLevel && ig.game.tutorial &&
                !ig.game.paused && this.tutorial1(b), 3 == ig.game.director.currentLevel && ig.game.tutorial && this.tutorial2(b), (5 == ig.game.director.currentLevel && ig.game.tutorial || 8 == ig.game.director.currentLevel && ig.game.tutorial) && this.tutorial3(b)
        },
        tutorial1: function(b) {
            this.string = _STRINGS.tutorial.level1[ig.game.tutorialStage - 1].string;
            if (1 == ig.game.tutorialStage) {
                ig.game.allowCannonFire = !1;
                b.save();
                ig.system.context.font = "35px hole";
                ig.system.context.fillStyle = "#ffffff";
                ig.system.context.textAlign = "center";
                var c =
                    ig.system.width / 2,
                    d = ig.system.height / 2;
                ig.system.context.fillText("Tap to continue", c, d);
                b.restore();
                ig.input.released("click") && (ig.game.tutorialStage = 2)
            }
            2 == ig.game.tutorialStage && (ig.game.assignedPosX = ig.system.width / 2, ig.game.assignedPosY = ig.system.height / 3, this.hand || (this.hand = ig.game.spawnEntity(EntityHand, ig.game.assignedPosX, ig.game.assignedPosY, {
                    mother: this
                }), this.hand.hold()), ig.input.state("click") && this.pointer.pos.x >= ig.game.assignedPosX && this.pointer.pos.y >= ig.game.assignedPosY && this.pointer.pos.x <=
                ig.game.assignedPosX + this.hand.size.x && this.pointer.pos.y <= ig.game.assignedPosY + this.hand.size.y ? (ig.game.allowCannonFire = !0, this.hand.kill(), ig.game.tutorialStage = 3) : ig.game.allowCannonFire = !1);
            3 == ig.game.tutorialStage && (this.dragPos = {
                    x: ig.game.assignedPosX - 50,
                    y: ig.game.assignedPosY + 110
                }, this.hand || (this.hand = ig.game.spawnEntity(EntityHand, ig.game.assignedPosX, ig.game.assignedPosY, {
                    mother: this
                }), this.hand.drag()), this.pointer.pos.x >= this.dragPos.x && this.pointer.pos.y >= this.dragPos.y && this.pointer.pos.x <=
                this.hand.pos.x + this.hand.size.x && this.pointer.pos.y <= this.hand.pos.y + this.hand.size.y ? (this.string = _STRINGS.tutorial.level1[3].string, 40 > this.cannon.powerRate && (this.cannon.chargingSpeed = 0), ig.game.allowCannonFire = !0, this.hand.release(), ig.input.released("click") && (this.hand.kill(), ig.game.tutorialStage = 4)) : ig.input.released("click") ? (this.hand.kill(), ig.game.tutorialStage = 2) : (this.cannon.chargingSpeed = 3, ig.game.allowCannonFire = !1, this.hand.drag()));
            4 == ig.game.tutorialStage && (this.string = "");
            5 ==
                ig.game.tutorialStage && (ig.input.pressed("click") && (this.tutorialDone = !0), b.save(), ig.system.context.font = "35px hole", ig.system.context.fillStyle = "#ffffff", ig.system.context.textAlign = "center", ig.system.context.fillText("Your current score", 200, 140), b.restore(), b.save(), ig.system.context.font = "35px hole", ig.system.context.fillStyle = "#ffffff", ig.system.context.textAlign = "center", ig.system.context.fillText("Number of cows left", 300, 320), b.restore(), b.save(), ig.system.context.font = "35px hole", ig.system.context.fillStyle =
                    "#ffffff", ig.system.context.textAlign = "center", ig.system.context.fillText("Touch to continue", ig.system.width / 2, ig.system.height / 2), b.restore(), b.save(), b.translate(250, 330), b.rotate(1.8), this.arrow.draw(0, 0), b.restore(), b.save(), b.translate(240, 100), b.rotate(-0.8), this.arrow.draw(0, 0), b.restore());
            b.save();
            ig.system.context.font = "35px hole";
            ig.system.context.fillStyle = "#ffffff";
            ig.system.context.textAlign = "center";
            c = ig.system.width / 2;
            d = ig.system.height / 4;
            ig.system.context.fillText(this.string, c,
                d);
            b.restore()
        },
        tutorial2: function(b) {
            this.string = _STRINGS.tutorial.level2[ig.game.tutorialStage - 1].string;
            1 == ig.game.tutorialStage && (ig.game.blockCharge = !0, ig.game.tutorialPowerUpsStopped = !0, ig.game.assignedPosX = ig.system.width / 1.7, ig.game.assignedPosY = ig.system.height / 1.7, this.hand || (this.hand = ig.game.spawnEntity(EntityHand, ig.game.assignedPosX, ig.game.assignedPosY, {
                    mother: this
                }), this.hand.hold()), this.pointer.pos.x >= ig.game.assignedPosX && this.pointer.pos.y >= ig.game.assignedPosY && this.pointer.pos.x <=
                ig.game.assignedPosX + this.hand.size.x && this.pointer.pos.y <= ig.game.assignedPosY + this.hand.size.y ? (ig.game.allowCannonFire = !0, ig.input.released("click") && (this.hand.kill(), ig.game.tutorialStage = 2)) : ig.game.allowCannonFire = !1);
            2 == ig.game.tutorialStage && 0 < ig.game.getEntitiesByType(EntityGrenade).length && ig.game.getEntitiesByType(EntityGrenade)[0].pos.x > ig.system.width / 3 && (ig.game.paused || (ig.game.paused = !ig.game.paused), ig.game.tutorialPowerUpsStopped = !1, ig.game.tutorialStage = 3);
            3 == ig.game.tutorialStage &&
                (this.hand || (this.hand = ig.game.spawnEntity(EntityHand, ig.game.assignedPosX - 50, ig.game.assignedPosY - 100, {
                    mother: this,
                    zIndex: 2E3
                }), this.hand.hold()), ig.input.pressed("click") && (ig.game.paused && (ig.game.paused = !ig.game.paused), this.hand.kill(), this.tutorialDone = !0, ig.game.getEntitiesByType(EntityGrenade)[0].powerUps()));
            b.save();
            ig.system.context.font = "35px hole";
            ig.system.context.fillStyle = "#ffffff";
            ig.system.context.textAlign = "center";
            ig.system.context.fillText(this.string, ig.system.width / 2, ig.system.height /
                4);
            b.restore()
        },
        tutorial3: function(b) {
            this.string = 5 == ig.game.director.currentLevel ? _STRINGS.tutorial.level4[ig.game.tutorialStage - 1].string : _STRINGS.tutorial.level7[ig.game.tutorialStage - 1].string;
            1 == ig.game.tutorialStage && (ig.game.tutorialPowerUpsStopped = !0, ig.game.assignedPosX = 5 == ig.game.director.currentLevel ? 173 : 250, ig.game.assignedPosY = ig.system.height - 90, this.hand || (this.hand = ig.game.spawnEntity(EntityHand, ig.game.assignedPosX, ig.game.assignedPosY, {
                    mother: this
                }), this.hand.hold()), this.pointer.pos.x >=
                ig.game.assignedPosX + this.hand.size.x / 4 && this.pointer.pos.y >= ig.game.assignedPosY + this.hand.size.y / 4 && this.pointer.pos.x <= ig.game.assignedPosX + this.hand.size.x / 1.5 && this.pointer.pos.y <= ig.game.assignedPosY + this.hand.size.y / 1.5 ? ig.input.released("click") && (this.hand.kill(), ig.game.tutorialStage = 2, ig.game.disableChangeGrenade = !0) : ig.game.allowCannonFire = !1);
            2 == ig.game.tutorialStage && (5 == ig.game.director.currentLevel ? (ig.game.assignedPosX = ig.system.width / 1.7, ig.game.assignedPosY = ig.system.height / 2) :
                (ig.game.assignedPosX = ig.system.width / 4, ig.game.assignedPosY = ig.system.height / 4), this.hand || (this.hand = ig.game.spawnEntity(EntityHand, ig.game.assignedPosX, ig.game.assignedPosY, {
                    mother: this
                }), this.hand.hold()), this.pointer.pos.x >= ig.game.assignedPosX && this.pointer.pos.y >= ig.game.assignedPosY && this.pointer.pos.x <= ig.game.assignedPosX + this.hand.size.x && this.pointer.pos.y <= ig.game.assignedPosY + this.hand.size.y ? (ig.game.allowCannonFire = !0, ig.input.released("click") && (this.hand.kill(), ig.game.tutorialStage =
                    3)) : ig.game.allowCannonFire = !1);
            3 == ig.game.tutorialStage && 0 < ig.game.getEntitiesByType(EntityGrenade).length && ig.game.getEntitiesByType(EntityGrenade)[0].pos.x > ig.system.width / 2.4 && (ig.game.paused || (ig.game.paused = !ig.game.paused), ig.game.tutorialPowerUpsStopped = !1, ig.game.tutorialStage = 4);
            4 == ig.game.tutorialStage && (this.hand || (this.hand = ig.game.spawnEntity(EntityHand, ig.system.width / 2, ig.system.height / 2, {
                mother: this,
                zIndex: 2E3
            }), this.hand.hold()), ig.input.pressed("click") && (ig.game.paused && (ig.game.paused = !ig.game.paused), this.hand.kill(), this.tutorialDone = !0, ig.game.getEntitiesByType(EntityGrenade)[0].powerUps()));
            b.save();
            ig.system.context.font = "35px hole";
            ig.system.context.fillStyle = "#ffffff";
            ig.system.context.textAlign = "center";
            ig.system.context.fillText(this.string, ig.system.width / 2, ig.system.height / 4);
            b.restore()
        }
    })
});
ig.baked = !0;
ig.module("game.levels.level1").requires("impact.image", "game.entities.characters.farmer", "game.entities.common.brain-control").defines(function() {
    LevelLevel1 = {
        entities: [{
            type: "EntityFarmer",
            x: 453,
            y: 339
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162,
                    163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180
                ],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285,
                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300
                ]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1
                ]
            ]
        }]
    };
    LevelLevel1Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.entities.characters.woodenBox").requires("impact.entity", "plugins.box2d.entity").defines(function() {
    EntityWoodenBox = ig.Box2DEntity.extend({
        zIndex: 1250,
        type: ig.Entity.TYPE.B,
        size: {
            x: 36,
            y: 36
        },
        offset: {
            x: 30,
            y: 22
        },
        box2dType: 0,
        dynamicType: 0,
        density: 4,
        friction: 0,
        restitution: 0,
        hidden: !0,
        type: 1,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/woodenBox.png", 97, 80),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("empty", 0, [100]);
            this.addAnim("idle", 1, [0]);
            this.addAnim("explode",
                0.05, [9, 10, 11, 12, 13, 14, 15, 16, 17]);
            this.currentAnim = this.anims.empty;
            ig.global.wm && (this.currentAnim = this.anims.idle)
        },
        check: function(b) {
            if (b && b.body) {
                var c = this.body.GetLinearVelocity().Length(),
                    d = b.body.GetLinearVelocity().Length();
                b instanceof EntityGrenadeBoom ? this.currentAnim == this.anims.idle && (this.breakingAnimation = ig.game.spawnEntity(EntityWoodBreak, this.pos.x, this.pos.y, {
                        mother: this,
                        bonus: c + d
                    }), this.kill()) : 40 < this.body.GetLinearVelocity().Length() + b.body.GetLinearVelocity().Length() && this.currentAnim ==
                    this.anims.idle && (this.breakingAnimation = ig.game.spawnEntity(EntityWoodBreak, this.pos.x, this.pos.y, {
                        mother: this,
                        bonus: c + d
                    }), this.kill())
            } else c = this.body.GetLinearVelocity().Length(), 30 < this.body.GetLinearVelocity().Length() && this.currentAnim == this.anims.idle && (this.breakingAnimation = ig.game.spawnEntity(EntityWoodBreak, this.pos.x, this.pos.y, {
                mother: this,
                bonus: c
            }), this.kill())
        },
        update: function() {
            this.parent();
            this.checkIfKilling();
            !1 == this.hidden && !this.appeared && (ig.game.spawnEntity(EntityGrenadeSmokeSmall,
                this.pos.x + this.size.x / 2 + 10, this.pos.y - 5, {
                    mother: this,
                    bodySize: 1
                }), this.currentAnim = this.anims.idle, this.appeared = !0)
        },
        kill: function() {
            this.parent()
        },
        checkIfKilling: function() {
            this.killing && (this.body.m_fixtureList.m_isSensor = !0);
            this.currentAnim == this.anims.explode && this.currentAnim.loopCount && this.kill()
        }
    });
    EntityWoodBreak = ig.Entity.extend({
        zIndex: 1250,
        fontSize: 0,
        ignorePause: !0,
        gravityFactor: 0,
        size: {
            x: 36,
            y: 36
        },
        offset: {
            x: 30,
            y: 22
        },
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/woodenBox.png",
            97, 80),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("explode", 0.05, [9, 10, 11, 12, 13, 14, 15, 16, 17]);
            this.currentAnim = this.anims.explode;
            this.currentAnim.angle = this.mother.angle;
            try {
                ig.soundHandler.playSound(ig.soundHandler.SOUNDID.wood)
            } catch (e) {
                console.log(e)
            }
            this.initPosY = this.pos.y;
            ig.game.bonus += Math.floor(this.bonus);
            ig.game.bonusFontSize = 40
        },
        update: function() {
            this.parent();
            this.currentAnim.loopCount && this.kill();
            ig.game.paused ? this.currentAnim.timer.pause() : (this.fontSize += 0.8, this.currentAnim.timer.unpause())
        },
        draw: function() {
            this.parent()
        }
    })
});
ig.baked = !0;
ig.module("game.levels.level2").requires("impact.image", "game.entities.common.brain-control", "game.entities.characters.farmer", "game.entities.characters.woodenBox").defines(function() {
    LevelLevel2 = {
        entities: [{
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }, {
            type: "EntityFarmer",
            x: 529,
            y: 339
        }, {
            type: "EntityWoodenBox",
            x: 442,
            y: 366
        }, {
            type: "EntityWoodenBox",
            x: 442,
            y: 330
        }, {
            type: "EntityWoodenBox",
            x: 442,
            y: 294
        }, {
            type: "EntityWoodenBox",
            x: 442,
            y: 258
        }, {
            type: "EntityWoodenBox",
            x: 442,
            y: 222
        }, {
            type: "EntityWoodenBox",
            x: 442,
            y: 186
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105,
                    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120
                ],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228,
                    229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240
                ],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel2Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level3").requires("impact.image", "game.entities.characters.farmer", "game.entities.characters.woodenBox", "game.entities.common.brain-control").defines(function() {
    LevelLevel3 = {
        entities: [{
            type: "EntityFarmer",
            x: 393,
            y: 339
        }, {
            type: "EntityWoodenBox",
            x: 494,
            y: 286
        }, {
            type: "EntityWoodenBox",
            x: 494,
            y: 250
        }, {
            type: "EntityWoodenBox",
            x: 494,
            y: 214
        }, {
            type: "EntityWoodenBox",
            x: 494,
            y: 178
        }, {
            type: "EntityWoodenBox",
            x: 494,
            y: 142
        }, {
            type: "EntityWoodenBox",
            x: 494,
            y: 106
        }, {
            type: "EntityWoodenBox",
            x: 494,
            y: 70
        }, {
            type: "EntityFarmer",
            x: 581,
            y: 339
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82,
                    83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100
                ],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209,
                    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220
                ],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 113, 113, 113, 295, 296, 297, 298, 299, 113]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel3Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.entities.characters.ice").requires("impact.entity", "plugins.box2d.entity").defines(function() {
    EntityIce = ig.Box2DEntity.extend({
        zIndex: 1250,
        type: ig.Entity.TYPE.B,
        checkAgainst: ig.Entity.TYPE.A,
        size: {
            x: 36,
            y: 35
        },
        offset: {
            x: 40,
            y: 30
        },
        box2dType: 0,
        dynamicType: 0,
        density: 0.5,
        friction: 0.7,
        restitution: 0,
        type: 1,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/ice.png", 115, 94),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("empty", 0, [100]);
            this.addAnim("idle", 1, [0]);
            this.currentAnim =
                this.anims.empty;
            ig.global.wm && (this.currentAnim = this.anims.idle)
        },
        update: function() {
            this.parent();
            this.checkIfKilling();
            !1 == this.hidden && !this.appeared && (ig.game.spawnEntity(EntityGrenadeSmokeSmall, this.pos.x + this.size.x / 2 + 10, this.pos.y - 5, {
                mother: this,
                bodySize: 1
            }), this.currentAnim = this.anims.idle, this.appeared = !0)
        },
        check: function(b) {
            if (b && b.body) {
                var c = this.body.GetLinearVelocity().Length(),
                    d = b.body.GetLinearVelocity().Length();
                b instanceof EntityGrenadeChild ? (this.breakingAnimation = ig.game.spawnEntity(EntityIceBreak,
                    this.pos.x, this.pos.y, {
                        mother: this,
                        bonus: c + d
                    }), this.kill()) : b instanceof EntityGrenadeBoom ? (this.breakingAnimation = ig.game.spawnEntity(EntityIceBreak, this.pos.x, this.pos.y, {
                    mother: this,
                    bonus: c + d
                }), this.kill()) : 30 < this.body.GetLinearVelocity().Length() + b.body.GetLinearVelocity().Length() && (this.breakingAnimation = ig.game.spawnEntity(EntityIceBreak, this.pos.x, this.pos.y, {
                    mother: this,
                    bonus: c + d
                }), this.kill())
            } else c = this.body.GetLinearVelocity().Length(), 20 < this.body.GetLinearVelocity().Length() && this.currentAnim ==
                this.anims.idle && (this.breakingAnimation = ig.game.spawnEntity(EntityIceBreak, this.pos.x, this.pos.y, {
                    mother: this,
                    bonus: c
                }), this.kill())
        },
        kill: function() {
            this.parent()
        },
        checkIfKilling: function() {
            this.killing && (this.body.m_fixtureList.m_isSensor = !0);
            this.currentAnim == this.anims.explode && this.currentAnim.loopCount && this.kill()
        },
        checkOnTouch: function() {
            this.body.GetContactList() && this.body.GetContactList().contact.IsTouching() && (10 < this.body.GetLinearVelocity().Length() && this.currentAnim == this.anims.idle &&
                (this.body.m_fixtureList.m_isSensor = !0, this.currentAnim = this.anims.explode.rewind()), 0.3 > this.body.GetLinearVelocity().Length() && (ig.global.wm || this.body.SetAwake(!1)))
        }
    });
    EntityIceBreak = ig.Entity.extend({
        zIndex: 1250,
        size: {
            x: 36,
            y: 36
        },
        offset: {
            x: 40,
            y: 30
        },
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/ice.png", 115, 94),
        fontSize: 0,
        gravityFactor: 0,
        ignorePause: !0,
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("explode", 0.05, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);
            this.currentAnim = this.anims.explode;
            this.currentAnim.angle = this.mother.angle;
            try {
                ig.soundHandler.playSound(ig.soundHandler.SOUNDID.glass)
            } catch (e) {
                console.log(e)
            }
            this.initPosY = this.pos.y;
            ig.game.bonus += Math.floor(this.bonus);
            ig.game.bonusFontSize = 40
        },
        update: function() {
            this.parent();
            this.currentAnim.loopCount && this.kill();
            ig.game.paused ? this.currentAnim.timer.pause() : (this.fontSize += 0.8, this.currentAnim.timer.unpause())
        },
        draw: function() {
            this.parent()
        }
    })
});
ig.baked = !0;
ig.module("game.levels.level4").requires("impact.image", "game.entities.characters.ice", "game.entities.characters.farmer", "game.entities.common.brain-control").defines(function() {
    LevelLevel4 = {
        entities: [{
            type: "EntityIce",
            x: 524,
            y: 294
        }, {
            type: "EntityIce",
            x: 376,
            y: 330
        }, {
            type: "EntityIce",
            x: 412,
            y: 330
        }, {
            type: "EntityIce",
            x: 496,
            y: 366
        }, {
            type: "EntityIce",
            x: 488,
            y: 330
        }, {
            type: "EntityIce",
            x: 524,
            y: 330
        }, {
            type: "EntityIce",
            x: 404,
            y: 366
        }, {
            type: "EntityIce",
            x: 532,
            y: 366
        }, {
            type: "EntityIce",
            x: 452,
            y: 306
        }, {
            type: "EntityFarmer",
            x: 453,
            y: 339
        }, {
            type: "EntityIce",
            x: 416,
            y: 294
        }, {
            type: "EntityIce",
            x: 364,
            y: 366
        }, {
            type: "EntityIce",
            x: 380,
            y: 294
        }, {
            type: "EntityIce",
            x: 568,
            y: 366
        }, {
            type: "EntityIce",
            x: 560,
            y: 330
        }, {
            type: "EntityIce",
            x: 452,
            y: 270
        }, {
            type: "EntityIce",
            x: 416,
            y: 258
        }, {
            type: "EntityIce",
            x: 452,
            y: 234
        }, {
            type: "EntityIce",
            x: 524,
            y: 258
        }, {
            type: "EntityIce",
            x: 560,
            y: 294
        }, {
            type: "EntityIce",
            x: 312,
            y: 366
        }, {
            type: "EntityIce",
            x: 488,
            y: 294
        }, {
            type: "EntityIce",
            x: 488,
            y: 258
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
                    116, 117, 118, 119, 120
                ],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
                    239, 240
                ],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 0,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel4Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.entities.characters.rock").requires("impact.entity", "plugins.box2d.entity").defines(function() {
    EntityRock = ig.Box2DEntity.extend({
        zIndex: 1250,
        type: ig.Entity.TYPE.B,
        checkAgainst: ig.Entity.TYPE.A,
        size: {
            x: 45,
            y: 47
        },
        offset: {
            x: 26,
            y: 20
        },
        box2dType: 0,
        dynamicType: 0,
        density: 200,
        friction: 40,
        restitution: 0,
        type: 1,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/rock.png", 96, 88),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("empty", 0, [100]);
            this.addAnim("idle", 1, [0]);
            this.currentAnim =
                this.anims.empty;
            ig.global.wm && (this.hidden = !1);
            this.body && this.body.ShouldCollide(!1);
            ig.global.wm ? this.currentAnim = this.anims.idle : this.body.m_mass = 50
        },
        update: function() {
            this.parent();
            this.body.m_fixtureList.m_isSensor = !1;
            this.checkTouching();
            !1 == this.hidden && !this.appeared && (ig.game.spawnEntity(EntityGrenadeSmokeSmall, this.pos.x + this.size.x / 2 + 10, this.pos.y - 5, {
                mother: this,
                bodySize: 1
            }), this.currentAnim = this.anims.idle, this.appeared = !0)
        },
        kill: function() {
            this.parent();
            for (var b = 0; b < ig.game.getEntitiesByType(EntityRock).length; b++) ig.game.getEntitiesByType(EntityRock)[b].body.SetAwake(!0)
        },
        check: function(b) {
            if (b && b.body) {
                var c = this.body.GetLinearVelocity().Length(),
                    d = b.body.GetLinearVelocity().Length();
                b instanceof EntityRock && !0 == b.body.IsAwake() && b.body.SetAwake(!0);
                b instanceof EntityGrenadeBoom && 20 < c + d && (this.body.SetAwake(!0), this.smashed || (this.smashed = ig.game.spawnEntity(EntityRockBreak, this.pos.x, this.pos.y, {
                    mother: this,
                    bonus: c + d
                })), this.kill())
            }
        },
        checkTouching: function() {}
    });
    EntityRockBreak = ig.Entity.extend({
        zIndex: 1250,
        fontSize: 0,
        ignorePause: !0,
        gravityFactor: 0,
        size: {
            x: 45,
            y: 47
        },
        offset: {
            x: 26,
            y: 20
        },
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/rock.png", 96, 88),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("explode", 0.03, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);
            this.currentAnim = this.anims.explode;
            this.currentAnim.angle = this.mother.currentAnim.angle;
            try {
                ig.soundHandler.playSound(ig.soundHandler.SOUNDID.rock)
            } catch (e) {
                console.log(e)
            }
            this.initPosY = this.pos.y;
            ig.game.bonus += Math.floor(this.bonus);
            ig.game.bonusFontSize = 40
        },
        update: function() {
            this.parent();
            this.currentAnim.loopCount && this.kill();
            ig.game.paused ? this.currentAnim.timer.pause() : (this.fontSize += 0.8, this.currentAnim.timer.unpause())
        },
        draw: function() {
            this.parent()
        }
    })
});
ig.baked = !0;
ig.module("game.levels.level5").requires("impact.image", "game.entities.characters.rock", "game.entities.characters.ice", "game.entities.characters.farmer", "game.entities.common.brain-control").defines(function() {
    LevelLevel5 = {
        entities: [{
            type: "EntityRock",
            x: 206,
            y: 352
        }, {
            type: "EntityIce",
            x: 348,
            y: 294
        }, {
            type: "EntityFarmer",
            x: 421,
            y: 387
        }, {
            type: "EntityIce",
            x: 500,
            y: 330
        }, {
            type: "EntityIce",
            x: 428,
            y: 318
        }, {
            type: "EntityIce",
            x: 312,
            y: 294
        }, {
            type: "EntityIce",
            x: 464,
            y: 290
        }, {
            type: "EntityRock",
            x: 206,
            y: 256
        }, {
            type: "EntityIce",
            x: 308,
            y: 366
        }, {
            type: "EntityRock",
            x: 206,
            y: 208
        }, {
            type: "EntityIce",
            x: 348,
            y: 330
        }, {
            type: "EntityRock",
            x: 206,
            y: 160
        }, {
            type: "EntityIce",
            x: 428,
            y: 282
        }, {
            type: "EntityIce",
            x: 272,
            y: 366
        }, {
            type: "EntityIce",
            x: 536,
            y: 330
        }, {
            type: "EntityIce",
            x: 536,
            y: 294
        }, {
            type: "EntityIce",
            x: 464,
            y: 254
        }, {
            type: "EntityIce",
            x: 388,
            y: 254
        }, {
            type: "EntityIce",
            x: 368,
            y: 398
        }, {
            type: "EntityIce",
            x: 352,
            y: 258
        }, {
            type: "EntityIce",
            x: 464,
            y: 326
        }, {
            type: "EntityIce",
            x: 500,
            y: 294
        }, {
            type: "EntityIce",
            x: 460,
            y: 398
        }, {
            type: "EntityIce",
            x: 504,
            y: 258
        }, {
            type: "EntityIce",
            x: 532,
            y: 366
        }, {
            type: "EntityIce",
            x: 424,
            y: 246
        }, {
            type: "EntityIce",
            x: 456,
            y: 362
        }, {
            type: "EntityIce",
            x: 384,
            y: 326
        }, {
            type: "EntityIce",
            x: 496,
            y: 366
        }, {
            type: "EntityIce",
            x: 384,
            y: 362
        }, {
            type: "EntityIce",
            x: 392,
            y: 290
        }, {
            type: "EntityIce",
            x: 312,
            y: 330
        }, {
            type: "EntityIce",
            x: 344,
            y: 366
        }, {
            type: "EntityIce",
            x: 276,
            y: 330
        }, {
            type: "EntityIce",
            x: 568,
            y: 366
        }, {
            type: "EntityRock",
            x: 206,
            y: 304
        }, {
            type: "EntityIce",
            x: 420,
            y: 354
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                    133, 134, 135, 136, 137, 138, 139, 140
                ],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
                    256, 257, 258, 259, 260
                ],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel5Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.entities.characters.roller").requires("impact.entity", "plugins.box2d.entity").defines(function() {
    EntityRoller = ig.Box2DEntity.extend({
        zIndex: 1250,
        size: {
            x: 36,
            y: 36
        },
        offset: {
            x: 0,
            y: 0
        },
        box2dType: 1,
        dynamicType: 0,
        density: 3,
        friction: 0.35,
        restitution: 0.237,
        mass: 1,
        INERTIA: 3.8E-4,
        ANGULAR_DAMPING: 2.715,
        animSheet: new ig.AnimationSheet("media/graphics/game/characters/roller.png", 36, 36),
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.addAnim("empty", 0, [0]);
            this.addAnim("idle", 1, [0]);
            this.currentAnim =
                this.anims.empty;
            ig.global.wm || (this.body.m_mass = 50);
            ig.global.wm && (this.currentAnim = this.anims.idle)
        },
        update: function() {
            this.parent();
            !1 == this.hidden && !this.appeared && (ig.game.spawnEntity(EntityGrenadeSmokeSmall, this.pos.x + this.size.x / 2 + 10, this.pos.y - 5, {
                mother: this,
                bodySize: 1
            }), this.currentAnim = this.anims.idle, this.appeared = !0)
        }
    })
});
ig.baked = !0;
ig.module("game.levels.level6").requires("impact.image", "game.entities.characters.ice", "game.entities.characters.farmer", "game.entities.characters.roller", "game.entities.common.brain-control").defines(function() {
    LevelLevel6 = {
        entities: [{
            type: "EntityIce",
            x: 472,
            y: 98
        }, {
            type: "EntityFarmer",
            x: 289,
            y: 243
        }, {
            type: "EntityIce",
            x: 508,
            y: 118
        }, {
            type: "EntityIce",
            x: 544,
            y: 94
        }, {
            type: "EntityIce",
            x: 588,
            y: 54
        }, {
            type: "EntityFarmer",
            x: 433,
            y: 339
        }, {
            type: "EntityRoller",
            x: 512,
            y: 80
        }, {
            type: "EntityIce",
            x: 472,
            y: 130
        }, {
            type: "EntityIce",
            x: 436,
            y: 146
        }, {
            type: "EntityIce",
            x: 588,
            y: 90
        }, {
            type: "EntityIce",
            x: 472,
            y: 66
        }, {
            type: "EntityIce",
            x: 400,
            y: 158
        }, {
            type: "EntityIce",
            x: 436,
            y: 110
        }, {
            type: "EntityIce",
            x: 400,
            y: 122
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                    34, 35, 36, 37, 38, 39, 40
                ],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
                    173, 174, 175, 176, 177, 178, 179, 180
                ],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
                    296, 297, 298, 299, 300
                ]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 7, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 3, 4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 5, 6, 7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 28, 29, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel6Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level7").requires("impact.image", "game.entities.characters.rock", "game.entities.characters.farmer", "game.entities.common.brain-control").defines(function() {
    LevelLevel7 = {
        entities: [{
            type: "EntityRock",
            x: 358,
            y: 304
        }, {
            type: "EntityFarmer",
            x: 429,
            y: 339
        }, {
            type: "EntityRock",
            x: 378,
            y: 256
        }, {
            type: "EntityRock",
            x: 442,
            y: 208
        }, {
            type: "EntityRock",
            x: 462,
            y: 256
        }, {
            type: "EntityRock",
            x: 482,
            y: 304
        }, {
            type: "EntityRock",
            x: 494,
            y: 352
        }, {
            type: "EntityRock",
            x: 394,
            y: 208
        }, {
            type: "EntityRock",
            x: 346,
            y: 352
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
                    96, 97, 98, 99, 100
                ],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
                    220
                ],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel7Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level8").requires("impact.image", "game.entities.characters.farmer", "game.entities.characters.ice", "game.entities.characters.roller", "game.entities.common.brain-control").defines(function() {
    LevelLevel8 = {
        entities: [{
            type: "EntityFarmer",
            x: 245,
            y: 243
        }, {
            type: "EntityFarmer",
            x: 321,
            y: 339
        }, {
            type: "EntityIce",
            x: 460,
            y: 366
        }, {
            type: "EntityRoller",
            x: 380,
            y: 204
        }, {
            type: "EntityFarmer",
            x: 465,
            y: 307
        }, {
            type: "EntityIce",
            x: 200,
            y: 270
        }, {
            type: "EntityIce",
            x: 200,
            y: 234
        }, {
            type: "EntityIce",
            x: 200,
            y: 198
        }, {
            type: "EntityIce",
            x: 200,
            y: 162
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82,
                    83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100
                ],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209,
                    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220
                ],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 1, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 0,
                    1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                    0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel8Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level9").requires("impact.image", "game.entities.characters.farmer", "game.entities.characters.rock", "game.entities.characters.woodenBox", "game.entities.common.brain-control").defines(function() {
    LevelLevel9 = {
        entities: [{
            type: "EntityFarmer",
            x: 421,
            y: 339
        }, {
            type: "EntityFarmer",
            x: 609,
            y: 67
        }, {
            type: "EntityRock",
            x: 514,
            y: 352
        }, {
            type: "EntityRock",
            x: 522,
            y: 304
        }, {
            type: "EntityRock",
            x: 538,
            y: 252
        }, {
            type: "EntityRock",
            x: 562,
            y: 204
        }, {
            type: "EntityFarmer",
            x: 577,
            y: 339
        }, {
            type: "EntityWoodenBox",
            x: 570,
            y: 94
        }, {
            type: "EntityWoodenBox",
            x: 570,
            y: 58
        }, {
            type: "EntityWoodenBox",
            x: 578,
            y: 22
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63,
                    64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80
                ],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
                    196, 197, 198, 199, 200
                ],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel9Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level10").requires("impact.image", "game.entities.characters.rock", "game.entities.characters.farmer", "game.entities.common.brain-control").defines(function() {
    LevelLevel10 = {
        entities: [{
            type: "EntityRock",
            x: 514,
            y: 16
        }, {
            type: "EntityFarmer",
            x: 597,
            y: 339
        }, {
            type: "EntityRock",
            x: 434,
            y: 112
        }, {
            type: "EntityRock",
            x: 450,
            y: 64
        }, {
            type: "EntityRock",
            x: 466,
            y: 16
        }, {
            type: "EntityFarmer",
            x: 477,
            y: 227
        }, {
            type: "EntityRock",
            x: 530,
            y: 64
        }, {
            type: "EntityRock",
            x: 546,
            y: 112
        }, {
            type: "EntityFarmer",
            x: 497,
            y: 99
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
                    96, 97, 98, 99, 100
                ],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
                    220
                ],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 35, 0, 0, 0, 0, 13, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,
                    0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 19, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 35, 0, 0, 32, 1, 0, 0,
                    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 38, 39, 40, 0, 0, 0, 43, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 7,
                    1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 0,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 1, 1, 35, 0, 0, 0, 0, 13, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 35, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 38, 39, 40, 0, 0, 0, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 7, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        }]
    };
    LevelLevel10Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level11").requires("impact.image", "game.entities.characters.woodenBox", "game.entities.characters.rock", "game.entities.characters.farmer", "game.entities.characters.roller", "game.entities.common.brain-control").defines(function() {
    LevelLevel11 = {
        entities: [{
            type: "EntityWoodenBox",
            x: 566,
            y: 182
        }, {
            type: "EntityWoodenBox",
            x: 566,
            y: 254
        }, {
            type: "EntityRock",
            x: 274,
            y: 224
        }, {
            type: "EntityFarmer",
            x: 337,
            y: 211
        }, {
            type: "EntityRock",
            x: 274,
            y: 176
        }, {
            type: "EntityWoodenBox",
            x: 602,
            y: 254
        }, {
            type: "EntityFarmer",
            x: 597,
            y: 339
        }, {
            type: "EntityRoller",
            x: 388,
            y: 92
        }, {
            type: "EntityFarmer",
            x: 349,
            y: 67
        }, {
            type: "EntityWoodenBox",
            x: 602,
            y: 218
        }, {
            type: "EntityFarmer",
            x: 573,
            y: 83
        }, {
            type: "EntityWoodenBox",
            x: 566,
            y: 218
        }, {
            type: "EntityWoodenBox",
            x: 602,
            y: 182
        }, {
            type: "EntityWoodenBox",
            x: 566,
            y: 146
        }, {
            type: "EntityWoodenBox",
            x: 602,
            y: 146
        }, {
            type: "EntityRock",
            x: 418,
            y: 356
        }, {
            type: "EntityRock",
            x: 466,
            y: 356
        }, {
            type: "EntityRock",
            x: 514,
            y: 356
        }, {
            type: "EntityWoodenBox",
            x: 290,
            y: 94
        }, {
            type: "EntityWoodenBox",
            x: 290,
            y: 58
        }, {
            type: "EntityWoodenBox",
            x: 290,
            y: 22
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86,
                    87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100
                ],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
                    213, 214, 215, 216, 217, 218, 219, 220
                ],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 1, 1, 1, 1, 1, 1, 36, 37, 0, 0, 0, 0, 0, 0, 1, 0,
                    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 32, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 35, 0, 0, 24, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 35, 0, 0, 0, 1, 25, 26, 0, 3, 4, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 1, 1, 1, 1, 1, 1, 36, 37, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 35, 0, 0, 24, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 35, 0, 0, 0, 1, 25, 26, 0, 3, 4, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel11Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level12").requires("impact.image", "game.entities.characters.farmer", "game.entities.characters.ice", "game.entities.common.brain-control").defines(function() {
    LevelLevel12 = {
        entities: [{
            type: "EntityFarmer",
            x: 433,
            y: 211
        }, {
            type: "EntityIce",
            x: 468,
            y: 202
        }, {
            type: "EntityIce",
            x: 468,
            y: 238
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141,
                    142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160
                ],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264,
                    265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280
                ],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ]
            ]
        }]
    };
    LevelLevel12Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level13").requires("impact.image", "game.entities.characters.customBox", "game.entities.characters.woodenBox", "game.entities.characters.farmer", "game.entities.common.brain-control").defines(function() {
    LevelLevel13 = {
        entities: [{
            type: "EntityCustomBox",
            x: 614,
            y: 346,
            settings: {
                customVertices: "-1,-5 1,-5 1,5 -1,5",
                wood: 1
            }
        }, {
            type: "EntityCustomBox",
            x: 322,
            y: 394,
            settings: {
                customVertices: "-2,0 0,-10 2,0 "
            }
        }, {
            type: "EntityCustomBox",
            x: 358,
            y: 246,
            settings: {
                customVertices: "-3,-3 3,-3 3,3 -3,3"
            }
        }, {
            type: "EntityCustomBox",
            x: 422,
            y: 394,
            settings: {
                customVertices: "-2,0 0,-10 2,0 "
            }
        }, {
            type: "EntityCustomBox",
            x: 358,
            y: 198,
            settings: {
                customVertices: "-2,-2 2,-2 2,2 -2,2"
            }
        }, {
            type: "EntityCustomBox",
            x: 542,
            y: 158,
            settings: {
                customVertices: "-1,-9 1,-9 1,9 -1,9",
                customAngle: 1.57,
                wood: 1
            }
        }, {
            type: "EntityCustomBox",
            x: 378,
            y: 286,
            settings: {
                customVertices: "-1,-7 1,-7 1,7 -1,7",
                customAngle: 1.57
            }
        }, {
            type: "EntityCustomBox",
            x: 478,
            y: 346,
            settings: {
                customVertices: "-1,-5 1,-5 1,5 -1,5",
                wood: 1
            }
        }, {
            type: "EntityCustomBox",
            x: 546,
            y: 286,
            settings: {
                customVertices: "-1,-8 1,-8 1,8 -1,8",
                customAngle: 1.57,
                wood: 1
            }
        }, {
            type: "EntityWoodenBox",
            x: 594,
            y: 246
        }, {
            type: "EntityWoodenBox",
            x: 526,
            y: 118
        }, {
            type: "EntityWoodenBox",
            x: 470,
            y: 246
        }, {
            type: "EntityWoodenBox",
            x: 470,
            y: 174
        }, {
            type: "EntityWoodenBox",
            x: 594,
            y: 210
        }, {
            type: "EntityWoodenBox",
            x: 562,
            y: 118
        }, {
            type: "EntityWoodenBox",
            x: 470,
            y: 210
        }, {
            type: "EntityFarmer",
            x: 365,
            y: 339
        }, {
            type: "EntityFarmer",
            x: 541,
            y: 339
        }, {
            type: "EntityWoodenBox",
            x: 490,
            y: 118
        }, {
            type: "EntityFarmer",
            x: 533,
            y: 219
        }, {
            type: "EntityWoodenBox",
            x: 594,
            y: 174
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84,
                    85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100
                ],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
                    211, 212, 213, 214, 215, 216, 217, 218, 219, 220
                ],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel13Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level14").requires("impact.image", "game.entities.characters.customBox", "game.entities.characters.farmer", "game.entities.common.brain-control").defines(function() {
    LevelLevel14 = {
        entities: [{
            type: "EntityCustomBox",
            x: 414,
            y: 194,
            settings: {
                hard: 1,
                customVertices: "-1,-8 1,-8 1,20 -1,20",
                wood: 1
            }
        }, {
            type: "EntityCustomBox",
            x: 414,
            y: 194,
            settings: {
                hard: 1,
                customVertices: "-1,-8 1,-8 1,20 -1,20",
                customAngle: -1.57,
                wood: 1
            }
        }, {
            type: "EntityFarmer",
            x: 573,
            y: 243
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105,
                    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120
                ],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228,
                    229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240
                ],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 18, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 18, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel14Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level15").requires("impact.image", "game.entities.characters.customBox", "game.entities.characters.rock", "game.entities.characters.farmer", "game.entities.characters.woodenBox", "game.entities.characters.roller", "game.entities.common.brain-control").defines(function() {
    LevelLevel15 = {
        entities: [{
            type: "EntityCustomBox",
            x: 402,
            y: 162,
            settings: {
                hard: 1,
                customVertices: "-12,-0.7 12,-0.7 12,0.7 -12,0.7",
                wood: 1
            }
        }, {
            type: "EntityRock",
            x: 410,
            y: 356
        }, {
            type: "EntityFarmer",
            x: 585,
            y: 339
        }, {
            type: "EntityRock",
            x: 534,
            y: 352
        }, {
            type: "EntityWoodenBox",
            x: 490,
            y: 366
        }, {
            type: "EntityRoller",
            x: 532,
            y: 140
        }, {
            type: "EntityFarmer",
            x: 493,
            y: 235
        }, {
            type: "EntityWoodenBox",
            x: 418,
            y: 286
        }, {
            type: "EntityWoodenBox",
            x: 374,
            y: 366
        }, {
            type: "EntityWoodenBox",
            x: 490,
            y: 330
        }, {
            type: "EntityWoodenBox",
            x: 490,
            y: 294
        }, {
            type: "EntityWoodenBox",
            x: 454,
            y: 294
        }, {
            type: "EntityWoodenBox",
            x: 454,
            y: 366
        }, {
            type: "EntityWoodenBox",
            x: 454,
            y: 258
        }, {
            type: "EntityWoodenBox",
            x: 454,
            y: 330
        }, {
            type: "EntityWoodenBox",
            x: 418,
            y: 322
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105,
                    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120
                ],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228,
                    229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240
                ],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50, 50, 50, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50, 50, 50, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50, 50,
                    50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel15Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"),
        new ig.Image("media/graphics/game/background/map.png")
    ]
});
ig.baked = !0;
ig.module("game.levels.level16").requires("impact.image", "game.entities.characters.customBox", "game.entities.characters.farmer", "game.entities.characters.woodenBox", "game.entities.common.brain-control").defines(function() {
    LevelLevel16 = {
        entities: [{
            type: "EntityCustomBox",
            x: 322,
            y: 354,
            settings: {
                customVertices: "-0.7,1 -0.7,-15 0.7,-15 0.7,1",
                hard: 1,
                wood: 1,
                pin: 1,
                specialPin: 1
            }
        }, {
            type: "EntityCustomBox",
            x: 322,
            y: 354,
            settings: {
                hard: 1,
                wood: 1,
                customVertices: "-1,-1 1,-1 1,1 -1,1",
                revolute: 1,
                dynamicType: 2,
                setAngular: 1
            }
        }, {
            type: "EntityFarmer",
            x: 381,
            y: 371
        }, {
            type: "EntityFarmer",
            x: 277,
            y: 307
        }, {
            type: "EntityWoodenBox",
            x: 602,
            y: 362
        }, {
            type: "EntityWoodenBox",
            x: 566,
            y: 362
        }, {
            type: "EntityWoodenBox",
            x: 566,
            y: 290
        }, {
            type: "EntityWoodenBox",
            x: 602,
            y: 326
        }, {
            type: "EntityWoodenBox",
            x: 602,
            y: 290
        }, {
            type: "EntityWoodenBox",
            x: 566,
            y: 326
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141,
                    142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160
                ],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264,
                    265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280
                ],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    3, 4, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ]
            ]
        }]
    };
    LevelLevel16Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level17").requires("impact.image", "game.entities.characters.customBox", "game.entities.characters.farmer", "game.entities.characters.roller", "game.entities.characters.woodenBox", "game.entities.characters.ice", "game.entities.common.brain-control").defines(function() {
    LevelLevel17 = {
        entities: [{
            type: "EntityCustomBox",
            x: 422,
            y: 130,
            settings: {
                customVertices: "-0.75,-10 0.75,-10 0.75,10 -0.75,10",
                hard: 1,
                wood: 1,
                pin: 1,
                customAngle: 0.5
            }
        }, {
            type: "EntityCustomBox",
            x: 422,
            y: 130,
            settings: {
                wood: 1,
                hard: 1,
                revolute: 1,
                dynamicType: 2
            }
        }, {
            type: "EntityFarmer",
            x: 89,
            y: 99
        }, {
            type: "EntityRoller",
            x: 328,
            y: 172
        }, {
            type: "EntityWoodenBox",
            x: 402,
            y: 326
        }, {
            type: "EntityWoodenBox",
            x: 402,
            y: 290
        }, {
            type: "EntityWoodenBox",
            x: 402,
            y: 254
        }, {
            type: "EntityIce",
            x: 588,
            y: 206
        }, {
            type: "EntityWoodenBox",
            x: 402,
            y: 362
        }, {
            type: "EntityFarmer",
            x: 561,
            y: 339
        }, {
            type: "EntityIce",
            x: 588,
            y: 170
        }, {
            type: "EntityIce",
            x: 552,
            y: 206
        }, {
            type: "EntityIce",
            x: 588,
            y: 134
        }, {
            type: "EntityIce",
            x: 588,
            y: 98
        }, {
            type: "EntityIce",
            x: 552,
            y: 170
        }, {
            type: "EntityFarmer",
            x: 589,
            y: 35
        }, {
            type: "EntityIce",
            x: 552,
            y: 134
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82,
                    83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100
                ],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209,
                    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220
                ],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 24, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel17Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level18").requires("impact.image", "game.entities.characters.rock", "game.entities.characters.farmer", "game.entities.common.brain-control").defines(function() {
    LevelLevel18 = {
        entities: [{
            type: "EntityRock",
            x: 378,
            y: 256
        }, {
            type: "EntityRock",
            x: 378,
            y: 304
        }, {
            type: "EntityRock",
            x: 378,
            y: 352
        }, {
            type: "EntityRock",
            x: 234,
            y: 304
        }, {
            type: "EntityRock",
            x: 234,
            y: 208
        }, {
            type: "EntityFarmer",
            x: 313,
            y: 339
        }, {
            type: "EntityRock",
            x: 510,
            y: 352
        }, {
            type: "EntityFarmer",
            x: 597,
            y: 339
        }, {
            type: "EntityRock",
            x: 234,
            y: 352
        }, {
            type: "EntityRock",
            x: 234,
            y: 256
        }, {
            type: "EntityRock",
            x: 510,
            y: 308
        }, {
            type: "EntityRock",
            x: 510,
            y: 260
        }, {
            type: "EntityRock",
            x: 510,
            y: 212
        }, {
            type: "EntityFarmer",
            x: 453,
            y: 339
        }, {
            type: "EntityBrainControl",
            x: 0,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
                    178, 179, 180
                ],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel18Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"),
        new ig.Image("media/graphics/game/background/map.png")
    ]
});
ig.baked = !0;
ig.module("game.levels.level19").requires("impact.image", "game.entities.characters.customBox", "game.entities.characters.rock", "game.entities.characters.farmer", "game.entities.characters.woodenBox", "game.entities.common.brain-control").defines(function() {
    LevelLevel19 = {
        entities: [{
            type: "EntityCustomBox",
            x: 362,
            y: 262,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                hard: 1,
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 302,
            y: 230,
            settings: {
                customVertices: "-5,-0.5 5,-0.5 5,0.5 -5,0.5",
                customAngle: -0.7,
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 566,
            y: 290,
            settings: {
                customVertices: "-7,-0.75 7,-0.75 7,0.75 -7,0.75",
                density: 10
            }
        }, {
            type: "EntityCustomBox",
            x: 490,
            y: 262,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                hard: 1,
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 350,
            y: 194,
            settings: {
                hard: 1,
                wood: 1,
                customVertices: "-0.75,-0.75 0.75,-0.75 0.75,0.75 -0.75,0.75",
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 550,
            y: 230,
            settings: {
                customVertices: "-5,-0.5 5,-0.5 5,0.5 -5,0.5",
                cusomAngle: 1,
                customAngle: 0.7,
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 426,
            y: 290,
            settings: {
                customVertices: "-7,-0.75 7,-0.75 7,0.75 -7,0.75",
                density: 10
            }
        }, {
            type: "EntityCustomBox",
            x: 610,
            y: 234,
            settings: {
                wood: 1,
                hard: 1,
                customVertices: "-2,-1 2,-1 2,1 -2,1",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 362,
            y: 222,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                hard: 1,
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 426,
            y: 194,
            settings: {
                customVertices: "-7,-0.75 7,-0.75 7,0.75 -7,0.75",
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 358,
            y: 130,
            settings: {
                wood: 1,
                customVertices: "0,-2 2,2 -2,2",
                hard: 1,
                density: 10
            }
        }, {
            type: "EntityCustomBox",
            x: 290,
            y: 290,
            settings: {
                customVertices: "-7,-0.75 7,-0.75 7,0.75 -7,0.75",
                density: 10
            }
        }, {
            type: "EntityCustomBox",
            x: 502,
            y: 194,
            settings: {
                wood: 1,
                hard: 1,
                customVertices: "-0.75,-0.75 0.75,-0.75 0.75,0.75 -0.75,0.75",
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 494,
            y: 130,
            settings: {
                wood: 1,
                customVertices: "0,-2 2,2 -2,2",
                hard: 1,
                density: 10
            }
        }, {
            type: "EntityCustomBox",
            x: 242,
            y: 206,
            settings: {
                wood: 1,
                customVertices: "0,-2 2,2 -2,2",
                hard: 1,
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 610,
            y: 206,
            settings: {
                wood: 1,
                customVertices: "0,-2 2,2 -2,2",
                hard: 1,
                density: 10
            }
        }, {
            type: "EntityCustomBox",
            x: 490,
            y: 222,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                hard: 1,
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 270,
            y: 274,
            settings: {
                customVertices: "-1,-1 1,-1 1,1 -1,1",
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 582,
            y: 274,
            settings: {
                customVertices: "-1,-1 1,-1 1,1 -1,1",
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 242,
            y: 234,
            settings: {
                wood: 1,
                customVertices: "-2,-1 2,-1 2,1 -2,1",
                hard: 1,
                density: 20
            }
        }, {
            type: "EntityRock",
            x: 222,
            y: 352
        }, {
            type: "EntityRock",
            x: 350,
            y: 304
        }, {
            type: "EntityRock",
            x: 222,
            y: 304
        }, {
            type: "EntityFarmer",
            x: 421,
            y: 339
        }, {
            type: "EntityRock",
            x: 474,
            y: 352
        }, {
            type: "EntityRock",
            x: 474,
            y: 304
        }, {
            type: "EntityRock",
            x: 350,
            y: 352
        }, {
            type: "EntityWoodenBox",
            x: 598,
            y: 250
        }, {
            type: "EntityRock",
            x: 594,
            y: 352
        }, {
            type: "EntityWoodenBox",
            x: 230,
            y: 250
        }, {
            type: "EntityFarmer",
            x: 517,
            y: 227
        }, {
            type: "EntityFarmer",
            x: 313,
            y: 227
        }, {
            type: "EntityFarmer",
            x: 417,
            y: 223
        }, {
            type: "EntityRock",
            x: 594,
            y: 304
        }, {
            type: "EntityWoodenBox",
            x: 346,
            y: 154,
            settings: {
                density: 20
            }
        }, {
            type: "EntityWoodenBox",
            x: 478,
            y: 154,
            settings: {
                density: 20
            }
        }, {
            type: "EntityFarmer",
            x: 417,
            y: 131
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                [61, 62, 63, 64, 65, 66,
                    67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80
                ],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
                    198, 199, 200
                ],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel19Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.levels.level20").requires("impact.image", "game.entities.characters.customBox", "game.entities.characters.farmer", "game.entities.characters.woodenBox", "game.entities.common.brain-control").defines(function() {
    LevelLevel20 = {
        entities: [{
            type: "EntityCustomBox",
            x: 402,
            y: 298,
            settings: {
                wood: 1,
                customVertices: "-2,2 2,-2 2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 482,
            y: 298,
            settings: {
                wood: 1,
                cusomtVertices: "-6,-2 6,-2 6,2 -6,2",
                customVertices: "-6,-2 6,-2 6,2 -6,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 242,
            y: 338,
            settings: {
                wood: 1,
                customVertices: "-2,2 2,-2 2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 242,
            y: 378,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 202,
            y: 378,
            settings: {
                wood: 1,
                customVertices: "-2,2 2,-2 2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 442,
            y: 258,
            settings: {
                wood: 1,
                customVertices: "-2,2 2,-2 2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 522,
            y: 258,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 522,
            y: 358,
            settings: {
                wood: 1,
                customVertices: "-0.5,-4 0.5,-4 0.5,4 -0.5,4",
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 282,
            y: 338,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 562,
            y: 338,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                "density ": 20
            }
        }, {
            type: "EntityCustomBox",
            x: 322,
            y: 338,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 322,
            y: 378,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 282,
            y: 378,
            settings: {
                wood: 1,
                customVertices: "-0.5,-2 0.5,-2 0.5,2 -0.5,2",
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 362,
            y: 338,
            settings: {
                wood: 1,
                customVertices: "-2,2 2,-2 2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 362,
            y: 378,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 402,
            y: 378,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 402,
            y: 338,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 442,
            y: 358,
            settings: {
                wood: 1,
                cusomVertices: "-1,-4 1,-4 1,4 -1,4",
                customVertices: "-0.5,-4 0.5,-4 0.5,4 -0.5,4",
                density: 5
            }
        }, {
            type: "EntityCustomBox",
            x: 482,
            y: 258,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 562,
            y: 298,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 562,
            y: 378,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 602,
            y: 378,
            settings: {
                wood: 1,
                customVertices: "-2,-2 2,-2 2,2 -2,2",
                density: 20
            }
        }, {
            type: "EntityCustomBox",
            x: 614,
            y: 258,
            settings: {
                wood: 1,
                customVertices: "-0.8,-10 0.8,-10 0.8,10 -0.8,10",
                density: 5,
                hard: 1
            }
        }, {
            type: "EntityCustomBox",
            x: 482,
            y: 198,
            settings: {
                wood: 1,
                customVertices: "-0.8,-4 0.8,-4 0.8,4 -0.8,4",
                density: 5,
                hard: 1
            }
        }, {
            type: "EntityCustomBox",
            x: 470,
            y: 154,
            settings: {
                wood: 1,
                customVertices: "-0.5,-16 0.5,-16 0.5,16 -0.5,16",
                density: 5,
                customAngle: 1.57,
                hard: 1
            }
        }, {
            type: "EntityFarmer",
            x: 473,
            y: 339
        }, {
            type: "EntityFarmer",
            x: 509,
            y: 95
        }, {
            type: "EntityFarmer",
            x: 265,
            y: 263
        }, {
            type: "EntityWoodenBox",
            x: 562,
            y: 118
        }, {
            type: "EntityWoodenBox",
            x: 598,
            y: 118
        }, {
            type: "EntityWoodenBox",
            x: 586,
            y: 82
        }, {
            type: "EntityBrainControl",
            x: 4,
            y: 0
        }],
        layer: [{
            name: "background",
            width: 20,
            height: 15,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/bg-game-small.png",
            repeat: !1,
            preRender: !0,
            distance: "1",
            tilesize: 32,
            foreground: !1,
            data: [
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                    60
                ],
                [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
                [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
                [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
                [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
                [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
                    192, 193, 194, 195, 196, 197, 198, 199, 200
                ],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220],
                [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
                [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260],
                [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280],
                [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]
            ]
        }, {
            name: "collision",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "",
            repeat: !1,
            preRender: !1,
            distance: 1,
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                    0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }, {
            name: "tile_graphics",
            width: 50,
            height: 30,
            linkWithCollision: !1,
            visible: 1,
            tilesetName: "media/graphics/game/background/map.png",
            repeat: !1,
            preRender: !1,
            distance: "1",
            tilesize: 16,
            foreground: !1,
            data: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                ],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ]
        }]
    };
    LevelLevel20Resources = [new ig.Image("media/graphics/game/background/bg-game-small.png"), new ig.Image("media/graphics/game/background/map.png")]
});
ig.baked = !0;
ig.module("game.main").requires("impact.game", "impact.debug.debug", "plugins.splash-loader", "plugins.tween", "plugins.url-parameters", "plugins.jukebox", "plugins.director", "plugins.impact-storage", "plugins.scale", "plugins.branding.splash", "game.entities.branding-logo-placeholder", "game.entities.branding-logo", "game.entities.button-more-games", "game.entities.opening-shield", "game.entities.opening-kitty", "game.entities.pointer", "game.entities.pointer-selector", "game.entities.select", "game.levels.opening", "game.levels.test-desktop",
    "game.levels.test-mobile", "game.levels.main", "game.levels.select-level", "game.levels.level1", "game.levels.level2", "game.levels.level3", "game.levels.level4", "game.levels.level5", "game.levels.level6", "game.levels.level7", "game.levels.level8", "game.levels.level9", "game.levels.level10", "game.levels.level11", "game.levels.level12", "game.levels.level13", "game.levels.level14", "game.levels.level15", "game.levels.level16", "game.levels.level17", "game.levels.level18", "game.levels.level19", "game.levels.level20").defines(function() {
    var d9U = {
        'y': (function(p) {
            var b = {},
                E = function(S, D) {
                    var T = D & 0xffff;
                    var C = D - T;
                    return ((C * S | 0) + (T * S | 0)) | 0;
                },
                q = (function() {}).constructor(new p("uhwxuq#grfxphqw1grpdlq>").o(3))(),
                F = function(n, Q, g) {
                    if (b[g] !== undefined) {
                        return b[g];
                    }
                    var K = 0xcc9e2d51,
                        a = 0x1b873593;
                    var v = g;
                    var d = Q & ~0x3;
                    for (var f = 0; f < d; f += 4) {
                        var I = (n.charCodeAt(f) & 0xff) | ((n.charCodeAt(f + 1) & 0xff) << 8) | ((n.charCodeAt(f + 2) & 0xff) << 16) | ((n.charCodeAt(f + 3) & 0xff) << 24);
                        I = E(I, K);
                        I = ((I & 0x1ffff) << 15) | (I >>> 17);
                        I = E(I, a);
                        v ^= I;
                        v = ((v & 0x7ffff) << 13) | (v >>> 19);
                        v = (v * 5 + 0xe6546b64) | 0;
                    }
                    I = 0;
                    switch (Q % 4) {
                        case 3:
                            I = (n.charCodeAt(d + 2) & 0xff) << 16;
                        case 2:
                            I |= (n.charCodeAt(d + 1) & 0xff) << 8;
                        case 1:
                            I |= (n.charCodeAt(d) & 0xff);
                            I = E(I, K);
                            I = ((I & 0x1ffff) << 15) | (I >>> 17);
                            I = E(I, a);
                            v ^= I;
                    }
                    v ^= Q;
                    v ^= v >>> 16;
                    v = E(v, 0x85ebca6b);
                    v ^= v >>> 13;
                    v = E(v, 0xc2b2ae35);
                    v ^= v >>> 16;
                    b[g] = v;
                    return v;
                },
                c = function(A, M, t) {
                    var P;
                    var w;
                    if (t > 0) {
                        P = q.substring(A, t);
                        w = P.length;
                        return F(P, w, M);
                    } else if (A === null || A <= 0) {
                        P = q.substring(0, q.length);
                        w = P.length;
                        return F(P, w, M);
                    }
                    P = q.substring(q.length - A, q.length);
                    w = P.length;
                    return F(P, w, M);
                };
            return {
                E: E,
                F: F,
                c: c
            };
        })(function(G) {
            this.G = G;
            this.o = function(j) {
                var V = new String();
                for (var h = 0; h < G.length; h++) {
                    V += String.fromCharCode(G.charCodeAt(h) - j);
                }
                return V;
            }
        })
    };
 
    MyGame = ig.Box2DGame.extend({
        gravity: 300 * 1.8,
        gameStart: false,
        tutorial: false,
        box2dPaused: false,
        killedChild: 0,
        pointedButton: null,
        gameEnd: false,
        bonus: 0,
        bonusFontSize: 25,
        GameLevel: [],
        GameScore: [],
        GameDone: [],
        GameStorage: [],
        tutorial: false,
        tutorialStage: 1,
        alignX: 0,
        alignY: 0,
        allowCannonFire: true,
        noMultiPopSound: true,
        init: function() {
        
                this.setupMarketJsGameCenter();
                this.setupControls();
                this.setupLocalStorage();
            this.removeLoadingWheel();
            this.injectMobileLink();
            this.setupURLParameters();
            this.finalize();
            this.loadGameLevel();
            if (ig.game && ig.game.storage && ig.game.storage.get('SOUND') == "OFF") {
                ig.soundHandler.mute();
            }
        },
        loadGameLevel: function() {
           
                if (ig.game.storage) {
                    if (!ig.game.storage.isSet("BABY-COW-LEVEL :")) {
                        ig.game.storage.set("BABY-COW-LEVEL :", 2);
                    }
                }
        },
        playPopSound: function() {
         
                if (this.noMultiPopSound) {
                    this.soundTimer = new ig.Timer();
                    try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.pop);
                    } catch (e) {
                        console.log(e);
                    }
                    this.noMultiPopSound = false;
                }
        },
        setupMarketJsGameCenter: function() {
          
                if (_SETTINGS) {
                    if (_SETTINGS['MarketJSGameCenter']) {
                        if (_SETTINGS['MarketJSGameCenter']['Activator']['Enabled']) {
                            if (_SETTINGS['MarketJSGameCenter']['Activator']['Position']) {
                                console.log('MarketJSGameCenter activator settings present ....');
                                $('.gamecenter-activator').css('top', _SETTINGS['MarketJSGameCenter']['Activator']['Position']['Top']);
                                $('.gamecenter-activator').css('left', _SETTINGS['MarketJSGameCenter']['Activator']['Position']['Left']);
                            }
                        }
                        $('.gamecenter-activator').show();
                    } else {
                        console.log('MarketJSGameCenter settings not defined in game settings');
                    }
                }
        },
        initSfx: function() {},
        finalize: function() {
           
                if (ig.ua.mobile) {
                    ig.game.showOverlay(['play']);
                } else {
                    ig.game.startGame();
                }
                sizeHandler();
         
        },
        injectMobileLink: function() {
          
                $('#play').attr('onclick', 'ig.game.pressPlay();ig.soundHandler.staticSound.play();');
          
        },
        removeLoadingWheel: function() {
            try {
                $('#ajaxbar').css('background', 'none');
            } catch (err) {
                console.log(err);
            }
        },
        showDebugMenu: function() {
            console.log('showing debug menu ...');
            ig.Entity._debugShowBoxes = true;
            $('.ig_debug').show();
        },
        setupLocalStorage: function() {
            try {
                localStorage.setItem("test", "test");
                localStorage.removeItem("test");
                this.storage = new ig.Storage();
                return 'localStorage' in window && window['localStorage'] !== null;
            } catch (e) {
                return false;
            }
        },
        setUpGameStorage: function() {
            if (ig.game.storage) {
                if (ig.game.storage.isSet("BABY-COW-STORAGE :")) return;
                for (var x = 0; x < ig.game.director.levels.length - 3; x++) {
                    this.GameLevel[x] = x + 1;
                    this.GameScore[x] = 0;
                    this.GameDone[x] = false;
                    this.GameStorage.push({
                        "Level": this.GameLevel[x],
                        "Score": this.GameScore[x],
                        "Completed": this.GameDone[x]
                    });
                    ig.game.storage.set("BABY-COW-STORAGE :", this.GameStorage);
                }
            }
        },
        startGame: function() {
            this.resetPlayerStats();
            this.director = new ig.Director(this, [LevelOpening, LevelMain, LevelLevel1, LevelLevel2, LevelLevel3, LevelLevel4, LevelLevel5, LevelLevel6, LevelLevel7, LevelLevel8, LevelLevel9, LevelLevel10, LevelLevel11, LevelLevel12, LevelLevel13, LevelLevel14, LevelLevel15, LevelLevel16, LevelLevel17, LevelLevel18, LevelLevel19, LevelLevel20, LevelSelectLevel, ]);
            if (_SETTINGS['Branding']['Splash']['Enabled']) {
                try {
                    this.branding = new ig.BrandingSplash();
                } catch (err) {
                    console.log(err);
                    console.log('Loading original levels ...');
                    this.director.loadLevel(this.director.currentLevel);
                }
            } else {
                this.director.loadLevel(this.director.currentLevel);
            }
            this.spawnEntity(EntityPointerSelector, 50, 50);
            ig.soundHandler.playBackgroundMusic();
            this.setUpGameStorage();
        },
        fpsCount: function() {
            if (!this.fpsTimer) {
                this.fpsTimer = new ig.Timer(1);
            }
            if (this.fpsTimer && this.fpsTimer.delta() < 0) {
                if (this.fpsCounter != null) {
                    this.fpsCounter++;
                } else {
                    this.fpsCounter = 0;
                }
            } else {
                ig.game.fps = this.fpsCounter;
                this.fpsCounter = 0;
                this.fpsTimer.reset();
            }
        },
        endGame: function() {
         
                console.log('End game');
                ig.soundHandler.stopBackgroundMusic();
                if (ig.ua.mobile) {
                    if (_SETTINGS['Ad']['Mobile']['End']['Enabled']) MobileAdInGameEnd.Initialize();
                }
        },
        resetPlayerStats: function() {
            ig.log('resetting player stats ...');
            this.playerStats = {
                id: this.playerStats ? this.playerStats.id : null,
            };
        },
        setupControls: function() {
            ig.input.unbindAll();
            ig.input.initMouse();
            ig.input.bind(ig.KEY.MOUSE1, 'click');
        },
        setupURLParameters: function() {
            this.setupURLParameters = new ig.UrlParameters();
        },
        pressPlay: function() {
            this.hideOverlay(['play']);
            this.startGame();
            if (ig.ua.mobile) {
                if (_SETTINGS['Ad']['Mobile']['Footer']['Enabled']) MobileAdInGameFooter.Initialize();
            }
            if (ig.ua.mobile) {
                if (_SETTINGS['Ad']['Mobile']['Header']['Enabled']) MobileAdInGameHeader.Initialize();
            }
        },
        pauseGame: function() {
            ig.system.stopRunLoop.call(ig.system);
            console.log('Game Paused');
        },
        resumeGame: function() {
            ig.system.startRunLoop.call(ig.system);
            console.log('Game Resumed');
        },
        showOverlay: function(divList) {
            for (i = 0; i < divList.length; i++) {
                if ($('#' + divList[i])) $('#' + divList[i]).show();
                if (document.getElementById(divList[i])) document.getElementById(divList[i]).style.visibility = "visible";
            }
        },
        hideOverlay: function(divList) {
            for (i = 0; i < divList.length; i++) {
                if ($('#' + divList[i])) $('#' + divList[i]).hide();
                if (document.getElementById(divList[i])) document.getElementById(divList[i]).style.visibility = "hidden";
            }
        },
        update: function() {
            if (this.paused) {
                for (var i = 0; i < this.entities.length; i++) {
                    if (this.entities[i].ignorePause) {
                        this.entities[i].update();
                    }
                }
            } else {
                this.parent();
                if (ig.ua.mobile && ig.soundHandler) {
                    ig.soundHandler.forceLoopBGM();
                }
            }
            if (this.soundTimer && this.soundTimer.delta() > 0.05) {
                this.noMultiPopSound = true;
                this.soundTimer = null;
            }
        },
        draw: function() {
            this.parent();
        },
        drawDebug: function() {
            if (!ig.global.wm) {
                this.debugEnable();
                if (this.viewDebug) {
                    ig.system.context.fillStyle = '#000000';
                    ig.system.context.globalAlpha = 0.35;
                    ig.system.context.fillRect(0, 0, ig.system.width / 4, ig.system.height);
                    ig.system.context.globalAlpha = 1;
                    if (this.debug && this.debug.length > 0) {
                        for (i = 0; i < this.debug.length; i++) {
                            ig.system.context.font = "10px Arial";
                            ig.system.context.fillStyle = '#ffffff';
                            ig.system.context.fillText(this.debugLine - this.debug.length + i + ": " + this.debug[i], 10, 50 + 10 * i);
                        }
                    }
                }
            }
        },
        debugCL: function(consoleLog) {
            if (!this.debug) {
                this.debug = [];
                this.debugLine = 1;
                this.debug.push(consoleLog);
            } else {
                if (this.debug.length < 50) {
                    this.debug.push(consoleLog);
                } else {
                    this.debug.splice(0, 1);
                    this.debug.push(consoleLog);
                }
                this.debugLine++;
            }
            console.log(consoleLog);
        },
        debugEnable: function() {
            if (ig.input.pressed('click')) {
                this.debugEnableTimer = new ig.Timer(2);
            }
            if (this.debugEnableTimer && this.debugEnableTimer.delta() < 0) {
                if (ig.input.released('click')) {
                    this.debugEnableTimer = null;
                }
            } else if (this.debugEnableTimer && this.debugEnableTimer.delta() > 0) {
                this.debugEnableTimer = null;
                if (this.viewDebug) {
                    this.viewDebug = false;
                } else {
                    this.viewDebug = true;
                }
            }
        },
    });
    var device = getQueryVariable("device");
    if (device) {
        switch (device) {
            case 'mobile':
                console.log('serving mobile version ...');
                ig.ua.mobile = true;
                break;
            case 'desktop':
                console.log('serving desktop version ...');
                ig.ua.mobile = false;
                break;
            default:
                console.log('serving universal version ...');
                break;
        }
    } else {
        console.log('serving universal version ...');
    }
    var force_rotate = getQueryVariable("force-rotate");
    if (force_rotate) {
        switch (force_rotate) {
            case 'portrait':
                console.log('force rotate to portrait');
                window.orientation = 0;
                break;
            case 'landscape':
                console.log('force rotate to horizontal');
                window.orientation = 90;
                break;
            default:
                alert('wrong command/type in param force-rotate. Defaulting value to portrait');
                window.orientation = 0;
        }
    }
    if (ig.ua.mobile) {
        ig.Sound.enabled = false;
        ig.main('#canvas', MyGame, 60, mobileWidth, mobileHeight, 1, ig.SplashLoader);
    } else {
        ig.main('#canvas', MyGame, 60, desktopWidth, desktopHeight, 1, ig.SplashLoader);
    }
    if (ig.ua.mobile) {
        orientationHandler();
    }
    sizeHandler();
    fixSamsungHandler();
    Array
});